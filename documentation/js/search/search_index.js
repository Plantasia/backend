var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.133,1,2.253]],["body/modules/AppModule.html",[0,1.789,1,4.507,2,1.533,3,1.428,4,1.781,5,1.781,6,1.533,7,1.781,8,1.781,9,2.932,10,2.932,11,3.735,12,0.026,13,3.159,14,3.735,15,3.425,16,3.425,17,2.412,18,1.781,19,1.781,20,0.212,21,0.181,22,0.181,23,3.468,24,3.137,25,0.51,26,3.468,27,0.629,28,3.468,29,3.468,30,2.932,31,2.106,32,1.428,33,3.468,34,2.932,35,2.932,36,3.468,37,0.212,38,0.117,39,1.164,40,0.013,41,0.017,42,0.013]],["title/injectables/AppService.html",[43,0.658,44,2.51]],["body/injectables/AppService.html",[12,0.025,20,0.283,21,0.242,22,0.242,25,0.37,27,0.842,37,0.283,38,0.157,40,0.017,41,0.021,42,0.017,43,1.106,44,4.216,45,1.783,46,3.924,47,0.51,48,1.458,49,6.372,50,0.666,51,4.64,52,1.194,53,1.273,54,1.666,55,4.64,56,4.64]],["title/controllers/AuthController.html",[57,1.296,58,2.253]],["body/controllers/AuthController.html",[12,0.026,20,0.25,21,0.214,22,0.214,25,0.46,27,0.742,37,0.25,38,0.138,39,1.375,40,0.015,41,0.019,42,0.015,47,0.45,48,1.348,50,0.588,52,1.053,54,1.47,57,2.013,58,3.5,59,1.573,60,3.461,61,2.075,62,4.431,63,4.093,64,1.809,65,4.093,66,4.093,67,1.126,68,0.742,69,0.54,70,1.126,71,4.431,72,3.461,73,4.093,74,2.486,75,2.968,76,3.045,77,2.734,78,3.045,79,3.461,80,1.686,81,4.093,82,4.093,83,4.093,84,4.093]],["title/modules/AuthModule.html",[0,1.133,11,2.049]],["body/modules/AuthModule.html",[0,1.775,2,1.509,3,1.406,4,1.753,5,1.753,6,1.509,7,2.714,8,1.753,11,4.039,12,0.026,16,3.409,17,2.387,18,1.753,19,1.753,20,0.209,21,0.178,22,0.178,24,3.104,25,0.515,27,0.619,35,2.887,37,0.209,38,0.115,40,0.013,41,0.017,42,0.013,58,3.53,59,1.786,75,3.144,76,2.54,85,2.887,86,3.414,87,2.887,88,3.718,89,3.718,90,3.414,91,3.414,92,3.414,93,3.414,94,3.414,95,2.54,96,4.648,97,1.901,98,2.28,99,2.887,100,3.414,101,2.887,102,2.887,103,3.414]],["title/injectables/AuthService.html",[43,0.658,75,1.732]],["body/injectables/AuthService.html",[12,0.026,20,0.199,21,0.17,22,0.17,25,0.411,27,0.592,37,0.199,38,0.11,39,1.513,40,0.012,41,0.017,42,0.012,43,0.879,45,1.254,47,0.359,48,1.16,50,0.741,52,1.16,53,1.357,54,1.853,61,2.169,62,3.811,67,1.42,68,1.06,69,0.681,70,1.42,75,2.314,80,1.856,95,2.428,104,2.76,105,4.507,106,3.264,107,2.67,108,5.841,109,3.264,110,4.507,111,3.264,112,1.749,113,4.507,114,5.566,115,3.264,116,3.264,117,2.428,118,3.264,119,2.874,120,1.552,121,3.264,122,2.76,123,1.733,124,2.874,125,3.264,126,2.76,127,2.76,128,3.264,129,3.264,130,3.264,131,3.264]],["title/classes/Category.html",[38,0.114,132,1.296]],["body/classes/Category.html",[12,0.026,20,0.191,21,0.163,22,0.163,25,0.348,37,0.191,38,0.106,40,0.012,41,0.016,42,0.012,47,0.344,50,0.91,53,1.374,64,2.803,68,0.915,69,0.837,123,1.469,132,1.681,133,1.05,134,2.643,135,1.933,136,3.253,137,3.369,138,3.369,139,3.369,140,2.59,141,3.253,142,3.369,143,4.169,144,3.126,145,3.649,146,2.921,147,3.126,148,3.126,149,1.898,150,2.921,151,3.126,152,3.369,153,3.126,154,2.246,155,2.435,156,3.126,157,3.126,158,1.374,159,2.325,160,2.088,161,3.126,162,2.921,163,3.126,164,3.126,165,2.325,166,2.325,167,2.088,168,2.325,169,1.05,170,1.487,171,3.126,172,3.126,173,3.126,174,2.643,175,2.643,176,3.126,177,3.126]],["title/controllers/CategoryController.html",[57,1.296,178,2.253]],["body/controllers/CategoryController.html",[12,0.026,20,0.169,21,0.144,22,0.144,25,0.456,27,0.502,37,0.169,38,0.094,39,0.93,40,0.01,41,0.015,42,0.01,47,0.304,48,1.032,50,0.788,52,1.413,53,1.286,54,1.971,57,1.064,59,1.064,64,2.426,67,1.423,68,0.938,69,0.682,70,1.423,74,2.864,80,1.14,123,1.843,132,1.812,138,1.849,178,2.679,179,2.341,180,1.849,181,2.768,182,1.812,183,2.46,184,1.908,185,2.233,186,2.059,187,2.341,188,3.8,189,2.768,190,2.069,191,2.768,192,1.317,193,2.679,194,2.768,195,1.541,196,2.768,197,2.768,198,2.341,199,4.011,200,4.011,201,2.768,202,1.421,203,2.983,204,2.768,205,3.15,206,1.681,207,1.849,208,2.059,209,2.341,210,1.942,211,1.681,212,2.768,213,2.341,214,1.541,215,1.849,216,1.681,217,4.011,218,2.059,219,2.768,220,1.317,221,2.768,222,2.768,223,2.768,224,1.849,225,2.422,226,2.768,227,1.849,228,2.768,229,2.768,230,2.059,231,2.768,232,2.059,233,2.768]],["title/modules/CategoryModule.html",[0,1.133,13,1.732]],["body/modules/CategoryModule.html",[0,1.891,2,1.715,3,1.597,4,1.992,5,1.992,6,1.715,7,2.892,8,2.599,12,0.026,13,3.368,15,3.448,17,2.599,18,1.992,19,1.992,20,0.237,21,0.202,22,0.202,24,2.591,25,0.506,27,0.704,31,2.356,32,1.597,34,3.28,37,0.237,38,0.131,40,0.014,41,0.019,42,0.014,59,1.491,132,1.491,178,3.38,210,2.615,234,3.28,235,3.879,236,3.28,237,3.879,238,3.879,239,3.28,240,3.879,241,3.879,242,3.879]],["title/injectables/CategoryService.html",[43,0.658,210,1.389]],["body/injectables/CategoryService.html",[12,0.026,20,0.153,21,0.13,22,0.13,25,0.456,27,0.454,32,1.03,37,0.153,38,0.084,39,1.25,40,0.009,41,0.014,42,0.009,43,0.726,45,0.961,47,0.275,48,0.958,50,0.792,52,1.355,53,1.349,54,1.768,61,2.318,67,1.449,68,0.955,69,0.695,70,1.449,80,1.03,119,2.475,120,2.115,123,1.768,132,1.893,169,0.84,182,1.709,183,2.343,184,1.77,185,2.072,186,1.911,187,3.147,188,3.567,190,2.052,192,1.77,195,2.072,202,1.911,210,1.533,213,2.114,215,1.67,216,1.518,218,1.86,239,2.114,243,2.114,244,2.5,245,2.991,246,2.5,247,3.722,248,2.5,249,2.5,250,2.5,251,2.5,252,3.29,253,2.5,254,2.5,255,1.67,256,2.5,257,2.5,258,2.5,259,2.5,260,2.5,261,2.5,262,2.5,263,2.5,264,2.5,265,2.5,266,2.5,267,2.5,268,2.5,269,0.961,270,2.5,271,2.5,272,2.5,273,2.5,274,2.5,275,2.5,276,2.5,277,2.5,278,2.5,279,2.5,280,2.5,281,2.5,282,2.5]],["title/classes/Comment.html",[38,0.114,283,1.605]],["body/classes/Comment.html",[12,0.026,20,0.184,21,0.157,22,0.157,25,0.428,37,0.184,38,0.102,40,0.011,41,0.016,42,0.011,47,0.331,50,0.915,53,1.322,64,2.817,69,0.841,112,1.688,123,1.429,133,1.01,135,1.881,137,2.843,142,3.299,143,3.931,145,3.299,146,3.299,150,2.843,152,3.299,154,2.758,158,1.849,160,2.843,162,3.299,165,2.237,166,2.237,167,2.009,168,2.237,169,1.01,170,1.431,225,1.544,283,2.025,284,2.543,285,4.177,286,4.94,287,4.177,288,3.166,289,4.177,290,3.008,291,3.008,292,2.009,293,3.008,294,3.008,295,3.008,296,3.008,297,3.008,298,3.599,299,3.008,300,3.008,301,3.008,302,3.008,303,3.008,304,2.543,305,3.008,306,1.826,307,3.008,308,2.237,309,2.543,310,3.008,311,2.543,312,3.008,313,3.008]],["title/controllers/CommentController.html",[57,1.296,314,2.253]],["body/controllers/CommentController.html",[12,0.026,20,0.194,21,0.166,22,0.166,25,0.461,27,0.577,37,0.194,38,0.107,39,1.068,40,0.012,41,0.016,42,0.012,47,0.35,48,1.139,50,0.79,52,1.417,53,1.237,54,1.976,57,1.222,59,1.222,64,2.433,67,1.401,68,0.923,69,0.672,70,1.401,74,3.091,80,1.309,123,1.486,180,2.124,182,1.956,183,2.618,184,2.105,185,2.464,190,2.064,192,1.513,193,2.956,195,1.77,205,2.956,206,1.931,207,2.124,209,2.689,215,2.124,216,1.931,220,1.513,224,2.124,225,2.273,227,2.956,230,2.365,283,1.513,314,2.956,315,2.689,316,2.365,317,3.18,318,3.343,319,3.18,320,3.18,321,3.18,322,3.18,323,2.834,324,2.689,325,3.18,326,2.689,327,2.124,328,3.18,329,3.18,330,3.18,331,3.18,332,3.18,333,3.18]],["title/injectables/CommentService.html",[43,0.658,323,1.878]],["body/injectables/CommentService.html",[3,0.911,12,0.026,20,0.135,21,0.115,22,0.115,25,0.472,27,0.401,32,0.911,37,0.135,38,0.075,39,1.139,40,0.008,41,0.013,42,0.008,43,0.662,45,0.85,47,0.243,48,0.873,50,0.756,52,1.285,53,1.303,54,1.662,61,2.267,67,1.373,68,0.905,69,0.658,70,1.373,80,1.699,107,2.206,112,1.568,117,1.645,119,2.932,120,2.374,123,1.554,158,1.454,169,0.743,170,1.052,182,1.586,183,1.963,184,1.614,185,1.889,186,1.742,190,1.948,192,1.614,195,1.889,202,1.742,245,2.81,252,3.518,255,1.477,269,1.586,283,2.201,306,2.06,318,3.33,323,1.889,326,1.87,334,1.87,335,2.212,336,3.49,337,1.906,338,2.212,339,3.393,340,3.393,341,2.212,342,2.212,343,2.212,344,2.212,345,2.212,346,2.212,347,1.477,348,2.212,349,2.212,350,3.393,351,1.645,352,2.212,353,2.212,354,2.212,355,2.212,356,2.212,357,2.212,358,1.645,359,2.212,360,2.212,361,2.212,362,2.212,363,2.212,364,2.212,365,2.212,366,2.212,367,2.212,368,2.212,369,1.645,370,2.212,371,1.645,372,2.212,373,2.212,374,2.869,375,3.393,376,2.212,377,2.212,378,1.87,379,2.212,380,2.212,381,2.212,382,2.212]],["title/modules/CommentsModule.html",[0,1.133,14,2.049]],["body/modules/CommentsModule.html",[0,1.733,2,1.443,3,1.344,4,1.676,5,1.676,6,1.443,7,2.651,8,2.314,12,0.026,13,1.676,14,4.009,17,2.314,18,1.676,19,1.676,20,0.199,21,0.17,22,0.17,24,2.18,25,0.53,27,0.592,31,1.982,32,1.344,37,0.199,38,0.11,40,0.012,41,0.017,42,0.012,59,1.254,107,2.67,112,1.416,117,2.428,132,1.254,158,1.026,170,1.552,210,2.487,211,1.982,214,1.817,283,1.552,306,1.982,314,3.01,323,3.363,324,2.76,327,2.18,337,2.487,347,2.18,383,2.76,384,2.76,385,3.264,386,3.264,387,2.76,388,2.76,389,2.76,390,2.76,391,3.264,392,3.264,393,3.264,394,2.76,395,3.264]],["title/classes/CreateCategoryDTO.html",[38,0.114,188,2.049]],["body/classes/CreateCategoryDTO.html",[12,0.024,20,0.227,21,0.194,22,0.194,37,0.227,38,0.125,40,0.014,41,0.018,42,0.014,47,0.408,50,0.876,53,1.46,68,1,69,0.805,133,1.246,135,2.173,136,4.1,138,3.681,139,3.681,140,2.83,154,2.524,188,2.985,220,3.253,396,5.304,397,3.138,398,3.253,399,3.711,400,3.711,401,3.711,402,3.711,403,3.711]],["title/classes/CreateCommentDTO.html",[38,0.114,318,2.049]],["body/classes/CreateCommentDTO.html",[12,0.024,20,0.195,21,0.167,22,0.167,25,0.354,37,0.195,38,0.108,40,0.012,41,0.016,42,0.012,47,0.352,50,0.901,53,1.45,69,0.828,112,1.005,133,1.074,135,1.964,149,2.698,154,2.833,158,1.005,170,1.521,220,3.233,285,4.318,287,4.318,288,3.799,289,4.318,306,1.942,318,2.698,369,3.799,371,3.799,398,3.287,404,5.39,405,2.704,406,5.107,407,5.107,408,3.198,409,3.198,410,3.198,411,3.198,412,3.198,413,3.198,414,3.198,415,3.198]],["title/classes/CreateTopicDTO.html",[38,0.114,416,2.049]],["body/classes/CreateTopicDTO.html",[12,0.025,20,0.229,21,0.196,22,0.196,25,0.299,37,0.229,38,0.127,40,0.014,41,0.018,42,0.014,47,0.412,50,0.879,53,1.48,68,1.005,69,0.808,132,1.44,133,1.259,135,2.187,139,3.305,214,2.087,220,3.134,371,4.12,398,3.257,416,3.005,417,5.319,418,3.169,419,5.539,420,4.684,421,3.748,422,3.748,423,3.748,424,3.748,425,3.748,426,3.169]],["title/classes/CreateUserDTO.html",[38,0.114,427,2.049]],["body/classes/CreateUserDTO.html",[12,0.025,20,0.188,21,0.161,22,0.161,37,0.188,38,0.104,40,0.011,41,0.016,42,0.011,47,0.339,50,0.893,53,1.48,68,0.908,69,0.821,112,0.969,124,2.788,133,1.035,135,1.914,140,2.571,149,2.63,154,2.224,182,1.185,220,3.276,269,1.185,398,3.276,427,2.63,428,5.346,429,2.607,430,4.234,431,3.724,432,5.007,433,4.592,434,4.234,435,3.083,436,3.083,437,3.083,438,3.083,439,3.083,440,3.083,441,3.083,442,3.083,443,3.083,444,3.083,445,3.083]],["title/injectables/JwtAuthGuard.html",[43,0.658,446,2.253]],["body/injectables/JwtAuthGuard.html",[12,0.025,20,0.298,21,0.255,22,0.255,25,0.466,27,0.886,37,0.298,38,0.165,40,0.018,41,0.022,42,0.018,43,1.141,45,1.877,97,2.72,446,3.905,447,4.131,448,3.634,449,4.131,450,3.263,451,4.885]],["title/injectables/JwtStrategy.html",[43,0.658,88,2.049]],["body/injectables/JwtStrategy.html",[12,0.026,20,0.242,21,0.207,22,0.207,25,0.48,27,0.719,37,0.242,38,0.134,39,1.911,40,0.015,41,0.019,42,0.015,43,1.001,45,1.522,47,0.436,48,1.32,50,0.737,52,1.02,61,2.043,67,1.09,68,0.719,69,0.523,70,1.09,88,3.116,97,2.206,98,2.646,99,3.35,102,3.35,124,2.206,126,3.35,450,2.646,452,3.35,453,4.339,454,3.962,455,5.131,456,3.962,457,3.962,458,3.35,459,2.947,460,3.35,461,3.35,462,3.35,463,3.35,464,3.962,465,3.962,466,3.962,467,2.947,468,3.962,469,3.962,470,3.962,471,3.962]],["title/injectables/LocalAuthGuard.html",[43,0.658,77,2.253]],["body/injectables/LocalAuthGuard.html",[12,0.025,20,0.298,21,0.255,22,0.255,25,0.466,27,0.886,37,0.298,38,0.165,40,0.018,41,0.022,42,0.018,43,1.141,45,1.877,77,3.905,97,2.72,448,3.634,449,4.131,450,3.263,472,4.131,473,4.885]],["title/injectables/LocalStrategy.html",[43,0.658,89,2.049]],["body/injectables/LocalStrategy.html",[12,0.026,20,0.217,21,0.186,22,0.186,25,0.48,27,0.645,37,0.217,38,0.12,39,1.194,40,0.013,41,0.018,42,0.013,43,0.932,45,1.367,47,0.391,48,1.23,50,0.686,52,0.915,53,1.392,54,1.277,61,1.937,67,1.315,68,0.867,69,0.63,70,1.315,75,3.182,76,2.645,78,2.645,89,2.901,97,1.98,112,1.501,119,1.98,120,1.692,124,2.66,190,1.604,269,1.367,431,4.477,450,2.375,453,4.04,458,3.007,459,2.645,461,3.007,462,3.007,463,3.007,474,3.007,475,3.556,476,3.556,477,4.778,478,3.556,479,4.778,480,3.007,481,3.556,482,3.556,483,3.556,484,3.556,485,3.556,486,3.556,487,3.556]],["title/classes/Topic.html",[38,0.114,158,1.06]],["body/classes/Topic.html",[12,0.026,20,0.172,21,0.147,22,0.147,25,0.415,37,0.172,38,0.095,40,0.01,41,0.015,42,0.01,47,0.31,50,0.923,53,1.294,64,2.812,68,0.864,69,0.848,112,1.737,123,1.364,132,2.213,133,0.946,135,1.796,137,3.182,139,2.713,140,2.086,142,2.713,143,3.482,145,3.182,146,3.182,149,2.467,150,2.713,152,3.482,154,1.447,155,1.568,158,1.737,159,2.096,160,3.182,162,2.713,166,2.096,167,1.882,169,0.946,214,1.568,225,1.447,283,1.932,288,3.544,292,1.882,298,3.435,304,2.382,306,1.711,308,2.096,311,2.382,316,3.022,327,1.882,420,4.028,426,2.382,488,2.382,489,2.817,490,2.817,491,2.817,492,2.817,493,2.817,494,2.817,495,2.817,496,2.817,497,2.817,498,2.817,499,2.817,500,2.817,501,2.817,502,2.817,503,2.817,504,2.817,505,2.817,506,2.817,507,2.817,508,2.817,509,2.817,510,2.817,511,2.817,512,2.382,513,2.817,514,2.382]],["title/modules/TopicModule.html",[0,1.133,15,1.878]],["body/modules/TopicModule.html",[0,1.882,2,1.697,3,1.581,4,1.971,5,1.971,6,1.697,7,2.581,8,1.971,12,0.026,13,1.971,15,3.644,17,2.581,18,1.971,19,1.971,20,0.234,21,0.2,22,0.2,25,0.521,27,0.696,31,2.331,32,1.581,37,0.234,38,0.13,40,0.014,41,0.019,42,0.014,59,1.475,132,1.475,158,1.206,210,2.608,211,2.331,214,2.137,337,2.541,387,3.246,394,3.246,515,3.839,516,3.839,517,3.839,518,3.357,519,2.856,520,3.246,521,3.839,522,3.839,523,3.839,524,3.839,525,3.839]],["title/controllers/TopicsController.html",[57,1.296,518,2.253]],["body/controllers/TopicsController.html",[12,0.026,20,0.176,21,0.15,22,0.15,25,0.42,27,0.523,37,0.176,38,0.097,39,0.968,40,0.011,41,0.015,42,0.011,47,0.317,48,1.063,50,0.801,52,1.435,53,1.304,54,2.003,57,1.108,59,1.108,64,2.465,67,1.45,68,0.956,69,0.695,70,1.45,74,2.93,80,1.187,123,1.62,141,2.145,158,0.906,180,1.926,182,1.854,183,2.506,184,1.964,186,2.121,190,2.121,192,1.371,193,2.758,202,1.48,203,3.072,205,2.758,206,2.93,207,1.926,208,2.145,220,1.371,224,1.926,225,2.478,227,2.758,232,2.145,337,1.987,358,2.145,416,3.712,518,2.758,519,2.145,520,2.438,526,2.438,527,2.438,528,2.883,529,2.438,530,2.883,531,2.883,532,2.883,533,2.883,534,2.438,535,2.883,536,2.883,537,4.13,538,2.883,539,2.438,540,2.883,541,2.883,542,2.883,543,2.883,544,2.883,545,4.13,546,2.883]],["title/injectables/TopicsService.html",[43,0.658,337,1.389]],["body/injectables/TopicsService.html",[12,0.026,20,0.14,21,0.119,22,0.119,25,0.442,27,0.415,32,0.943,37,0.14,38,0.077,39,1.17,40,0.008,41,0.013,42,0.008,43,0.68,45,0.88,47,0.252,48,0.896,50,0.766,52,1.304,53,1.247,54,1.692,61,2.282,67,1.395,68,0.968,69,0.732,70,1.395,80,1.434,119,1.939,120,2.539,123,1.416,135,1.54,158,1.325,165,1.703,169,0.769,182,1.81,183,2.005,184,1.657,186,1.788,190,1.968,192,1.089,198,1.936,202,1.175,206,2.115,210,2.285,211,1.39,245,2.861,252,2.816,255,1.529,269,0.88,337,1.434,351,1.703,358,1.703,416,3.242,480,1.936,519,1.703,527,1.936,529,1.936,534,1.936,547,1.936,548,2.289,549,2.289,550,3.483,551,2.289,552,2.289,553,2.289,554,2.289,555,2.289,556,2.289,557,2.289,558,2.289,559,2.289,560,2.289,561,2.289,562,2.289,563,2.289,564,2.289,565,3.483,566,2.289,567,3.483,568,2.289,569,2.289,570,2.289,571,2.289,572,3.483,573,3.483,574,2.289,575,2.289,576,2.289,577,2.289,578,2.289,579,2.289,580,2.289,581,2.289,582,2.289,583,2.289,584,2.289,585,2.289,586,2.289,587,2.289,588,2.289,589,2.289,590,2.289,591,2.289,592,2.289,593,2.289,594,2.289,595,2.289,596,2.289,597,2.289,598,2.289,599,2.289]],["title/classes/User.html",[38,0.114,112,1.06]],["body/classes/User.html",[12,0.026,20,0.168,21,0.143,22,0.143,25,0.374,37,0.168,38,0.093,40,0.01,41,0.015,42,0.01,47,0.302,50,0.927,53,1.437,64,2.855,68,0.852,69,0.852,112,1.253,123,1.34,124,2.615,133,0.923,135,1.763,137,2.664,140,2.412,141,3.494,142,3.137,143,3.813,145,3.137,146,3.137,149,2.422,150,2.664,152,3.934,154,2.048,158,1.476,159,2.967,160,2.664,162,2.664,167,1.835,168,2.044,169,0.923,170,1.307,175,2.323,225,1.411,283,1.897,292,2.664,308,2.967,309,2.323,316,2.967,327,1.835,430,3.971,431,3.494,433,3.373,434,3.971,512,2.323,514,2.323,600,2.323,601,4.697,602,2.748,603,2.748,604,2.748,605,2.748,606,2.748,607,2.748,608,2.748,609,2.748,610,2.748,611,2.748,612,2.748,613,2.748,614,2.748,615,2.748,616,2.748,617,2.748,618,2.748,619,2.748,620,2.748,621,2.748]],["title/controllers/UserController.html",[57,1.296,622,2.253]],["body/controllers/UserController.html",[12,0.026,20,0.175,21,0.149,22,0.149,25,0.461,27,0.519,37,0.175,38,0.097,39,0.961,40,0.011,41,0.015,42,0.011,47,0.314,48,1.057,50,0.798,52,1.431,53,1.3,54,1.997,57,1.099,59,1.099,64,2.458,67,1.445,68,0.952,69,0.693,70,1.445,71,2.419,72,2.419,74,2.918,79,2.419,80,1.178,107,2.124,112,0.899,123,1.613,180,1.911,182,1.846,183,2.498,184,1.954,185,2.287,186,2.109,190,2.086,192,1.361,193,2.743,195,1.593,202,1.469,203,3.055,205,2.743,206,1.737,207,1.911,208,2.128,215,1.911,216,1.737,220,1.361,224,1.911,225,2.467,227,2.743,230,2.128,232,2.128,427,3.772,446,1.911,539,2.419,622,2.743,623,2.419,624,2.861,625,2.419,626,2.861,627,2.861,628,2.861,629,2.861,630,2.861,631,2.861,632,2.861,633,2.419,634,2.419,635,2.128,636,2.861,637,2.861,638,2.861,639,2.861,640,2.861,641,2.861,642,2.861,643,2.861,644,2.861,645,2.861]],["title/modules/UserModule.html",[0,1.133,16,1.878]],["body/modules/UserModule.html",[0,1.769,2,1.5,3,1.397,4,1.742,5,1.742,6,1.5,7,2.705,8,2.377,12,0.026,16,3.67,17,2.377,18,1.742,19,1.742,20,0.207,21,0.177,22,0.177,25,0.52,27,0.616,31,2.061,32,1.397,37,0.207,38,0.115,40,0.013,41,0.017,42,0.013,59,1.304,107,2.914,112,1.454,132,1.779,158,1.454,170,1.614,210,2.517,211,2.061,214,1.889,337,2.517,347,2.266,388,2.869,389,3.914,390,2.869,622,3.092,633,2.869,635,2.524,646,2.869,647,3.393,648,2.869,649,3.393,650,3.393,651,3.393,652,3.393,653,3.393,654,3.393,655,3.393,656,3.393,657,3.393,658,3.393]],["title/injectables/UserService.html",[43,0.658,107,1.491]],["body/injectables/UserService.html",[12,0.026,20,0.129,21,0.11,22,0.11,25,0.429,27,0.382,32,0.868,37,0.129,38,0.071,39,1.097,40,0.008,41,0.012,42,0.008,43,0.638,45,0.81,47,0.232,48,0.841,50,0.799,52,1.387,53,1.391,54,1.855,61,2.34,67,1.483,68,0.977,69,0.711,70,1.483,80,1.346,107,1.444,112,1.417,119,2.511,120,2.145,122,1.782,123,1.734,124,1.819,127,1.782,158,1.534,169,0.708,170,1.002,182,1.538,183,1.904,184,1.554,185,1.819,186,1.678,190,2.056,192,1.554,195,1.819,202,1.678,245,2.739,252,3.013,255,1.407,269,1.256,336,3.385,337,1.857,347,1.407,351,1.567,369,1.567,374,1.782,378,1.782,427,3.382,625,2.763,634,1.782,635,1.567,659,1.782,660,3.268,661,3.268,662,2.107,663,2.107,664,3.268,665,2.107,666,2.107,667,3.268,668,2.107,669,2.107,670,2.107,671,2.107,672,2.107,673,2.107,674,2.107,675,4.003,676,2.107,677,2.107,678,2.107,679,2.107,680,2.107,681,2.107,682,2.107,683,2.107,684,2.107,685,2.107,686,2.107,687,2.107,688,2.107,689,2.107,690,2.107,691,2.107,692,2.107,693,1.173,694,2.107,695,2.107,696,2.107,697,2.107,698,2.107,699,2.107,700,2.107,701,2.107,702,2.107,703,2.107,704,2.107]],["title/coverage.html",[705,3.43]],["body/coverage.html",[6,1.233,12,0.026,22,0.146,38,0.217,40,0.01,41,0.015,42,0.01,43,1.223,44,2.075,46,2.358,57,2.116,58,1.863,60,2.358,69,0.368,75,1.432,77,1.863,88,1.694,89,1.694,98,1.863,104,2.358,107,1.233,112,0.876,132,1.072,134,2.358,158,0.876,178,1.863,179,2.358,182,1.072,188,1.694,210,1.148,243,2.358,269,1.072,283,1.327,284,2.358,292,4.605,314,1.863,315,2.358,318,1.694,323,1.553,334,2.358,337,1.148,396,2.358,397,2.358,404,2.358,405,2.358,416,1.694,417,2.358,418,2.358,427,1.694,428,2.358,429,2.358,446,1.863,447,2.358,448,3,452,2.358,472,2.358,474,2.358,488,2.358,518,1.863,526,2.358,547,2.358,600,2.358,622,1.863,623,2.358,659,2.358,693,1.553,705,2.075,706,2.789,707,2.789,708,2.789,709,4.033,710,2.789,711,2.358,712,2.789,713,5.19,714,5.738,715,5.506,716,2.789,717,4.737,718,2.789,719,2.789,720,4.737,721,2.358,722,2.789,723,2.358,724,2.358,725,2.075,726,2.358,727,2.358,728,2.075,729,2.358,730,2.358,731,2.075,732,2.358,733,2.358,734,2.075,735,2.789,736,2.789,737,2.789]],["title/classes/createCategory1605697433254.html",[38,0.114,725,2.51]],["body/classes/createCategory1605697433254.html",[12,0.026,20,0.208,21,0.178,22,0.178,25,0.271,37,0.208,38,0.115,40,0.013,41,0.017,42,0.013,47,0.374,48,1.194,50,0.666,52,1.194,61,2.197,67,1.276,68,0.957,69,0.696,70,1.276,120,1.619,133,1.143,140,1.748,155,1.895,169,1.143,190,1.903,269,1.308,398,2.91,467,2.532,693,2.582,723,4.461,724,2.878,725,3.45,738,3.098,739,3.524,740,3.098,741,3.098,742,3.098,743,4.315,744,3.404,745,3.098,746,3.404,747,3.404,748,2.273,749,2.273,750,2.273,751,2.273,752,2.273,753,2.273,754,3.524,755,2.532,756,3.524,757,3.404,758,2.878,759,2.273,760,2.878,761,2.878,762,2.878,763,3.404]],["title/classes/createComment1605894914570.html",[38,0.114,734,2.51]],["body/classes/createComment1605894914570.html",[12,0.026,20,0.203,21,0.173,22,0.173,25,0.265,37,0.203,38,0.112,40,0.012,41,0.017,42,0.012,47,0.365,48,1.174,50,0.655,52,1.174,61,2.181,67,1.255,68,0.828,69,0.687,70,1.255,133,1.116,155,2.54,169,1.116,190,1.883,269,1.277,398,2.889,693,2.54,732,4.406,733,2.809,734,3.394,738,3.047,739,3.48,740,3.047,741,3.047,742,3.047,743,4.293,745,3.047,748,2.219,749,2.219,750,2.219,751,2.219,752,2.219,753,2.219,754,3.926,756,3.48,759,3.047,764,3.322,765,3.322,766,3.322,767,3.322,768,3.322,769,3.322,770,2.809,771,3.322,772,3.322,773,3.322,774,3.322,775,3.322,776,3.322,777,3.322,778,3.322]],["title/classes/createTopics1605702754591.html",[38,0.114,728,2.51]],["body/classes/createTopics1605702754591.html",[12,0.026,20,0.208,21,0.178,22,0.178,25,0.271,37,0.208,38,0.115,40,0.013,41,0.017,42,0.013,47,0.374,48,1.194,50,0.666,52,1.194,61,2.197,67,1.276,68,0.957,69,0.696,70,1.276,120,1.619,133,1.143,140,1.748,155,1.895,169,1.143,190,1.903,269,1.308,398,2.91,467,2.532,693,2.582,726,4.461,727,2.878,728,3.45,738,3.098,739,3.524,740,3.098,741,3.098,742,3.098,743,4.315,745,3.098,748,2.273,749,2.273,750,2.273,751,2.273,752,2.273,753,2.273,754,3.524,755,2.532,756,3.524,758,2.878,759,2.273,760,2.878,761,2.878,762,2.878,779,3.404,780,3.404,781,3.404,782,3.404,783,3.404]],["title/classes/createUser1605879828481.html",[38,0.114,731,2.51]],["body/classes/createUser1605879828481.html",[12,0.026,20,0.198,21,0.169,22,0.169,25,0.259,37,0.198,38,0.11,40,0.012,41,0.017,42,0.012,47,0.357,48,1.155,50,0.644,52,1.155,61,2.165,67,1.235,68,0.814,69,0.592,70,1.235,133,1.09,155,1.807,169,1.09,182,1.977,190,1.865,269,1.247,398,2.868,693,2.499,729,4.351,730,2.744,731,3.339,738,2.998,739,3.437,740,2.998,741,2.998,742,2.998,743,4.271,745,2.998,748,2.167,749,2.167,750,2.167,751,2.167,752,2.167,753,2.167,754,4.207,755,2.414,756,3.893,759,2.167,770,2.744,784,3.245,785,3.245,786,3.245,787,3.245,788,3.245,789,3.245,790,3.245,791,3.245,792,3.245,793,3.245,794,3.245,795,3.245]],["title/dependencies.html",[3,1.672,796,2.815]],["body/dependencies.html",[3,1.62,12,0.026,27,0.714,30,3.326,32,1.62,40,0.015,41,0.019,42,0.015,78,2.926,95,2.926,97,2.19,169,1.321,216,2.389,218,2.926,459,4.219,460,3.326,797,5.671,798,3.934,799,3.934,800,3.934,801,3.934,802,3.934,803,5.107,804,3.934,805,3.934,806,3.934,807,3.934,808,3.934,809,3.934,810,3.934,811,3.934,812,3.934,813,3.934,814,5.107,815,3.934,816,3.934,817,3.934,818,3.934,819,3.934,820,3.934,821,3.934,822,3.934,823,3.934,824,3.934,825,3.934,826,3.934,827,3.934,828,3.934,829,3.934,830,3.934,831,3.326,832,3.934,833,3.934]],["title/miscellaneous/functions.html",[834,1.88,835,3.433]],["body/miscellaneous/functions.html",[6,2.846,12,0.023,40,0.019,41,0.023,42,0.019,47,0.575,721,4.422,834,3.493,835,4.422,836,5.23]],["title/index.html",[47,0.309,837,2.815,838,2.815]],["body/index.html",[12,0.025,21,0.194,40,0.014,41,0.018,42,0.014,136,2.76,138,2.478,245,2.253,705,2.76,831,3.138,839,3.711,840,3.711,841,4.915,842,3.711,843,3.711,844,3.711,845,3.711,846,3.711,847,3.711,848,3.711,849,3.711,850,3.711,851,5.512,852,3.711,853,3.711,854,6.399,855,3.711,856,3.711,857,3.711,858,6.273,859,3.711,860,3.711,861,4.915,862,3.711,863,3.711,864,3.711,865,3.711,866,4.915,867,4.915,868,3.711,869,3.711,870,3.711,871,4.915,872,4.915,873,3.711,874,3.711,875,3.711,876,3.711,877,3.711,878,3.138,879,3.711,880,3.711,881,3.711,882,3.711,883,3.711,884,3.711,885,3.711,886,3.711,887,3.711,888,3.711,889,3.711,890,3.711,891,3.711,892,3.711,893,3.711,894,3.711,895,3.711]],["title/modules.html",[2,2.038]],["body/modules.html",[1,3.086,2,2.043,11,2.806,12,0.021,13,2.903,14,2.806,15,2.573,16,2.573,40,0.017,41,0.021,42,0.017,878,5.687,896,6.725,897,6.725,898,6.725]],["title/overview.html",[899,3.898]],["body/overview.html",[0,1.065,1,4.387,2,1.402,3,1.306,4,1.628,5,1.628,6,1.402,7,1.628,8,1.628,9,2.681,10,2.681,11,3.954,12,0.026,13,3.267,14,3.954,15,3.487,16,3.625,17,2.268,18,1.628,19,1.628,40,0.012,41,0.016,42,0.012,45,1.218,59,1.218,75,2.61,85,2.681,87,2.681,88,3.087,89,3.087,107,2.769,133,1.065,210,2.529,234,2.681,236,2.681,323,2.83,337,2.38,383,2.681,384,2.681,646,2.681,648,2.681,899,2.681,900,3.171,901,3.171,902,3.171,903,3.171]],["title/miscellaneous/variables.html",[834,1.88,904,3.433]],["body/miscellaneous/variables.html",[12,0.025,40,0.019,41,0.022,42,0.019,47,0.552,69,0.662,98,3.967,101,4.242,174,4.242,711,4.242,834,3.351,904,4.242,905,5.017,906,5.017,907,5.017,908,5.017]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":292,"title":{},"body":{"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{},"coverage.html":{}}}],["0.1.1",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["0.1.10",{"_index":819,"title":{},"body":{"dependencies.html":{}}}],["0.2.29",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":265,"title":{},"body":{"injectables/CategoryService.html":{}}}],["1.0.0",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":902,"title":{},"body":{"overview.html":{}}}],["12",{"_index":903,"title":{},"body":{"overview.html":{}}}],["2.14.1",{"_index":811,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":821,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["4.0.5",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["4.1.5",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":809,"title":{},"body":{"dependencies.html":{}}}],["4.7.5",{"_index":806,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":197,"title":{},"body":{"controllers/CategoryController.html":{}}}],["5",{"_index":901,"title":{},"body":{"overview.html":{}}}],["6.2.5",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":900,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["7.1.3",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":816,"title":{},"body":{"dependencies.html":{}}}],["abstracting",{"_index":355,"title":{},"body":{"injectables/CommentService.html":{}}}],["access_token",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["affected",{"_index":263,"title":{},"body":{"injectables/CategoryService.html":{}}}],["amazing",{"_index":879,"title":{},"body":{"index.html":{}}}],["angular",{"_index":850,"title":{},"body":{"index.html":{}}}],["apibadgatewayresponse",{"_index":256,"title":{},"body":{"injectables/CategoryService.html":{}}}],["apiresponse",{"_index":217,"title":{},"body":{"controllers/CategoryController.html":{}}}],["app",{"_index":856,"title":{},"body":{"index.html":{}}}],["applications",{"_index":847,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":44,"title":{"injectables/AppService.html":{}},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["associating",{"_index":373,"title":{},"body":{"injectables/CommentService.html":{}}}],["assures",{"_index":540,"title":{},"body":{"controllers/TopicsController.html":{}}}],["async",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["auth.controller",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":448,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":636,"title":{},"body":{"controllers/UserController.html":{}}}],["authcontroller",{"_index":58,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":449,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":451,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":473,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":136,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDTO.html":{},"index.html":{}}}],["author:string",{"_index":173,"title":{},"body":{"classes/Category.html":{}}}],["authservice",{"_index":75,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["avatar",{"_index":430,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/User.html":{}}}],["await",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/LocalStrategy.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createTopics1605702754591.html":{}}}],["backers",{"_index":880,"title":{},"body":{"index.html":{}}}],["body",{"_index":205,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":154,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateUserDTO.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":898,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":896,"title":{},"body":{"modules.html":{}}}],["building",{"_index":842,"title":{},"body":{"index.html":{}}}],["cat",{"_index":278,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categories",{"_index":181,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category",{"_index":132,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"modules/CommentsModule.html":{},"classes/CreateTopicDTO.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["category.author",{"_index":272,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.description",{"_index":274,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.dto",{"_index":213,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["category.dto.ts",{"_index":397,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"coverage.html":{}}}],["category.dto.ts:2",{"_index":403,"title":{},"body":{"classes/CreateCategoryDTO.html":{}}}],["category.dto.ts:3",{"_index":399,"title":{},"body":{"classes/CreateCategoryDTO.html":{}}}],["category.dto.ts:4",{"_index":400,"title":{},"body":{"classes/CreateCategoryDTO.html":{}}}],["category.dto.ts:5",{"_index":401,"title":{},"body":{"classes/CreateCategoryDTO.html":{}}}],["category.dto.ts:6",{"_index":402,"title":{},"body":{"classes/CreateCategoryDTO.html":{}}}],["category.entity",{"_index":239,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{}}}],["category.imagestorage",{"_index":276,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.name",{"_index":270,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.service",{"_index":240,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category/category.controller",{"_index":238,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category/category.entity",{"_index":214,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CommentsModule.html":{},"classes/CreateTopicDTO.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["category/category.module",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["category/category.service",{"_index":211,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"injectables/TopicsService.html":{},"modules/UserModule.html":{}}}],["category/create",{"_index":212,"title":{},"body":{"controllers/CategoryController.html":{}}}],["category/module/category.module",{"_index":387,"title":{},"body":{"modules/CommentsModule.html":{},"modules/TopicModule.html":{}}}],["category:category",{"_index":511,"title":{},"body":{"classes/Topic.html":{}}}],["category=>category.topics",{"_index":510,"title":{},"body":{"classes/Topic.html":{}}}],["category_id",{"_index":419,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["categorycontroller",{"_index":178,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categorymodule",{"_index":13,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryrepository",{"_index":247,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categoryservice",{"_index":210,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"injectables/TopicsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["causa",{"_index":654,"title":{},"body":{"modules/UserModule.html":{}}}],["class",{"_index":38,"title":{"classes/Category.html":{},"classes/Comment.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/Topic.html":{},"classes/User.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["classes",{"_index":133,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/Topic.html":{},"classes/User.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":234,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":235,"title":{},"body":{"modules/CategoryModule.html":{}}}],["cluster_categorymodule_providers",{"_index":236,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_commentsmodule",{"_index":383,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_providers",{"_index":384,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_topicmodule",{"_index":515,"title":{},"body":{"modules/TopicModule.html":{}}}],["cluster_topicmodule_providers",{"_index":516,"title":{},"body":{"modules/TopicModule.html":{}}}],["cluster_usermodule",{"_index":646,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":648,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":647,"title":{},"body":{"modules/UserModule.html":{}}}],["code",{"_index":569,"title":{},"body":{"injectables/TopicsService.html":{}}}],["column",{"_index":143,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["column({default",{"_index":152,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["column({default:'usuario",{"_index":618,"title":{},"body":{"classes/User.html":{}}}],["column({default:0",{"_index":308,"title":{},"body":{"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["column({default:true",{"_index":504,"title":{},"body":{"classes/Topic.html":{}}}],["columns",{"_index":748,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["com",{"_index":378,"title":{},"body":{"injectables/CommentService.html":{},"injectables/UserService.html":{}}}],["comment",{"_index":283,"title":{"classes/Comment.html":{}},"body":{"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/Topic.html":{},"classes/User.html":{},"coverage.html":{}}}],["comment.disable",{"_index":363,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.dto",{"_index":326,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["comment.dto.ts",{"_index":405,"title":{},"body":{"classes/CreateCommentDTO.html":{},"coverage.html":{}}}],["comment.dto.ts:10",{"_index":411,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:11",{"_index":414,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:12",{"_index":415,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:5",{"_index":413,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:6",{"_index":412,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:7",{"_index":408,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:8",{"_index":409,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:9",{"_index":410,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.hasparentcomment",{"_index":365,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.idparentcomment",{"_index":367,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.reaction",{"_index":361,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.text",{"_index":359,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.topic",{"_index":377,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.user",{"_index":376,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment=>comment.user",{"_index":620,"title":{},"body":{"classes/User.html":{}}}],["commentcontroller",{"_index":314,"title":{"controllers/CommentController.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["comments",{"_index":316,"title":{},"body":{"controllers/CommentController.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["comments.entity",{"_index":346,"title":{},"body":{"injectables/CommentService.html":{}}}],["comments/comments.controller",{"_index":386,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments/comments.entity",{"_index":327,"title":{},"body":{"controllers/CommentController.html":{},"modules/CommentsModule.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["comments/comments.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["comments/comments.service",{"_index":324,"title":{},"body":{"controllers/CommentController.html":{},"modules/CommentsModule.html":{}}}],["comments/create",{"_index":325,"title":{},"body":{"controllers/CommentController.html":{}}}],["comments:comment",{"_index":514,"title":{},"body":{"classes/Topic.html":{},"classes/User.html":{}}}],["comments=>comments.topic",{"_index":513,"title":{},"body":{"classes/Topic.html":{}}}],["commentservice",{"_index":323,"title":{"injectables/CommentService.html":{}},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"coverage.html":{},"overview.html":{}}}],["commentsmodule",{"_index":14,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":339,"title":{},"body":{"injectables/CommentService.html":{}}}],["configmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log('123",{"_index":543,"title":{},"body":{"controllers/TopicsController.html":{}}}],["console.log('user",{"_index":700,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`deleted",{"_index":268,"title":{},"body":{"injectables/CategoryService.html":{}}}],["const",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/LocalStrategy.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["constants",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":475,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(categoryrepository",{"_index":244,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(commentsrepository",{"_index":335,"title":{},"body":{"injectables/CommentService.html":{}}}],["constructor(private",{"_index":482,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(topicrepository",{"_index":548,"title":{},"body":{"injectables/TopicsService.html":{}}}],["constructor(userrepository",{"_index":662,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":57,"title":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('categories",{"_index":219,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('comments",{"_index":328,"title":{},"body":{"controllers/CommentController.html":{}}}],["controller('topics",{"_index":535,"title":{},"body":{"controllers/TopicsController.html":{}}}],["controller('users",{"_index":637,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/CommentController.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["controllers:[categorycontroller",{"_index":242,"title":{},"body":{"modules/CategoryModule.html":{}}}],["controllers:[commentcontroller",{"_index":395,"title":{},"body":{"modules/CommentsModule.html":{}}}],["controllers:[topicscontroller",{"_index":524,"title":{},"body":{"modules/TopicModule.html":{}}}],["controllers:[usercontroller",{"_index":657,"title":{},"body":{"modules/UserModule.html":{}}}],["coverage",{"_index":705,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":182,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateUserDTO.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createUser1605879828481.html":{}}}],["create(@body",{"_index":539,"title":{},"body":{"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["create(createcategorydto",{"_index":187,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createcommentdto",{"_index":317,"title":{},"body":{"controllers/CommentController.html":{}}}],["create(createtopicdto",{"_index":527,"title":{},"body":{"controllers/TopicsController.html":{},"injectables/TopicsService.html":{}}}],["create(createuserdto",{"_index":625,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(data",{"_index":340,"title":{},"body":{"injectables/CommentService.html":{}}}],["create_category.ts",{"_index":724,"title":{},"body":{"coverage.html":{},"classes/createCategory1605697433254.html":{}}}],["create_category.ts:43",{"_index":744,"title":{},"body":{"classes/createCategory1605697433254.html":{}}}],["create_category.ts:6",{"_index":746,"title":{},"body":{"classes/createCategory1605697433254.html":{}}}],["create_comment.ts",{"_index":733,"title":{},"body":{"coverage.html":{},"classes/createComment1605894914570.html":{}}}],["create_comment.ts:5",{"_index":765,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["create_comment.ts:53",{"_index":764,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["create_topics.ts",{"_index":727,"title":{},"body":{"coverage.html":{},"classes/createTopics1605702754591.html":{}}}],["create_topics.ts:43",{"_index":779,"title":{},"body":{"classes/createTopics1605702754591.html":{}}}],["create_topics.ts:5",{"_index":780,"title":{},"body":{"classes/createTopics1605702754591.html":{}}}],["createcategory1605697433254",{"_index":725,"title":{"classes/createCategory1605697433254.html":{}},"body":{"coverage.html":{},"classes/createCategory1605697433254.html":{}}}],["createcategorydto",{"_index":188,"title":{"classes/CreateCategoryDTO.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDTO.html":{},"coverage.html":{}}}],["createcategorydto.author",{"_index":273,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createcategorydto.description",{"_index":275,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createcategorydto.imagestorage",{"_index":277,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createcategorydto.name",{"_index":271,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createcategorydto:createcategorydto):promise",{"_index":221,"title":{},"body":{"controllers/CategoryController.html":{}}}],["createcomment1605894914570",{"_index":734,"title":{"classes/createComment1605894914570.html":{}},"body":{"coverage.html":{},"classes/createComment1605894914570.html":{}}}],["createcommentdto",{"_index":318,"title":{"classes/CreateCommentDTO.html":{}},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDTO.html":{},"coverage.html":{}}}],["createcommentdto:createcommentdto):promise",{"_index":330,"title":{},"body":{"controllers/CommentController.html":{}}}],["created",{"_index":701,"title":{},"body":{"injectables/UserService.html":{}}}],["created_at",{"_index":137,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["created_at:date",{"_index":309,"title":{},"body":{"classes/Comment.html":{},"classes/User.html":{}}}],["createdatecolumn",{"_index":146,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["createdatecolumn,updatedatecolumn",{"_index":164,"title":{},"body":{"classes/Category.html":{}}}],["creates",{"_index":584,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createtopicdto",{"_index":416,"title":{"classes/CreateTopicDTO.html":{}},"body":{"classes/CreateTopicDTO.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"coverage.html":{}}}],["createtopicdto.category_id",{"_index":568,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createtopicdto.imagestorage",{"_index":564,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createtopicdto.name",{"_index":560,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createtopicdto.textbody",{"_index":562,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createtopicdto.user_id",{"_index":566,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createtopicdto:createtopicdto",{"_index":537,"title":{},"body":{"controllers/TopicsController.html":{}}}],["createtopics1605702754591",{"_index":728,"title":{"classes/createTopics1605702754591.html":{}},"body":{"coverage.html":{},"classes/createTopics1605702754591.html":{}}}],["createuser1605879828481",{"_index":731,"title":{"classes/createUser1605879828481.html":{}},"body":{"coverage.html":{},"classes/createUser1605879828481.html":{}}}],["createuserdto",{"_index":427,"title":{"classes/CreateUserDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.avatar",{"_index":686,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.email",{"_index":687,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.isactive",{"_index":690,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.name",{"_index":680,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":688,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.quarentinenum",{"_index":692,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.role",{"_index":684,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.topic_id",{"_index":697,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.userdescription",{"_index":682,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto:createuserdto",{"_index":644,"title":{},"body":{"controllers/UserController.html":{}}}],["createuserdto:createuserdto):promise",{"_index":640,"title":{},"body":{"controllers/UserController.html":{}}}],["data",{"_index":252,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["data.disable",{"_index":364,"title":{},"body":{"injectables/CommentService.html":{}}}],["data.hasparentecomment",{"_index":366,"title":{},"body":{"injectables/CommentService.html":{}}}],["data.idparentcomment",{"_index":368,"title":{},"body":{"injectables/CommentService.html":{}}}],["data.reaction",{"_index":362,"title":{},"body":{"injectables/CommentService.html":{}}}],["data.text",{"_index":360,"title":{},"body":{"injectables/CommentService.html":{}}}],["data.topic_id",{"_index":370,"title":{},"body":{"injectables/CommentService.html":{}}}],["data.user_id",{"_index":372,"title":{},"body":{"injectables/CommentService.html":{}}}],["date",{"_index":145,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["db",{"_index":358,"title":{},"body":{"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":174,"title":{},"body":{"classes/Category.html":{},"miscellaneous/variables.html":{}}}],["default:'uuid_generate_v4",{"_index":753,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["default:1",{"_index":762,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createTopics1605702754591.html":{}}}],["defined",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["delete",{"_index":206,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":227,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@apiresponse({status",{"_index":196,"title":{},"body":{"controllers/CategoryController.html":{}}}],["delete(@param('id",{"_index":546,"title":{},"body":{"controllers/TopicsController.html":{}}}],["delete(id",{"_index":529,"title":{},"body":{"controllers/TopicsController.html":{},"injectables/TopicsService.html":{}}}],["delete(id:string",{"_index":598,"title":{},"body":{"injectables/TopicsService.html":{}}}],["deleted",{"_index":266,"title":{},"body":{"injectables/CategoryService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":138,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/CreateCategoryDTO.html":{},"index.html":{}}}],["description:\"error",{"_index":229,"title":{},"body":{"controllers/CategoryController.html":{}}}],["details",{"_index":571,"title":{},"body":{"injectables/TopicsService.html":{}}}],["dev",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["development",{"_index":857,"title":{},"body":{"index.html":{}}}],["disable",{"_index":285,"title":{},"body":{"classes/Comment.html":{},"classes/CreateCommentDTO.html":{}}}],["documentation",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":694,"title":{},"body":{"injectables/UserService.html":{}}}],["down",{"_index":740,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["down(queryrunner",{"_index":742,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["e2e",{"_index":868,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":843,"title":{},"body":{"index.html":{}}}],["ele",{"_index":655,"title":{},"body":{"modules/UserModule.html":{}}}],["email",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["email\":\"marcos_v.23@hotmail.com",{"_index":444,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["entity",{"_index":165,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"injectables/TopicsService.html":{}}}],["entity('categories",{"_index":171,"title":{},"body":{"classes/Category.html":{}}}],["entity('topics",{"_index":503,"title":{},"body":{"classes/Topic.html":{}}}],["entity('users",{"_index":617,"title":{},"body":{"classes/User.html":{}}}],["entity,column",{"_index":304,"title":{},"body":{"classes/Comment.html":{},"classes/Topic.html":{}}}],["entity,column,updatedatecolumn",{"_index":616,"title":{},"body":{"classes/User.html":{}}}],["error",{"_index":198,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/TopicsService.html":{}}}],["exists",{"_index":200,"title":{},"body":{"controllers/CategoryController.html":{}}}],["export",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["exports:[typeormmodule.forfeature([topic",{"_index":525,"title":{},"body":{"modules/TopicModule.html":{}}}],["exports:[userservice",{"_index":658,"title":{},"body":{"modules/UserModule.html":{}}}],["express",{"_index":803,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":450,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["extractjwt",{"_index":457,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":465,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":467,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/createCategory1605697433254.html":{},"classes/createTopics1605702754591.html":{}}}],["falta",{"_index":388,"title":{},"body":{"modules/CommentsModule.html":{},"modules/UserModule.html":{}}}],["file",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["findall",{"_index":183,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall():promise",{"_index":351,"title":{},"body":{"injectables/CommentService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["findbyemail",{"_index":660,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":667,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":661,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(id",{"_index":669,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(id:string",{"_index":676,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":184,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":224,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":192,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(id:string",{"_index":592,"title":{},"body":{"injectables/TopicsService.html":{}}}],["following",{"_index":573,"title":{},"body":{"injectables/TopicsService.html":{}}}],["framework",{"_index":841,"title":{},"body":{"index.html":{}}}],["function",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":835,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generationstrategy",{"_index":777,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["generationstrategy:'uuid",{"_index":752,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["get(':id",{"_index":193,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["gethello",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":837,"title":{"index.html":{}},"body":{}}],["global",{"_index":808,"title":{},"body":{"dependencies.html":{}}}],["grow",{"_index":875,"title":{},"body":{"index.html":{}}}],["hasparentcomment",{"_index":286,"title":{},"body":{"classes/Comment.html":{}}}],["hasparentecomment",{"_index":406,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["heavily",{"_index":848,"title":{},"body":{"index.html":{}}}],["hello",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":886,"title":{},"body":{"index.html":{}}}],["https://github.com/grpc/grpc",{"_index":579,"title":{},"body":{"injectables/TopicsService.html":{}}}],["https://nestjs.com",{"_index":892,"title":{},"body":{"index.html":{}}}],["https://stackoverflow.com/questions/55790897/type",{"_index":578,"title":{},"body":{"injectables/TopicsService.html":{}}}],["httpstatus",{"_index":632,"title":{},"body":{"controllers/UserController.html":{}}}],["id",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id:id",{"_index":594,"title":{},"body":{"injectables/TopicsService.html":{}}}],["id:number",{"_index":172,"title":{},"body":{"classes/Category.html":{}}}],["id:string",{"_index":225,"title":{},"body":{"controllers/CategoryController.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["identifier",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["idparentcomment",{"_index":287,"title":{},"body":{"classes/Comment.html":{},"classes/CreateCommentDTO.html":{}}}],["if(!user",{"_index":486,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["if(resp.affected!==0",{"_index":267,"title":{},"body":{"injectables/CategoryService.html":{}}}],["ignoreexpiration",{"_index":466,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["imagestorage",{"_index":139,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/Topic.html":{}}}],["imagestorage:string",{"_index":426,"title":{},"body":{"classes/CreateTopicDTO.html":{},"classes/Topic.html":{}}}],["implements",{"_index":738,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["import",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["imports",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{}}}],["imports:[typeormmodule.forfeature([category]),topicmodule",{"_index":241,"title":{},"body":{"modules/CategoryModule.html":{}}}],["imports:[typeormmodule.forfeature([topic",{"_index":522,"title":{},"body":{"modules/TopicModule.html":{}}}],["imports:[typeormmodule.forfeature([user",{"_index":651,"title":{},"body":{"modules/UserModule.html":{}}}],["incorrect",{"_index":199,"title":{},"body":{"controllers/CategoryController.html":{}}}],["increment",{"_index":778,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["index",{"_index":47,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexorder",{"_index":407,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["info",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["inject",{"_index":254,"title":{},"body":{"injectables/CategoryService.html":{}}}],["inject('categories_repository",{"_index":257,"title":{},"body":{"injectables/CategoryService.html":{}}}],["injectable",{"_index":43,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":45,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":255,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(category",{"_index":258,"title":{},"body":{"injectables/CategoryService.html":{}}}],["injectrepository(comment",{"_index":348,"title":{},"body":{"injectables/CommentService.html":{}}}],["injectrepository(topic",{"_index":558,"title":{},"body":{"injectables/TopicsService.html":{}}}],["injectrepository(user",{"_index":674,"title":{},"body":{"injectables/UserService.html":{}}}],["inspired",{"_index":849,"title":{},"body":{"index.html":{}}}],["installation",{"_index":853,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":855,"title":{},"body":{"index.html":{}}}],["instance",{"_index":585,"title":{},"body":{"injectables/TopicsService.html":{}}}],["instantiating",{"_index":354,"title":{},"body":{"injectables/CommentService.html":{}}}],["int",{"_index":775,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["integrity",{"_index":541,"title":{},"body":{"controllers/TopicsController.html":{}}}],["isactive",{"_index":140,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateUserDTO.html":{},"classes/Topic.html":{},"classes/User.html":{},"classes/createCategory1605697433254.html":{},"classes/createTopics1605702754591.html":{}}}],["isactive:boolean",{"_index":505,"title":{},"body":{"classes/Topic.html":{}}}],["isgenerated",{"_index":776,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["isnullable",{"_index":761,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createTopics1605702754591.html":{}}}],["isnullable:false",{"_index":754,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["isnullable:true",{"_index":759,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["isprimary",{"_index":751,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["join",{"_index":882,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":460,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":446,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":464,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice:jwtservice",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":88,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":889,"title":{},"body":{"index.html":{}}}],["keytest",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["knowledge",{"_index":696,"title":{},"body":{"injectables/UserService.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":895,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":872,"title":{},"body":{"index.html":{}}}],["local",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.stategy",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":77,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":89,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["manytomany",{"_index":305,"title":{},"body":{"classes/Comment.html":{}}}],["manytoone",{"_index":166,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{}}}],["manytoone(()=>category",{"_index":509,"title":{},"body":{"classes/Topic.html":{}}}],["manytoone(()=>topic",{"_index":312,"title":{},"body":{"classes/Comment.html":{}}}],["manytoone(()=>user",{"_index":507,"title":{},"body":{"classes/Topic.html":{}}}],["manytoone(()=>user,user=>user.comments",{"_index":310,"title":{},"body":{"classes/Comment.html":{}}}],["manytoone(undefined",{"_index":298,"title":{},"body":{"classes/Comment.html":{},"classes/Topic.html":{}}}],["matching",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":575,"title":{},"body":{"injectables/TopicsService.html":{}}}],["metadata",{"_index":818,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["migrationinterface",{"_index":739,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["miscellaneous",{"_index":834,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":572,"title":{},"body":{"injectables/TopicsService.html":{}}}],["mit",{"_index":871,"title":{},"body":{"index.html":{}}}],["mode",{"_index":861,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":885,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":810,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":890,"title":{},"body":{"index.html":{}}}],["name",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["name\":\"string",{"_index":443,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["name:\"author",{"_index":757,"title":{},"body":{"classes/createCategory1605697433254.html":{}}}],["name:\"avatr",{"_index":789,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["name:\"bodytext",{"_index":767,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["name:\"categories",{"_index":747,"title":{},"body":{"classes/createCategory1605697433254.html":{}}}],["name:\"comments",{"_index":766,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["name:\"disabe",{"_index":769,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["name:\"email",{"_index":791,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["name:\"hasparentcomment",{"_index":771,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["name:\"id",{"_index":749,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["name:\"idparentcomment",{"_index":773,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["name:\"imagestorage",{"_index":758,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createTopics1605702754591.html":{}}}],["name:\"indexorder",{"_index":774,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["name:\"isactive",{"_index":793,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["name:\"name",{"_index":755,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["name:\"password",{"_index":792,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["name:\"quarentinenum",{"_index":794,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["name:\"reaction",{"_index":768,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["name:\"role",{"_index":788,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["name:\"topicbody",{"_index":782,"title":{},"body":{"classes/createTopics1605702754591.html":{}}}],["name:\"topics",{"_index":781,"title":{},"body":{"classes/createTopics1605702754591.html":{}}}],["name:\"user",{"_index":786,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["name:\"userdescription",{"_index":787,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["need",{"_index":695,"title":{},"body":{"injectables/UserService.html":{}}}],["nest",{"_index":851,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":894,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["nestjs/sequelize",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":218,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"injectables/TopicsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":269,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["node",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["node.js",{"_index":840,"title":{},"body":{"index.html":{}}}],["node/issues/858",{"_index":580,"title":{},"body":{"injectables/TopicsService.html":{}}}],["now",{"_index":480,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/TopicsService.html":{}}}],["npm",{"_index":854,"title":{},"body":{"index.html":{}}}],["null",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":149,"title":{},"body":{"classes/Category.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateUserDTO.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["o",{"_index":389,"title":{},"body":{"modules/CommentsModule.html":{},"modules/UserModule.html":{}}}],["object",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onetomany",{"_index":167,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["onetomany(()=>comment",{"_index":512,"title":{},"body":{"classes/Topic.html":{},"classes/User.html":{}}}],["onetomany(()=>topic",{"_index":175,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":159,"title":{},"body":{"classes/Category.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["onetoone",{"_index":502,"title":{},"body":{"classes/Topic.html":{}}}],["open",{"_index":873,"title":{},"body":{"index.html":{}}}],["optional",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["os",{"_index":303,"title":{},"body":{"classes/Comment.html":{}}}],["out",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":899,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":796,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":207,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["passport",{"_index":459,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":461,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":462,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":431,"title":{},"body":{"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{}}}],["password\":\"string",{"_index":445,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["passwordfiels",{"_index":484,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["payload",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":471,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":470,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pede",{"_index":656,"title":{},"body":{"modules/UserModule.html":{}}}],["pg",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":883,"title":{},"body":{"index.html":{}}}],["por",{"_index":653,"title":{},"body":{"modules/UserModule.html":{}}}],["possible",{"_index":576,"title":{},"body":{"injectables/TopicsService.html":{}}}],["post",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["post('auth/login",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":180,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":168,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":150,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["primarygeneratedcolumn,updatedatecolumn",{"_index":501,"title":{},"body":{"classes/Topic.html":{}}}],["private",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["production",{"_index":863,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":839,"title":{},"body":{"index.html":{}}}],["project",{"_index":874,"title":{},"body":{"index.html":{}}}],["promise",{"_index":190,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["properties",{"_index":135,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/Topic.html":{},"injectables/TopicsService.html":{},"classes/User.html":{}}}],["property",{"_index":264,"title":{},"body":{"injectables/CategoryService.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers:[topicsservice",{"_index":523,"title":{},"body":{"modules/TopicModule.html":{}}}],["public",{"_index":398,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["put",{"_index":208,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":203,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["quarantinenum",{"_index":601,"title":{},"body":{"classes/User.html":{}}}],["quarentinenum",{"_index":432,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["queryrunner",{"_index":743,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["queryrunner.droptable('categories",{"_index":763,"title":{},"body":{"classes/createCategory1605697433254.html":{}}}],["queryrunner.droptable('topics",{"_index":783,"title":{},"body":{"classes/createTopics1605702754591.html":{}}}],["querystring",{"_index":557,"title":{},"body":{"injectables/TopicsService.html":{}}}],["reaction",{"_index":288,"title":{},"body":{"classes/Comment.html":{},"classes/CreateCommentDTO.html":{},"classes/Topic.html":{}}}],["reaction:string",{"_index":307,"title":{},"body":{"classes/Comment.html":{}}}],["read",{"_index":884,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":220,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["references",{"_index":542,"title":{},"body":{"controllers/TopicsController.html":{}}}],["reflect",{"_index":817,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":185,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":230,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":195,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["render",{"_index":209,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["repository",{"_index":245,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["request",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["res,response",{"_index":631,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve",{"_index":581,"title":{},"body":{"injectables/TopicsService.html":{}}}],["resp",{"_index":261,"title":{},"body":{"injectables/CategoryService.html":{}}}],["result",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["return{id",{"_index":469,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rimraf",{"_index":820,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":433,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/User.html":{}}}],["role:string",{"_index":619,"title":{},"body":{"classes/User.html":{}}}],["run",{"_index":858,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["saving",{"_index":589,"title":{},"body":{"injectables/TopicsService.html":{}}}],["scalable",{"_index":844,"title":{},"body":{"index.html":{}}}],["secret",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":468,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sequelize",{"_index":481,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["server",{"_index":845,"title":{},"body":{"index.html":{}}}],["service",{"_index":390,"title":{},"body":{"modules/CommentsModule.html":{},"modules/UserModule.html":{}}}],["serviceerror",{"_index":574,"title":{},"body":{"injectables/TopicsService.html":{}}}],["side",{"_index":846,"title":{},"body":{"index.html":{}}}],["signoptions:{expiresin:'320s",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{}}}],["solutions",{"_index":577,"title":{},"body":{"injectables/TopicsService.html":{}}}],["source",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{},"index.html":{}}}],["specified",{"_index":356,"title":{},"body":{"injectables/CommentService.html":{}}}],["sponsors",{"_index":877,"title":{},"body":{"index.html":{}}}],["src/.../constants.ts",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":836,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":51,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:14",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":711,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":447,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":452,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":456,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":454,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local",{"_index":472,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.stategy.ts",{"_index":474,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.stategy.ts:16",{"_index":478,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.stategy.ts:8",{"_index":476,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/category/category.controller.ts",{"_index":179,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/category/category.controller.ts:17",{"_index":189,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:22",{"_index":191,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:28",{"_index":194,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:38",{"_index":201,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:43",{"_index":204,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.entity.ts",{"_index":134,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/category/category.entity.ts:11",{"_index":157,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:14",{"_index":144,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:17",{"_index":148,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:20",{"_index":153,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:23",{"_index":156,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:26",{"_index":147,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:29",{"_index":163,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:32",{"_index":161,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.entity.ts:8",{"_index":151,"title":{},"body":{"classes/Category.html":{}}}],["src/category/category.module.ts",{"_index":237,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/category/category.service.ts",{"_index":243,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/category/category.service.ts:12",{"_index":246,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:20",{"_index":249,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:24",{"_index":250,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:32",{"_index":251,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:42",{"_index":248,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:54",{"_index":253,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/create",{"_index":396,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"coverage.html":{}}}],["src/comments/comments.controller.ts",{"_index":315,"title":{},"body":{"controllers/CommentController.html":{},"coverage.html":{}}}],["src/comments/comments.controller.ts:16",{"_index":320,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comments/comments.controller.ts:23",{"_index":319,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comments/comments.controller.ts:28",{"_index":321,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comments/comments.controller.ts:34",{"_index":322,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/comments/comments.entity.ts",{"_index":284,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{}}}],["src/comments/comments.entity.ts:10",{"_index":294,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.entity.ts:13",{"_index":297,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.entity.ts:16",{"_index":296,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.entity.ts:19",{"_index":291,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.entity.ts:22",{"_index":293,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.entity.ts:25",{"_index":295,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.entity.ts:28",{"_index":290,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.entity.ts:31",{"_index":300,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.entity.ts:34",{"_index":301,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.entity.ts:37",{"_index":299,"title":{},"body":{"classes/Comment.html":{}}}],["src/comments/comments.module.ts",{"_index":385,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/comments/comments.service.ts",{"_index":334,"title":{},"body":{"injectables/CommentService.html":{},"coverage.html":{}}}],["src/comments/comments.service.ts:15",{"_index":338,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/comments.service.ts:24",{"_index":343,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/comments.service.ts:32",{"_index":342,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/comments.service.ts:36",{"_index":344,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/comments.service.ts:40",{"_index":341,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/comments.service.ts:74",{"_index":345,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/comments/create",{"_index":404,"title":{},"body":{"classes/CreateCommentDTO.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":721,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migration/1605697433254",{"_index":723,"title":{},"body":{"coverage.html":{},"classes/createCategory1605697433254.html":{}}}],["src/migration/1605702754591",{"_index":726,"title":{},"body":{"coverage.html":{},"classes/createTopics1605702754591.html":{}}}],["src/migration/1605879828481",{"_index":729,"title":{},"body":{"coverage.html":{},"classes/createUser1605879828481.html":{}}}],["src/migration/1605894914570",{"_index":732,"title":{},"body":{"coverage.html":{},"classes/createComment1605894914570.html":{}}}],["src/topics/create",{"_index":417,"title":{},"body":{"classes/CreateTopicDTO.html":{},"coverage.html":{}}}],["src/topics/topic.entity.ts",{"_index":488,"title":{},"body":{"classes/Topic.html":{},"coverage.html":{}}}],["src/topics/topic.entity.ts:12",{"_index":495,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.entity.ts:15",{"_index":497,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.entity.ts:18",{"_index":493,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.entity.ts:21",{"_index":496,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.entity.ts:24",{"_index":494,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.entity.ts:28",{"_index":491,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.entity.ts:32",{"_index":499,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.entity.ts:35",{"_index":500,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.entity.ts:38",{"_index":489,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.entity.ts:41",{"_index":490,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.entity.ts:42",{"_index":498,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.entity.ts:9",{"_index":492,"title":{},"body":{"classes/Topic.html":{}}}],["src/topics/topic.module.ts",{"_index":517,"title":{},"body":{"modules/TopicModule.html":{}}}],["src/topics/topics.controller.ts",{"_index":526,"title":{},"body":{"controllers/TopicsController.html":{},"coverage.html":{}}}],["src/topics/topics.controller.ts:15",{"_index":531,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/topics/topics.controller.ts:20",{"_index":533,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/topics/topics.controller.ts:25",{"_index":528,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/topics/topics.controller.ts:33",{"_index":532,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/topics/topics.controller.ts:38",{"_index":530,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/topics/topics.service.ts",{"_index":547,"title":{},"body":{"injectables/TopicsService.html":{},"coverage.html":{}}}],["src/topics/topics.service.ts:10",{"_index":549,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/topics/topics.service.ts:20",{"_index":551,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/topics/topics.service.ts:56",{"_index":553,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/topics/topics.service.ts:60",{"_index":554,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/topics/topics.service.ts:68",{"_index":555,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/topics/topics.service.ts:74",{"_index":552,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/user/create",{"_index":428,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["src/user/user.controller.ts",{"_index":623,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:18",{"_index":627,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:24",{"_index":626,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:29",{"_index":628,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:35",{"_index":629,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:40",{"_index":630,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity.ts",{"_index":600,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:12",{"_index":608,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:15",{"_index":615,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:18",{"_index":612,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:21",{"_index":602,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:24",{"_index":605,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:27",{"_index":609,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:30",{"_index":607,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:33",{"_index":610,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:36",{"_index":604,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:39",{"_index":614,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:42",{"_index":603,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:45",{"_index":613,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:9",{"_index":606,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.module.ts",{"_index":649,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":659,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":663,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:17",{"_index":671,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:25",{"_index":668,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:33",{"_index":670,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:41",{"_index":666,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:45",{"_index":672,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:49",{"_index":665,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:76",{"_index":673,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":859,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":862,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":864,"title":{},"body":{"index.html":{}}}],["started",{"_index":838,"title":{"index.html":{}},"body":{}}],["starter",{"_index":852,"title":{},"body":{"index.html":{}}}],["statements",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["status.not_found",{"_index":570,"title":{},"body":{"injectables/TopicsService.html":{}}}],["status:400",{"_index":228,"title":{},"body":{"controllers/CategoryController.html":{}}}],["stay",{"_index":887,"title":{},"body":{"index.html":{}}}],["store",{"_index":357,"title":{},"body":{"injectables/CommentService.html":{}}}],["strategy",{"_index":458,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["stringify",{"_index":556,"title":{},"body":{"injectables/TopicsService.html":{}}}],["sub",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":463,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":878,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":897,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["t",{"_index":586,"title":{},"body":{"injectables/TopicsService.html":{}}}],["table",{"_index":693,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":867,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":870,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":869,"title":{},"body":{"index.html":{}}}],["tests",{"_index":866,"title":{},"body":{"index.html":{}}}],["text",{"_index":289,"title":{},"body":{"classes/Comment.html":{},"classes/CreateCommentDTO.html":{}}}],["textbody",{"_index":420,"title":{},"body":{"classes/CreateTopicDTO.html":{},"classes/Topic.html":{}}}],["thanks",{"_index":876,"title":{},"body":{"index.html":{}}}],["this.authservice.login(req.user",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":485,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.categoryrepository.create(category",{"_index":279,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.delete(id",{"_index":262,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.find",{"_index":259,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.findone",{"_index":260,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.findone(id",{"_index":282,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.save(cat",{"_index":280,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.update(id",{"_index":281,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":222,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall",{"_index":223,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findone(category_id",{"_index":582,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.categoryservice.findone(id",{"_index":226,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findone(user_id",{"_index":583,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.categoryservice.remove(id",{"_index":231,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id,createcategorydto",{"_index":233,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.commentservice.create(createcommentdto",{"_index":331,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.findall",{"_index":329,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.findone(id",{"_index":332,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.remove(id",{"_index":333,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentsrepository.create(comment",{"_index":379,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.delete(id",{"_index":353,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.find",{"_index":352,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.findone",{"_index":350,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.findone(id",{"_index":382,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.save(com",{"_index":380,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.update(id",{"_index":381,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.jwtservice.sign(payload",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.topicrepository.create(topic",{"_index":587,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.delete(id",{"_index":599,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.find",{"_index":591,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.findone",{"_index":593,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.findone(id",{"_index":597,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.save(t",{"_index":590,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.update(id,data",{"_index":596,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicservice.findone(topic_id",{"_index":374,"title":{},"body":{"injectables/CommentService.html":{},"injectables/UserService.html":{}}}],["this.topicsservice.create(createtopicdto",{"_index":544,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.findall",{"_index":536,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.findone(id",{"_index":545,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.update(id,createtopicdto",{"_index":538,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.userrepository.create(user",{"_index":699,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.delete(id",{"_index":678,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":677,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":675,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(id",{"_index":704,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(com",{"_index":702,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":703,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":641,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":639,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(useremail",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone(id",{"_index":642,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(user_id",{"_index":375,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.userservice.remove(id",{"_index":643,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":645,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":487,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["tinyint",{"_index":760,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createTopics1605702754591.html":{}}}],["topic",{"_index":158,"title":{"classes/Topic.html":{}},"body":{"classes/Category.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentDTO.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["topic.category",{"_index":567,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topic.dto",{"_index":534,"title":{},"body":{"controllers/TopicsController.html":{},"injectables/TopicsService.html":{}}}],["topic.dto.ts",{"_index":418,"title":{},"body":{"classes/CreateTopicDTO.html":{},"coverage.html":{}}}],["topic.dto.ts:5",{"_index":423,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["topic.dto.ts:6",{"_index":424,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["topic.dto.ts:7",{"_index":422,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["topic.dto.ts:8",{"_index":421,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["topic.dto.ts:9",{"_index":425,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["topic.entity",{"_index":519,"title":{},"body":{"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{}}}],["topic.imagestorage",{"_index":563,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topic.name",{"_index":559,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topic.textbody",{"_index":561,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topic.user",{"_index":565,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topic=>topic.category",{"_index":176,"title":{},"body":{"classes/Category.html":{}}}],["topic=>topic.comments",{"_index":313,"title":{},"body":{"classes/Comment.html":{}}}],["topic=>topic.user",{"_index":621,"title":{},"body":{"classes/User.html":{}}}],["topic_id",{"_index":369,"title":{},"body":{"injectables/CommentService.html":{},"classes/CreateCommentDTO.html":{},"injectables/UserService.html":{}}}],["topicmodule",{"_index":15,"title":{"modules/TopicModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules/TopicModule.html":{},"modules.html":{},"overview.html":{}}}],["topicrepository",{"_index":550,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topics",{"_index":141,"title":{},"body":{"classes/Category.html":{},"controllers/TopicsController.html":{},"classes/User.html":{}}}],["topics.controller",{"_index":521,"title":{},"body":{"modules/TopicModule.html":{}}}],["topics.service",{"_index":520,"title":{},"body":{"modules/TopicModule.html":{},"controllers/TopicsController.html":{}}}],["topics/topic.entity",{"_index":170,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentDTO.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["topics/topic.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{}}}],["topics/topics.service",{"_index":347,"title":{},"body":{"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["topics:topic",{"_index":177,"title":{},"body":{"classes/Category.html":{}}}],["topicscontroller",{"_index":518,"title":{"controllers/TopicsController.html":{}},"body":{"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"coverage.html":{}}}],["topicservice",{"_index":336,"title":{},"body":{"injectables/CommentService.html":{},"injectables/UserService.html":{}}}],["topicsservice",{"_index":337,"title":{"injectables/TopicsService.html":{}},"body":{"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["touch",{"_index":888,"title":{},"body":{"index.html":{}}}],["true",{"_index":155,"title":{},"body":{"classes/Category.html":{},"classes/Topic.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["ts",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["twitter",{"_index":893,"title":{},"body":{"index.html":{}}}],["type",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{},"miscellaneous/variables.html":{}}}],["type:\"boolean",{"_index":770,"title":{},"body":{"classes/createComment1605894914570.html":{},"classes/createUser1605879828481.html":{}}}],["type:\"booleran",{"_index":772,"title":{},"body":{"classes/createComment1605894914570.html":{}}}],["type:\"int",{"_index":795,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["type:\"text",{"_index":756,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["type:\"texte",{"_index":790,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["type:\"varchar",{"_index":750,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["typeorm",{"_index":169,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"classes/Topic.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":394,"title":{},"body":{"modules/CommentsModule.html":{},"modules/TopicModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":391,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([topic",{"_index":392,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([topic]),typeormmodule.forfeature([category",{"_index":652,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":393,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forroot",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":831,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["ui",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":479,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":160,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["unit",{"_index":865,"title":{},"body":{"index.html":{}}}],["up",{"_index":741,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["up(queryrunner",{"_index":745,"title":{},"body":{"classes/createCategory1605697433254.html":{},"classes/createComment1605894914570.html":{},"classes/createTopics1605702754591.html":{},"classes/createUser1605879828481.html":{}}}],["update",{"_index":186,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":232,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":202,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(id:string",{"_index":595,"title":{},"body":{"injectables/TopicsService.html":{}}}],["updated_at",{"_index":142,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["updated_at:date",{"_index":506,"title":{},"body":{"classes/Topic.html":{}}}],["updatedatecolumn",{"_index":162,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["useguards",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":638,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(localauthguard",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('auth/login",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":112,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"classes/Topic.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.avatar",{"_index":685,"title":{},"body":{"injectables/UserService.html":{}}}],["user.controller",{"_index":650,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":634,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":429,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":438,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:3",{"_index":442,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:4",{"_index":441,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:5",{"_index":435,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:6",{"_index":436,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:7",{"_index":439,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:8",{"_index":437,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:9",{"_index":440,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.email",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.entity",{"_index":635,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.isactive",{"_index":689,"title":{},"body":{"injectables/UserService.html":{}}}],["user.name",{"_index":679,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.quarantinenum",{"_index":691,"title":{},"body":{"injectables/UserService.html":{}}}],["user.role",{"_index":683,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":633,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.topic",{"_index":698,"title":{},"body":{"injectables/UserService.html":{}}}],["user.topics",{"_index":508,"title":{},"body":{"classes/Topic.html":{}}}],["user.ts",{"_index":730,"title":{},"body":{"coverage.html":{},"classes/createUser1605879828481.html":{}}}],["user.ts:5",{"_index":785,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["user.ts:61",{"_index":784,"title":{},"body":{"classes/createUser1605879828481.html":{}}}],["user.userdescription",{"_index":681,"title":{},"body":{"injectables/UserService.html":{}}}],["user/user.entity",{"_index":306,"title":{},"body":{"classes/Comment.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentDTO.html":{},"classes/Topic.html":{}}}],["user/user.module",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{}}}],["user:user",{"_index":311,"title":{},"body":{"classes/Comment.html":{},"classes/Topic.html":{}}}],["user_id",{"_index":371,"title":{},"body":{"injectables/CommentService.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{}}}],["usercontroller",{"_index":622,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userdescription",{"_index":434,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/User.html":{}}}],["useremail",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["userinfo",{"_index":302,"title":{},"body":{"classes/Comment.html":{}}}],["usermodule",{"_index":16,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usernamefield",{"_index":483,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userpassword",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["userrepository",{"_index":664,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":624,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":107,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice:userservice",{"_index":349,"title":{},"body":{"injectables/CommentService.html":{}}}],["usuario",{"_index":611,"title":{},"body":{"classes/User.html":{}}}],["uuid",{"_index":215,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"controllers/UserController.html":{}}}],["uuidv4",{"_index":216,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["validate",{"_index":453,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":477,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":455,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(useremail",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":904,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":860,"title":{},"body":{"index.html":{}}}],["we're",{"_index":588,"title":{},"body":{"injectables/TopicsService.html":{}}}],["website",{"_index":891,"title":{},"body":{"index.html":{}}}],["world",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":881,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nTopicModule\n\nTopicModule\n\nAppModule -->\n\nTopicModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            TopicModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthModule } from './auth/auth.module';\nimport { Module } from '@nestjs/common';\nimport { CategoryModule } from './category/category.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CommentsModule } from './comments/comments.module';\nimport { TopicModule } from './topics/topic.module';\nimport { UserModule } from './user/user.module';\n@Module({\n  imports: [\n\n\n\n    TypeOrmModule.forRoot({\n    }), CategoryModule, CommentsModule, UserModule, AuthModule, TopicModule],\n\n})\nexport class AppModule {\n  constructor() { };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('auth/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Request, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LocalAuthGuard } from './local-auth.guard';\n\n@Controller()\nexport class AuthController {\n\n    constructor(\n        private authService: AuthService,\n    ){}\n\n    @UseGuards(LocalAuthGuard)\n    @Post('auth/login')\n    async login(@Request() req: any ){\n        return this.authService.login(req.user);\n    }\n }\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { Module } from '@nestjs/common';\nimport { UserModule } from '../user/user.module';\nimport { LocalStrategy } from './local.stategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport' \nimport { jwtConstants } from './constants';\n\n\n@Module({\n    imports: [UserModule, PassportModule,\n    JwtModule.register({\n        secret: jwtConstants.secret,\n        signOptions:{expiresIn:'320s'}\n    })\n    ],\n    controllers: [AuthController],\n    providers: [AuthService, LocalStrategy, JwtStrategy,],\n})\nexport class AuthModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(userEmail: string, userPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {UserService} from '../user/user.service';\nimport { JwtService } from '@nestjs/jwt';\n\n\n\n@Injectable()\nexport class AuthService { \n    constructor(\n        private userService: UserService,\n        private jwtService:JwtService,\n    ){}\n\n    async validateUser(userEmail: string, userPassword: string){\n        const user = await this.userService.findByEmail(userEmail);\n        if (user && user.password === userPassword){\n            const {id, name, email} = user;\n            return {id : id , name , email};\n        }\n        return null;\n    }\n\n    async login(user: any){\n        const payload = {email: user.email, sub: user.id};\n        return{\n            access_token: this.jwtService.sign(payload),\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                created_at\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                imageStorage\n                            \n                            \n                                isActive\n                            \n                            \n                                name\n                            \n                            \n                                topics\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            author\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: '---------'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Topic[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Column, CreateDateColumn,UpdateDateColumn, Entity, ManyToOne, OneToMany, PrimaryGeneratedColumn} from 'typeorm';\nimport { Topic } from '../topics/topic.entity';\n\n@Entity('categories')\nexport class Category {\n\n  @PrimaryGeneratedColumn('uuid')\n  id:number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  author:string;\n\n  @Column()\n  description: string;\n\n  @Column({default:'---------'})\n  imageStorage: string;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date\n\n  @OneToMany(()=>Topic, topic=>topic.category)\n  topics:Topic[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createCategoryDTO: CreateCategoryDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDTO\n                                    \n                                                CreateCategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiResponse({status: 400, description: 'Error: Id is incorrect or category not exists'})\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, createCategoryDTO: CreateCategoryDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCategoryDTO\n                                    \n                                                CreateCategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Put, Render, } from '@nestjs/common';\nimport { CategoryService } from '../category/category.service';\nimport { CreateCategoryDTO} from '../category/create-category.dto'\nimport { Category } from '../category/category.entity';\nimport {uuid} from 'uuidv4';\nimport {ApiResponse} from '@nestjs/swagger'\n\n\n\n@Controller('categories')\nexport class CategoryController {\n  constructor(\n    private readonly categoryService: CategoryService,\n  ){}\n\n  @Post()\n  create( @Body() createCategoryDTO:CreateCategoryDTO):Promise{\n    return this.categoryService.create(createCategoryDTO);\n  }\n\n  @Get()\n  findAll(): Promise{\n\n    return this.categoryService.findAll();\n  }\n\n  @Get(':id')\n   findOne(@Param('id') id:string): Promise{\n\n    return this.categoryService.findOne(id);\n   }\n\n   @Delete(':id')\n\n   @ApiResponse({\n    status:400,\n    description:\"Error: Id is incorrect or category not exists\" })\n   remove(@Param('id') id:string): Promise{\n    return this.categoryService.remove(id)\n   }\n\n  @Put(':id')\n  update(@Param('id') id:string, @Body() createCategoryDTO: CreateCategoryDTO ): Promise{\n    return this.categoryService.update(id,createCategoryDTO);\n\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_imports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nTopicModule\n\nTopicModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nTopicModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TopicModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryController } from '../category/category.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Category } from './category.entity';\nimport { CategoryService } from './category.service';\nimport { TopicModule } from '../topics/topic.module';\n\n@Module({\n  imports:[TypeOrmModule.forFeature([Category]),TopicModule ],\n  providers: [CategoryService],\n  controllers:[CategoryController],\n  exports:[]\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDTO: CreateCategoryDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDTO\n                                    \n                                                CreateCategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, data: CreateCategoryDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CreateCategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Inject} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport {CreateCategoryDTO} from './create-category.dto';\nimport { Category } from './category.entity';\nimport { uuid } from 'uuidv4';\nimport { Repository } from 'typeorm';\nimport { ApiBadGatewayResponse } from '@nestjs/swagger'\n\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    //@Inject('CATEGORIES_REPOSITORY')\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n\n  ) {}\n\n  async findAll(): Promise {\n    return this.categoryRepository.find();\n  }\n\n  async findOne(id: string): Promise {\n    return this.categoryRepository.findOne({\n      where :{\n        id,\n      },\n    });\n  }\n\n  async remove(id: string): Promise {\n\n    const resp = await this.categoryRepository.delete(id);\n\n    /*affected property == 1 (deleted) */\n    if(resp.affected!==0){\n    console.log(`deleted category ${id} `)\n    }\n  }\n\n  async create(createCategoryDTO: CreateCategoryDTO): Promise {\n    const category = new Category();\n\n    category.name = createCategoryDTO.name;\n    category.author = createCategoryDTO.author;\n    category.description = createCategoryDTO.description;\n    category.imageStorage = createCategoryDTO.imageStorage;\n    const cat = await this.categoryRepository.create(category)\n\n    return this.categoryRepository.save(cat);\n  }\n\n  async update(id: string, data: CreateCategoryDTO ):\n  Promise {\n\n      await this.categoryRepository.update(id, data);\n      return this.categoryRepository.findOne(id);\n  }\n\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                disable\n                            \n                            \n                                hasParentComment\n                            \n                            \n                                id\n                            \n                            \n                                idParentComment\n                            \n                            \n                                reaction\n                            \n                            \n                                text\n                            \n                            \n                                topic\n                            \n                            \n                                updated_at\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comments/comments.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            disable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comments/comments.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasParentComment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comments/comments.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comments/comments.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            idParentComment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comments/comments.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comments/comments.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comments/comments.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Topic\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comments/comments.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comments/comments.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/comments/comments.entity.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { userInfo } from 'os';\nimport {Entity,Column, PrimaryGeneratedColumn, UpdateDateColumn, OneToMany, CreateDateColumn, ManyToMany, ManyToOne} from 'typeorm';\nimport {Topic} from '../topics/topic.entity'\nimport {User} from '../user/user.entity';\n\n@Entity()\nexport  class  Comment{\n\n@PrimaryGeneratedColumn('uuid')\nid:string;\n\n@Column()\ntext: string;\n\n@Column()\nreaction:string;\n\n@Column()\ndisable: boolean;\n\n@Column({default:0})\nhasParentComment: boolean;\n\n@Column({default:''})\nidParentComment: string;\n\n@CreateDateColumn()\ncreated_at:Date;\n\n@UpdateDateColumn()\nupdated_at: Date;\n\n@ManyToOne(()=>User,user=>user.comments)\nuser:User\n\n@ManyToOne(()=>Topic, topic=>topic.comments)\ntopic: Topic\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentController.html":{"url":"controllers/CommentController.html","title":"controller - CommentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comments\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createCommentDTO: CreateCommentDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCommentDTO\n                                    \n                                                CreateCommentDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Render } from '@nestjs/common';\nimport { CommentService } from '../comments/comments.service';\nimport { CreateCommentDTO } from '../comments/create-comment.dto'\nimport { Comment } from '../comments/comments.entity';\nimport {uuid} from 'uuidv4';\n\n\n\n@Controller('comments')\nexport class CommentController {\n  constructor(\n    private readonly commentService: CommentService,\n  ){}\n\n  @Get()\n  findAll(): Promise{\n    return this.commentService.findAll()\n\n  }\n\n\n  @Post()\n  create( @Body() createCommentDTO:CreateCommentDTO):Promise{\n    return this.commentService.create(createCommentDTO);\n  }\n\n  @Get(':id')\n   findOne(@Param('id') id:string): Promise{\n\n    return this.commentService.findOne(id);\n   }\n\n   @Delete(':id')\n   remove(@Param('id') id:string): Promise{\n    return this.commentService.remove(id)\n   }\n\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentService.html":{"url":"injectables/CommentService.html","title":"injectable - CommentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository, topicService: TopicsService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/comments/comments.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        topicService\n                                                  \n                                                        \n                                                                        TopicsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateCommentDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateCommentDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, data: CreateCommentDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/comments.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CreateCommentDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCommentDTO } from './create-comment.dto';\nimport { Comment } from './comments.entity';\nimport { Topic } from '../topics/topic.entity';\nimport {TopicsService} from '../topics/topics.service';\nimport { User } from '../user/user.entity'\nimport { UserService } from '../user/user.service';\n\n//import  User  from '../user/user.entity';\n\n\n@Injectable()\nexport class CommentService {\n  constructor(\n    @InjectRepository(Comment)\n    private commentsRepository: Repository,\n    private topicService: TopicsService,\n    private userService:UserService\n\n  ) {}\n\n  async findOne(id: string): Promise {\n    return this.commentsRepository.findOne({\n      where :{\n        id,\n      },\n    });\n  }\n\n  async findAll():Promise{\n    return this.commentsRepository.find();\n  }\n\n  async remove(id: string): Promise {\n    await this.commentsRepository.delete(id);\n  }\n\n  async create(data: CreateCommentDTO): Promise {\n    /**\n     * Instantiating dependencies\n     */\n    const comment = new Comment();\n    const topic = new Topic;\n    const user = new User;\n\n    /**Abstracting specified data to store into db */\n    comment.text = data.text;\n    comment.reaction = data.reaction;\n    comment.disable = data.disable;\n    comment.hasParentComment = data.hasParenteComment;\n    comment.idParentComment = data.idParentComment;\n    const topic_id = data.topic_id;\n    const user_id = data.user_id;\n\n\n    /**To associating this comment to its \"topic\" and \"user\" */\n    this.topicService.findOne(topic_id);\n    this.userService.findOne(user_id);\n\n\n    //comment.user = await this.userService.findOne(user_id);\n    //comment.topic = await this.topicService.findOne(topic_id);\n\n\n    const com = await this.commentsRepository.create(comment)\n    this.commentsRepository.save(com);\n    return this.commentsRepository.findOne({\n        where:{}\n      })\n  }\n\n  async update(id: string, data: CreateCommentDTO ):\n  Promise {\n\n      await this.commentsRepository.update(id, data);\n      return this.commentsRepository.findOne(id);\n  }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\n\nCategoryService\n\nCategoryService\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nCategoryService->CommentsModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentsModule -->\n\nCommentService->CommentsModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nCommentsModule -->\n\nTopicsService->CommentsModule\n\n\n\n\n\nUserService\n\nUserService\n\nCommentsModule -->\n\nUserService->CommentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comments/comments.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                        \n                            CommentService\n                        \n                        \n                            TopicsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CommentService } from '../comments/comments.service';\nimport { CommentController  } from '../comments/comments.controller'\nimport { Comment } from '../comments/comments.entity';\nimport {TopicsService} from '../topics/topics.service';\nimport { Topic } from '../topics/topic.entity';\nimport { User } from '../user/user.entity';\nimport { UserService} from '../user/user.service'\nimport { Category } from '../category/category.entity';\nimport { CategoryModule } from '../category/module/category.module';\nimport { CategoryService } from '../category/category.service';\n\n//import {} falta o user service\n\n\n@Module({\n  imports:[\n    TypeOrmModule.forFeature([Comment]),\n    TypeOrmModule.forFeature([Topic]),\n    TypeOrmModule.forFeature([User]),\n    TypeOrmModule.forFeature([Category]),\n    ],\n\n  providers: [CommentService, TopicsService, UserService, CategoryService ],\n  controllers:[CommentController ],\n  exports:[]\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDTO.html":{"url":"classes/CreateCategoryDTO.html","title":"class - CreateCategoryDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/create-category.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                author\n                            \n                            \n                                    Public\n                                    Readonly\n                                description\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageStorage\n                            \n                            \n                                    Public\n                                    Readonly\n                                isActive\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            author\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/category/create-category.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/category/create-category.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/category/create-category.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/category/create-category.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/category/create-category.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateCategoryDTO {\n  public readonly name: string;\n  public readonly author: string;\n  public readonly description: string;\n  public readonly imageStorage: string;\n  public readonly isActive: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDTO.html":{"url":"classes/CreateCommentDTO.html","title":"class - CreateCommentDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/create-comment.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                disable\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasParenteComment\n                            \n                            \n                                    Public\n                                    Readonly\n                                idParentComment\n                            \n                            \n                                    Public\n                                    Readonly\n                                indexOrder\n                            \n                            \n                                    Public\n                                    Readonly\n                                reaction\n                            \n                            \n                                    Public\n                                    Readonly\n                                text\n                            \n                            \n                                    Public\n                                topic_id\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            disable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/comments/create-comment.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            hasParenteComment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/comments/create-comment.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            idParentComment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/comments/create-comment.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            indexOrder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/comments/create-comment.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            reaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/comments/create-comment.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            text\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/comments/create-comment.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            topic_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/comments/create-comment.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            user_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/comments/create-comment.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Topic} from '../topics/topic.entity'\nimport {User} from '../user/user.entity';\n\nexport class CreateCommentDTO {\n    public readonly text: string;\n    public readonly reaction: string;\n    public readonly disable: boolean;\n    public readonly hasParenteComment: boolean;\n    public readonly idParentComment: string;\n    public readonly indexOrder: number;\n    public          topic_id :string;\n    public          user_id :string;\n  }\n  \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTopicDTO.html":{"url":"classes/CreateTopicDTO.html","title":"class - CreateTopicDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTopicDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/topics/create-topic.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                category_id\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageStorage\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                textBody\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/topics/create-topic.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/topics/create-topic.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/topics/create-topic.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            textBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/topics/create-topic.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            user_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/topics/create-topic.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Category } from \"../category/category.entity\";\n\n\nexport class CreateTopicDTO{\n  public readonly name: string;\n  public readonly textBody: string;\n  public readonly imageStorage:string;\n  public          category_id :string;\n  public          user_id: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                avatar\n                            \n                            \n                                    Public\n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                    Readonly\n                                isActive\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                password\n                            \n                            \n                                    Public\n                                    Readonly\n                                quarentineNum\n                            \n                            \n                                    Public\n                                    Readonly\n                                role\n                            \n                            \n                                    Public\n                                    Readonly\n                                userDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/create-user.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/create-user.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/create-user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/create-user.dto.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/create-user.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            quarentineNum\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/create-user.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/create-user.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            userDescription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/create-user.dto.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDTO {\n    public readonly name: string;\n    public readonly userDescription: string;\n    public readonly role: string;\n    public readonly avatar: string;\n    public readonly email: string;\n    public readonly password: string;\n    public readonly isActive: boolean;\n    public readonly quarentineNum: number;\n  }\n\n  /** MUST TO CREATE A NEW USER\n   \n  * {\n\t \"name\":\"string\",\n\t \"email\":\"marcos_v.23@hotmail.com\",\n\t \"role\": \"string\",\n   \"password\":\"string\"\n   \n    } */\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt'){\n  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt , Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy){\n    constructor(){\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: jwtConstants.secret,\n        });\n\n    }\n    async validate(payload: any){\n        return{id: payload.sub, email: payload.email};\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local'){\n  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.stategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.stategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.stategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable , UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService} from './auth.service';\nimport { NOW } from 'sequelize';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy){\n    constructor(private authService: AuthService){\n        super({\n            usernameField: 'email',\n            passwordFiels: 'password',\n        }); \n    }\n\n    async validate(email: string , password: string): Promise{\n        const user = await this.authService.validateUser(email, password);\n        if(!user){\n            throw new UnauthorizedException();\n        }\n        return user\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Topic.html":{"url":"classes/Topic.html","title":"class - Topic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Topic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/topics/topic.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                comments\n                            \n                            \n                                created_at\n                            \n                            \n                                id\n                            \n                            \n                                imageStorage\n                            \n                            \n                                isActive\n                            \n                            \n                                name\n                            \n                            \n                                reaction\n                            \n                            \n                                textBody\n                            \n                            \n                                topic\n                            \n                            \n                                updated_at\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: '--------'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/topics/topic.entity.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Entity,Column, PrimaryGeneratedColumn,UpdateDateColumn, ManyToOne, OneToOne, CreateDateColumn, OneToMany} from  'typeorm'\nimport { Category } from '../category/category.entity';\nimport {User} from '../user/user.entity';\nimport {Comment} from '../comments/comments.entity';\n\n@Entity('topics')\nexport  class Topic{\n@PrimaryGeneratedColumn('uuid')\nid:string;\n\n@Column()\nname: string;\n\n@Column()\ntextBody: string;\n\n@Column({default:'--------'})\nimageStorage:string;\n\n@Column({default:0})\nreaction: number\n\n@Column({default:true})\nisActive:boolean\n\n\n@CreateDateColumn()\ncreated_at: Date;\n\n\n@UpdateDateColumn()\nupdated_at:Date\n\n@ManyToOne(()=>User, user=> user.topics)\nuser:User;\n\n@ManyToOne(()=>Category, category=>category.topics)\ncategory:Category\n\n@OneToMany(()=>Comment, comments=>comments.topic)\ncomments:Comment[]\n  topic: Category;\n\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TopicModule.html":{"url":"modules/TopicModule.html","title":"module - TopicModule","body":"\n                   \n\n\n\n\n    Modules\n    TopicModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TopicModule\n\n\n\ncluster_TopicModule_providers\n\n\n\n\nCategoryService\n\nCategoryService\n\n\n\nTopicModule\n\nTopicModule\n\nTopicModule -->\n\nCategoryService->TopicModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nTopicModule -->\n\nTopicsService->TopicModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/topics/topic.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                        \n                            TopicsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TopicsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport {TypeOrmModule} from '@nestjs/typeorm';\nimport { Topic } from './topic.entity';\nimport {TopicsService} from './topics.service';\nimport {TopicsController} from './topics.controller'\nimport { CategoryModule } from '../category/module/category.module';\nimport { CategoryService } from '../category/category.service';\nimport { Category } from '../category/category.entity';\n@Module({\n  imports:[TypeOrmModule.forFeature([Topic]), TypeOrmModule.forFeature([Category])],\n  providers:[TopicsService, CategoryService],\n  controllers:[TopicsController],\n  exports:[TypeOrmModule.forFeature([Topic])],\n})\nexport class TopicModule {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TopicsController.html":{"url":"controllers/TopicsController.html","title":"controller - TopicsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TopicsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/topics/topics.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                topics\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createTopicDTO: CreateTopicDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/topics/topics.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTopicDTO\n                                    \n                                                CreateTopicDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/topics/topics.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/topics/topics.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/topics/topics.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, createTopicDTO: CreateTopicDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/topics/topics.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTopicDTO\n                                    \n                                                CreateTopicDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Param, Delete, Put } from '@nestjs/common';\nimport { TopicsService } from './topics.service';\nimport {Topic} from './topic.entity'\nimport { CreateTopicDTO } from './create-topic.dto';\n\n\n@Controller('topics')\nexport class TopicsController {\n\n  constructor(\n    private readonly topicsService: TopicsService,\n  ){}\n\n  @Get()\n  findAll(): Promise{\n    return this.topicsService.findAll()\n\n  }\n  @Put(':id')\n    update(@Param('id') id:string, @Body() createTopicDTO:CreateTopicDTO ): Promise{\n      return this.topicsService.update(id,createTopicDTO);\n    }\n\n  @Post()\n  create(@Body() createTopicDTO:CreateTopicDTO  ): Promise{\n    /** This assures us integrity references into DB */\n    console.log('123')\n\n    return this.topicsService.create(createTopicDTO);\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id:string): Promise{\n    return this.topicsService.findOne(id)\n  }\n\n  @Delete(':id')\n  delete(@Param('id') id:string ):Promise{\n     this.topicsService.findOne(id);\n      return\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TopicsService.html":{"url":"injectables/TopicsService.html","title":"injectable - TopicsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TopicsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/topics/topics.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(topicRepository: Repository, categoryService: CategoryService)\n                    \n                \n                        \n                            \n                                Defined in src/topics/topics.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        topicRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoryService\n                                                  \n                                                        \n                                                                        CategoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createTopicDTO: CreateTopicDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/topics/topics.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTopicDTO\n                                    \n                                                CreateTopicDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/topics/topics.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/topics/topics.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/topics/topics.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, data)\n                \n            \n\n\n            \n                \n                    Defined in src/topics/topics.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateTopicDTO } from './create-topic.dto';\nimport { Topic } from './topic.entity'\nimport {CategoryService } from '../category/category.service'\nimport { stringify } from 'querystring';\n\n@Injectable()\nexport class TopicsService {\n\n  constructor(\n\n    @InjectRepository(Topic)\n    private topicRepository: Repository,\n    private categoryService: CategoryService\n\n  ){}\n\n  async create( createTopicDTO: CreateTopicDTO): Promise{\n    const topic = new Topic;\n\n    topic.name = createTopicDTO.name\n    topic.textBody = createTopicDTO.textBody;\n    topic.imageStorage = createTopicDTO.imageStorage;\n    //topic.user = createTopicDTO.user_id;\n    //topic.category = createTopicDTO.category_id;\n\n    /**\n     * #########################//\n     *\n     * ERROR: Type '{ code: status.NOT_FOUND; details: string; }' is missing the following properties from type 'ServiceError': name, message.\n     *\n     * ##########################\n     * Possible solutions:\n     *\n     * https://stackoverflow.com/questions/55790897/type-is-missing-the-following-properties\n     *\n     * https://github.com/grpc/grpc-node/issues/858\n     *\n     *\n\n     //*Resolve this:\n    /*topic.category =  await this.categoryService.findOne(category_id);\n     topic.user =  await this.categoryService.findOne(user_id); */\n\n    /** this creates an entity instance */\n    const t = await this.topicRepository.create(topic);\n\n    /**now, we're  saving into DB */\n    return this.topicRepository.save(t);\n\n\n  }\n\n  async findAll():Promise{\n    return this.topicRepository.find();\n  }\n\n  async findOne(id:string): Promise{\n    return this.topicRepository.findOne({\n      where:{\n        id:id\n      },\n    })\n  }\n\n  async update(id:string, data): Promise{\n    await this.topicRepository.update(id,data);\n\n    return await this.topicRepository.findOne(id)\n  }\n\n  async delete(id:string ): Promise{\n    await this.topicRepository.delete(id)\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                comments\n                            \n                            \n                                created_at\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                quarantineNum\n                            \n                            \n                                role\n                            \n                            \n                                topics\n                            \n                            \n                                updated_at\n                            \n                            \n                                userDescription\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quarantineNum\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 'usuario'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Topic[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userDescription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Entity,Column,UpdateDateColumn, PrimaryGeneratedColumn, OneToMany, CreateDateColumn} from 'typeorm';\nimport {Topic} from '../topics/topic.entity';\nimport {Comment} from '../comments/comments.entity';\n\n@Entity('users')\nexport  class User{\n\n@PrimaryGeneratedColumn('uuid')\nid:string;\n\n@Column()\nname: string;\n\n@Column({default:''})\nuserDescription: string;\n\n@Column({default:'usuario'})\nrole:string;\n\n@Column({default:''})\navatar: string;\n\n@Column()\nemail: string\n\n@Column()\npassword: string;\n\n@Column({default:0})\nisActive: boolean;\n\n@Column({default:0})\nquarantineNum: number;\n\n@CreateDateColumn()\ncreated_at:Date;\n\n@UpdateDateColumn()\nupdated_at: Date;\n\n@OneToMany(()=>Comment, comment=>comment.user)\ncomments:Comment[]\n\n@OneToMany(()=>Topic, topic=>topic.user)\ntopics: Topic[];\n\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createUserDTO: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, createUserDTO: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, Param, Post, Put, Req, Res,Response, UseGuards, HttpStatus } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDTO } from './create-user.dto';\nimport {User} from './user.entity';\nimport {uuid} from 'uuidv4';\nimport {JwtAuthGuard} from '../auth/jwt-auth.guard'\n\n\n\n@Controller('users')\nexport class UserController {\n  constructor(\n    private readonly userService: UserService,\n  ){}\n\n  //@UseGuards(JwtAuthGuard)\n  @Get()\n  findAll(): Promise{\n    return this.userService.findAll()\n\n  }\n\n  @Post()\n  create(@Body() createUserDTO:CreateUserDTO):Promise{\n    return this.userService.create(createUserDTO);\n  }\n\n  @Get(':id')\n   findOne(@Param('id') id:string): Promise{\n\n    return this.userService.findOne(id);\n   }\n\n   @Delete(':id')\n   remove(@Param('id') id:string): Promise{\n    return this.userService.remove(id)\n   }\n\n   @Put(':id')\n   update(@Param('id') id:string, @Body() createUserDTO:CreateUserDTO): Promise{\n    return this.userService.update(id, createUserDTO);\n   }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCategoryService\n\nCategoryService\n\nUserModule -->\n\nCategoryService->UserModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nUserModule -->\n\nTopicsService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                        \n                            TopicsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserService } from './user.service';\nimport { UserController  } from './user.controller'\nimport {User}  from './user.entity';\nimport {TopicsService} from '../topics/topics.service';\nimport { Topic } from '../topics/topic.entity';\nimport {CategoryService } from '../category/category.service'\nimport {Category } from '../category/category.entity'\n\n//import {} falta o user service\n\n\n@Module({\n  imports:[TypeOrmModule.forFeature([User]), TypeOrmModule.forFeature([Topic]),TypeOrmModule.forFeature([Category]) ],\n  //por causa do topic ele pede o category\n  providers: [UserService, TopicsService, CategoryService ],\n  controllers:[UserController ],\n  exports:[UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, topicService: TopicsService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        topicService\n                                                  \n                                                        \n                                                                        TopicsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, data: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDTO  } from './create-user.dto';\nimport  {User}  from './user.entity';\nimport { Topic } from '../topics/topic.entity';\nimport {TopicsService} from '../topics/topics.service';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n    private topicService: TopicsService\n  ) {}\n\n  async findOne(id: string): Promise {\n    return this.userRepository.findOne({\n      where :{\n        id,\n      },\n    });\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.userRepository.findOne({\n      where :{\n        email,\n      },\n    });\n  }\n\n  async findById(id:string): Promise{\n    return this.userRepository.findOne({\n      where:{\n        id,\n      }\n    });\n  }\n\n  async findAll():Promise{\n    return this.userRepository.find();\n  }\n\n  async remove(id: string): Promise {\n    await this.userRepository.delete(id);\n  }\n\n  async create(createUserDTO: CreateUserDTO): Promise {\n    const user = new User();\n    const topic = new Topic;\n    user.name = createUserDTO.name;\n    user.userDescription = createUserDTO.userDescription;\n    user.role = createUserDTO.role;\n    user.avatar = createUserDTO.avatar;\n    user.email = createUserDTO.email;\n    user.password = createUserDTO.password;\n    user.isActive = createUserDTO.isActive;\n    user.quarantineNum = createUserDTO.quarentineNum;\n\n    /**Topic has a user,\n     * but topic table\n     * doesn't need to has\n     * its knowledge\n     */\n    //const topic_id = createUserDTO.topic_id;\n    //user.topic = await this.topicService.findOne(topic_id);\n\n    const com = await this.userRepository.create(user)\n    console.log('User created!')\n    return this.userRepository.save(com);\n\n\n  }\n\n  async update(id: string, data: CreateUserDTO ):\n  Promise {\n\n      await this.userRepository.update(id, data);\n      return this.userRepository.findOne(id);\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.stategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/category/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/category/create-category.dto.ts\n            \n            class\n            CreateCategoryDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/comments/comments.controller.ts\n            \n            controller\n            CommentController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/comments/comments.entity.ts\n            \n            class\n            Comment\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/comments/comments.service.ts\n            \n            injectable\n            CommentService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/comments/create-comment.dto.ts\n            \n            class\n            CreateCommentDTO\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migration/1605697433254-create_category.ts\n            \n            class\n            createCategory1605697433254\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/migration/1605702754591-create_topics.ts\n            \n            class\n            createTopics1605702754591\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/migration/1605879828481-create-user.ts\n            \n            class\n            createUser1605879828481\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/migration/1605894914570-create_comment.ts\n            \n            class\n            createComment1605894914570\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/topics/create-topic.dto.ts\n            \n            class\n            CreateTopicDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/topics/topic.entity.ts\n            \n            class\n            Topic\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/topics/topics.controller.ts\n            \n            controller\n            TopicsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/topics/topics.service.ts\n            \n            injectable\n            TopicsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/create-user.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createCategory1605697433254.html":{"url":"classes/createCategory1605697433254.html","title":"class - createCategory1605697433254","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createCategory1605697433254\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migration/1605697433254-create_category.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migration/1605697433254-create_category.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migration/1605697433254-create_category.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner, Table} from \"typeorm\";\n\nexport class createCategory1605697433254 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise {\n       new Table({ name:\"categories\",\n        columns:[\n            {\n                name:\"id\",\n                type:\"varchar\",\n                isPrimary: true,\n                generationStrategy:'uuid',\n                default:'uuid_generate_v4()',\n                isNullable:false,\n            },\n            {\n                name:\"name\",\n                type:\"text\",\n                isNullable:false,\n            },\n            {\n                name:\"author\",\n                type:\"text\",\n                isNullable:false,\n            },\n            {\n                name:\"imageStorage\",\n                type:\"text\",\n                isNullable:true\n            }\n            ,\n            {\n                name: \"isActive\",\n                type: \"tinyint\",\n                isNullable: false,\n                default:1,\n            }\n        ]\n    })\n}\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.dropTable('categories');\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createComment1605894914570.html":{"url":"classes/createComment1605894914570.html","title":"class - createComment1605894914570","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createComment1605894914570\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migration/1605894914570-create_comment.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migration/1605894914570-create_comment.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migration/1605894914570-create_comment.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner, Table} from \"typeorm\";\n\nexport class createComment1605894914570 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise {\n        new Table({ name:\"comments\",\n         columns:[\n             {\n                 name:\"id\",\n                 type:\"varchar\",\n                 isPrimary: true,\n                 generationStrategy:'uuid',\n                 default:'uuid_generate_v4()',\n                 isNullable:false,\n             },\n\n             {\n                 name:\"bodyText\",\n                 type:\"text\",\n                 isNullable:false,\n             },\n             {\n                 name:\"reaction\",\n                 type:\"text\",\n                 isNullable:false,\n             },\n             {\n                 name:\"disabe\",\n                 type:\"boolean\",\n                 isNullable:true\n             },\n             {\n                name:\"hasParentComment\",\n                type:\"booleran\",\n                isNullable:false\n            },\n            {\n                name:\"idParentComment\",\n                type:\"text\",\n                isNullable:false\n            },\n            {\n                name:\"indexOrder\",\n                type: 'int',\n                isNullable:true,\n                isGenerated: true,\n                generationStrategy: 'increment'\n            }\n         ]\n     })\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createTopics1605702754591.html":{"url":"classes/createTopics1605702754591.html","title":"class - createTopics1605702754591","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createTopics1605702754591\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migration/1605702754591-create_topics.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migration/1605702754591-create_topics.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migration/1605702754591-create_topics.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner, Table} from \"typeorm\";\n\nexport class createTopics1605702754591 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise {\n        new Table({ name:\"topics\",\n         columns:[\n             {\n                 name:\"id\",\n                 type:\"varchar\",\n                 isPrimary: true,\n                 generationStrategy:'uuid',\n                 default:'uuid_generate_v4()',\n                 isNullable:false,\n             },\n\n             {\n                 name:\"name\",\n                 type:\"text\",\n                 isNullable:false,\n             },\n             {\n                 name:\"topicBody\",\n                 type:\"text\",\n                 isNullable:false,\n             },\n             {\n                 name:\"imageStorage\",\n                 type:\"text\",\n                 isNullable:true\n             }\n             ,\n             {\n                 name: \"isActive\",\n                 type: \"tinyint\",\n                 isNullable: false,\n                 default:1,\n             },\n         ]\n     })\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.dropTable('topics');\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createUser1605879828481.html":{"url":"classes/createUser1605879828481.html","title":"class - createUser1605879828481","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createUser1605879828481\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migration/1605879828481-create-user.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migration/1605879828481-create-user.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migration/1605879828481-create-user.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner, Table} from \"typeorm\";\n\nexport class createUser1605879828481 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise {\n        new Table({ name:\"user\",\n         columns:[\n             {\n                 name:\"id\",\n                 type:\"varchar\",\n                 isPrimary: true,\n                 generationStrategy:'uuid',\n                 default:'uuid_generate_v4()',\n                 isNullable:false,\n             },\n\n             {\n                 name:\"name\",\n                 type:\"text\",\n                 isNullable:false,\n             },\n             {\n                 name:\"userDescription\",\n                 type:\"text\",\n                 isNullable:false,\n             },\n             {\n                 name:\"role\",\n                 type:\"text\",\n                 isNullable:true\n             },\n             {\n                name:\"avatr\",\n                type:\"texte\",\n                isNullable:false\n            },\n            {\n                name:\"email\",\n                type:\"text\",\n                isNullable:false\n            },\n            {\n                name:\"password\",\n                type:\"text\",\n                isNullable:false\n            },\n            {\n                name:\"isActive\",\n                type:\"boolean\",\n                isNullable:false\n            },\n            {\n                name:\"quarentineNum\",\n                type:\"int\",\n                isNullable:false\n            }\n         ]\n     })\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.3\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/sequelize : ^0.1.1\n        \n            @nestjs/swagger : ^4.7.5\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            global : ^4.4.0\n        \n            mysql : ^2.14.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.10\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.5\n        \n            ts-node-dev : ^1.0.0\n        \n            typeorm : ^0.2.29\n        \n            typescript : ^4.0.5\n        \n            uuidv4 : ^6.2.5\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TopicModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nTopicModule\n\nTopicModule\n\nCategoryModule -->\n\nTopicModule->CategoryModule\n\n\n\nAppModule -->\n\nTopicModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\nCommentsModule -->\n\nCategoryService->CommentsModule\n\n\n\nTopicModule -->\n\nCategoryService->TopicModule\n\n\n\nUserModule -->\n\nCategoryService->UserModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentsModule -->\n\nCommentService->CommentsModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nCommentsModule -->\n\nTopicsService->CommentsModule\n\n\n\nTopicModule -->\n\nTopicsService->TopicModule\n\n\n\nUserModule -->\n\nTopicsService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nCommentsModule -->\n\nUserService->CommentsModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    secret: 'KeyTest',\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
