var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.363,1,2.861]],["body/modules/AppModule.html",[0,2.299,1,5.689,2,2.14,3,2.14,4,2.35,5,2.35,6,2.14,7,2.35,8,2.35,9,4.077,10,4.077,11,5.025,12,0.015,13,5.025,14,4.183,15,3.038,16,2.35,17,2.35,18,0.147,19,0.147,20,0.129,21,4.692,22,3.194,23,0.589,24,4.077,25,4.077,26,4.692,27,1.282,28,2.755,29,2.047,30,4.077,31,4.692,32,4.692,33,3.672,34,3.672,35,3.672,36,4.692,37,2.35,38,4.692,39,4.692,40,4.077,41,5.271,42,4.692,43,4.692,44,4.692,45,4.692,46,4.692,47,4.692,48,6.721,49,4.692,50,4.692,51,0.147,52,0.32,53,0.008,54,0.011,55,0.008]],["title/controllers/AuthController.html",[56,1.902,57,2.861]],["body/controllers/AuthController.html",[12,0.015,18,0.111,19,0.111,20,0.097,23,0.512,27,0.967,51,0.111,52,0.242,53,0.006,54,0.009,55,0.006,56,2.393,57,3.599,58,1.48,59,3.076,60,0.213,61,1.37,62,4.355,63,2.024,64,3.922,65,5.055,66,5.055,67,3.54,68,4.795,69,2.25,70,3.54,71,1.274,72,3.922,73,3.54,74,3.599,75,0.526,76,3.54,77,1.606,78,1.06,79,0.381,80,1.492,81,3.947,82,1.666,83,3.54,84,3.54,85,3.54,86,3.54,87,1.306,88,4.855,89,5.012,90,5.012,91,3.54,92,3.229,93,1.729,94,3.076,95,5.012,96,4.355,97,3.188,98,3.54,99,2.36,100,2.209,101,2.36,102,3.599,103,1.864,104,2.36,105,2.36,106,2.36,107,2.542,108,3.341,109,3.341,110,2.36,111,1.545,112,3.416,113,2.771,114,2.36,115,3.076,116,2.36,117,3.076,118,3.54,119,3.54,120,2.771,121,5.012,122,3.54,123,1.782,124,5.012,125,3.54,126,3.54,127,3.54,128,2.761,129,3.54,130,3.54,131,3.54,132,3.54,133,3.599,134,3.076,135,3.076,136,3.54,137,3.54,138,2.095,139,3.54,140,2.36,141,5.012,142,1.65,143,3.54,144,1.965,145,0.866,146,2.079,147,3.54,148,3.54,149,3.54,150,2.51,151,3.076,152,3.54,153,3.076,154,3.599,155,3.54,156,3.54,157,3.54,158,3.54,159,3.922,160,3.54,161,3.54,162,3.54,163,3.54,164,3.076]],["title/modules/AuthModule.html",[0,1.363,11,2.656]],["body/modules/AuthModule.html",[0,2.215,2,1.982,3,1.982,4,2.177,5,2.177,6,1.982,7,3.243,8,3.243,11,5.37,12,0.015,14,4.096,15,2.889,16,2.177,17,2.177,18,0.136,19,0.136,20,0.119,22,3.037,23,0.577,27,1.188,28,2.552,29,1.896,30,3.776,51,0.136,52,0.297,53,0.008,54,0.01,55,0.008,57,4.651,58,2.412,71,1.617,112,4.658,113,3.401,165,3.776,166,3.776,167,3.776,168,3.776,169,4.92,170,4.92,171,4.346,172,4.346,173,4.346,174,4.346,175,3.401,176,1.817,177,4.346,178,5.768,179,2.711,180,3.776,181,4.346,182,5.768,183,3.776,184,3.776,185,3.776,186,3.776,187,3.776,188,4.346,189,4.346,190,4.346,191,4.346]],["title/injectables/AuthService.html",[112,2.339,192,1.263]],["body/injectables/AuthService.html",[12,0.015,18,0.064,19,0.064,20,0.056,23,0.48,27,0.559,29,0.892,33,1.6,34,1.6,51,0.064,52,0.14,53,0.004,54,0.006,55,0.004,60,0.123,61,0.902,62,2.87,63,2.111,64,3.732,65,3.61,66,2.87,71,1.549,75,0.541,77,1.65,78,1.135,79,0.392,80,1.533,82,1.667,87,1.477,88,4.714,92,3.876,93,1.53,94,2.87,96,1.777,97,2.499,102,2.372,112,1.939,117,1.777,128,2.675,135,1.777,138,3.092,142,1.98,144,3.107,145,1.591,146,2.8,154,1.469,159,1.6,175,1.6,176,0.855,192,1.047,193,0.976,194,1.777,195,3.61,196,3.302,197,3.302,198,3.302,199,3.302,200,1.506,201,2.045,202,2.34,203,5.889,204,5.889,205,3.732,206,3.179,207,2.045,208,1.777,209,2.045,210,0.843,211,3.302,212,2.045,213,4.609,214,3.302,215,2.87,216,4.154,217,2.87,218,3.302,219,3.302,220,2.87,221,3.302,222,3.302,223,3.302,224,2.045,225,3.302,226,2.045,227,3.302,228,4.154,229,3.302,230,4.144,231,3.302,232,2.045,233,2.045,234,2.045,235,2.06,236,2.045,237,3.302,238,2.439,239,2.045,240,4.769,241,3.269,242,3.302,243,2.87,244,3.302,245,3.302,246,4.769,247,2.87,248,5.233,249,3.302,250,3.302,251,4.769,252,2.045,253,1.939,254,2.045,255,2.045,256,0.602,257,1.363,258,2.045,259,2.045,260,2.975,261,2.045,262,1.6,263,2.647,264,1.6,265,1.777,266,2.045,267,2.87,268,2.045,269,2.045,270,1.777,271,1.024,272,1.469,273,4.154,274,1.777,275,1.276,276,2.045,277,2.87,278,1.739,279,2.045,280,3.302,281,1.777,282,2.585,283,2.045,284,2.372,285,2.045,286,2.045,287,2.045,288,2.045,289,2.045,290,1.777,291,2.045,292,2.045,293,2.045,294,2.045,295,1.777,296,2.045,297,1.6,298,3.302,299,2.045,300,2.045,301,2.045,302,2.045,303,2.045,304,1.777,305,2.045,306,2.045,307,2.87,308,2.045,309,2.045,310,1.6,311,2.045,312,2.045,313,2.045,314,2.045,315,2.045,316,2.045,317,2.045,318,2.045]],["title/classes/Category.html",[52,0.272,319,1.216]],["body/classes/Category.html",[12,0.014,18,0.12,19,0.12,20,0.105,23,0.448,51,0.12,52,0.262,53,0.007,54,0.009,55,0.007,60,0.231,69,2.764,75,0.647,78,1.017,79,0.469,87,1.452,123,2.158,210,0.977,256,1.127,319,1.617,320,0.568,321,3.327,322,2.939,323,4.359,324,1.249,325,3.195,326,2.939,327,3.04,328,2.244,329,2.433,330,2.537,331,2.768,332,3.195,333,2.158,334,5.124,335,3.829,336,3.829,337,2.099,338,4.144,339,3.53,340,3.829,341,4.739,342,4.046,343,3.829,344,4.046,345,3.829,346,5.026,347,3.829,348,3.803,349,3.829,350,3.829,351,2.415,352,1.679,353,3.829,354,3.829,355,1.745,356,3.829,357,4.046,358,3.829,359,2.553,360,2.75,361,4.046,362,2.553,363,2.997,364,2.997,365,2.75,366,2.997,367,3.829,368,1.296,369,3.829,370,3.327,371,3.829]],["title/controllers/CategoryController.html",[56,1.902,372,2.656]],["body/controllers/CategoryController.html",[12,0.015,18,0.056,19,0.056,20,0.12,23,0.504,27,0.486,51,0.056,52,0.122,53,0.003,54,0.005,55,0.003,56,0.85,58,0.744,60,0.107,61,0.806,63,2.022,69,2.064,71,0.39,74,3.493,75,0.483,77,1.474,78,1.111,79,0.35,80,1.37,81,4.37,82,1.529,87,1.288,92,3.08,93,1.842,99,1.187,100,4.136,101,1.966,102,2.117,103,1.987,104,1.187,105,1.187,106,1.187,107,2.117,108,3.242,109,3.7,110,1.187,111,0.777,114,1.187,115,1.547,116,1.966,123,2.516,128,2.534,138,3.094,140,3.242,142,1.911,144,3.08,145,1.358,146,2.856,150,1.477,151,1.547,153,3.279,154,2.71,164,1.547,200,0.812,202,1.578,210,1.048,213,1.393,253,2.856,263,1.636,272,2.71,278,2.561,297,1.393,310,2.954,319,1.944,325,1.552,326,2.095,330,1.835,352,1.196,355,0.452,372,1.966,373,1.547,374,1.278,375,1.78,376,2.954,377,1.636,378,2.954,379,2.216,380,1.636,381,2.216,382,2.117,383,1.78,384,2.954,385,1.547,386,1.78,387,1.547,388,3.259,389,1.78,390,1.552,391,2.562,392,1.547,393,1.78,394,3.493,395,1.78,396,1.393,397,5.045,398,1.78,399,1.78,400,1.78,401,2.436,402,1.547,403,3.957,404,1.78,405,2.948,406,1.839,407,1.78,408,5.55,409,2.948,410,1.78,411,2.948,412,2.948,413,3.774,414,2.948,415,3.774,416,3.774,417,3.279,418,1.78,419,1.78,420,1.393,421,1.78,422,1.78,423,3.764,424,1.78,425,1.78,426,1.78,427,2.117,428,1.78,429,1.547,430,1.78,431,1.78,432,1.111,433,1.547,434,2.562,435,1.78,436,1.78,437,0.777,438,2.738,439,1.408,440,1.547,441,1.278,442,1.278,443,2.354,444,1.278,445,1.393,446,1.278,447,1.278,448,0.633,449,1.278,450,2.71,451,1.278,452,1.393,453,2.307,454,1.89,455,1.547,456,1.187,457,1.547,458,0.85,459,3.152,460,2.117,461,1.045,462,1.278,463,1.393,464,1.278,465,1.393,466,1.278,467,1.547,468,1.78,469,1.187,470,1.187,471,1.78,472,1.78,473,1.636,474,3.493,475,1.278,476,3.806,477,3.152,478,2.117,479,2.516,480,1.547,481,1.78,482,1.547,483,1.78,484,1.78,485,1.547,486,1.78,487,2.948,488,2.948,489,1.78,490,1.78,491,1.547,492,1.78,493,1.78,494,2.954,495,1.78,496,1.78,497,1.78,498,1.393,499,1.477,500,2.117,501,2.562,502,1.78,503,1.393,504,1.278,505,1.547,506,1.78,507,1.393,508,2.516,509,3.152,510,1.393,511,2.948,512,1.278,513,1.78,514,1.78,515,2.948,516,2.948,517,1.78,518,1.278,519,1.547,520,1.547,521,2.562,522,1.78,523,1.547,524,1.547,525,1.547,526,1.78,527,1.78,528,1.278,529,1.278,530,2.948,531,1.78,532,1.78,533,2.948,534,1.78,535,1.78,536,1.547,537,1.393,538,1.547,539,1.547,540,1.78,541,1.547,542,1.393,543,1.278]],["title/modules/CategoryModule.html",[0,1.363,544,2.339]],["body/modules/CategoryModule.html",[0,2.231,2,2.012,3,2.012,4,2.209,5,2.209,6,2.012,7,3.267,8,2.918,12,0.015,14,4.113,15,2.918,16,2.209,17,2.209,18,0.138,19,0.138,20,0.121,22,3.067,23,0.587,27,1.205,28,2.59,29,1.925,37,3.613,51,0.138,52,0.301,53,0.008,54,0.01,55,0.008,58,2.436,71,0.966,176,1.844,202,3.098,319,1.347,355,1.12,372,4.349,454,3.712,455,3.833,458,2.106,463,3.452,544,4.755,545,3.833,546,3.833,547,3.833,548,4.623,549,3.38,550,4.411,551,4.411,552,3.833,553,3.833,554,2.941,555,1.844,556,3.168,557,3.833,558,4.411]],["title/injectables/CategoryService.html",[192,1.263,454,1.995]],["body/injectables/CategoryService.html",[12,0.015,18,0.071,19,0.071,20,0.062,23,0.484,27,0.62,29,0.991,51,0.071,52,0.155,53,0.004,54,0.006,55,0.004,60,0.137,61,0.981,63,2.171,75,0.588,77,1.794,78,1.236,79,0.413,80,1.667,82,1.834,87,1.479,93,2.07,123,1.276,128,2.86,138,2.451,142,1.805,145,0.556,192,1.138,193,1.084,200,1.637,206,4.094,210,1.121,217,1.972,256,0.668,257,1.513,263,2.472,278,2.345,319,1.79,325,1.195,326,2.809,328,1.328,330,2.116,333,1.276,352,0.72,355,0.576,377,1.993,378,2.81,379,2.108,380,1.993,381,2.108,382,1.63,390,1.195,401,2.472,402,3.119,403,3.738,437,0.991,438,2.24,439,1.084,440,1.972,443,1.416,448,1.276,454,1.798,456,1.513,457,1.972,458,1.084,469,1.513,470,1.513,480,1.972,482,1.972,485,1.972,499,3.188,501,1.972,508,2.393,555,0.949,559,1.972,560,2.81,561,3.119,562,3.59,563,2.81,564,3.59,565,2.27,566,3.869,567,3.233,568,2.27,569,3.119,570,3.59,571,3.961,572,3.198,573,3.635,574,2.27,575,3.119,576,2.27,577,3.59,578,2.27,579,2.27,580,2.393,581,2.27,582,2.27,583,2.27,584,2.27,585,2.578,586,2.27,587,3.59,588,2.27,589,2.81,590,2.27,591,3.59,592,2.27,593,2.578,594,2.27,595,2.27,596,2.972,597,2.27,598,2.27,599,1.777,600,1.972,601,1.972,602,2.27,603,2.535,604,2.24,605,1.137,606,3.198,607,1.63,608,1.26,609,1.195,610,1.777,611,2.27,612,5.061,613,2.27,614,1.972,615,1.993,616,3.119,617,2.27,618,2.27,619,2.27,620,2.27,621,2.27,622,2.27,623,2.27,624,2.27,625,2.27,626,2.27,627,2.27,628,1.972,629,2.27,630,2.27,631,2.27,632,2.27,633,1.972,634,2.27,635,2.27,636,1.777,637,2.27,638,2.27,639,2.27,640,2.27,641,2.27,642,2.27,643,3.119,644,2.27,645,2.27,646,2.27,647,2.27,648,1.777,649,1.972,650,1.972,651,1.972,652,2.27,653,2.27,654,2.27,655,2.27,656,2.27,657,2.27]],["title/classes/Comment.html",[52,0.272,337,1.216]],["body/classes/Comment.html",[12,0.015,18,0.131,19,0.131,20,0.115,23,0.524,51,0.131,52,0.287,53,0.007,54,0.01,55,0.007,60,0.253,69,2.698,71,1.662,75,0.631,79,0.457,87,1.281,176,1.754,210,1.024,256,1.234,319,2.279,320,0.622,324,1.329,328,2.353,329,2.551,333,2.262,337,1.721,339,4.242,341,4.871,342,4.242,344,4.242,346,4.242,348,4.047,355,1.926,357,4.242,359,2.797,360,4.885,361,2.797,362,2.797,365,3.013,658,3.646,659,2.66,660,5.528,661,4.195,662,4.195,663,4.195,664,4.195,665,4.195,666,4.195,667,4.195,668,4.195,669,3.646,670,4.195,671,4.195,672,3.646,673,4.195,674,4.195,675,4.195,676,4.195]],["title/controllers/CommentController.html",[56,1.902,677,2.656]],["body/controllers/CommentController.html",[12,0.015,18,0.068,19,0.068,20,0.06,23,0.509,27,0.596,51,0.068,52,0.149,53,0.004,54,0.006,55,0.004,56,1.042,58,0.912,60,0.131,61,0.95,63,1.884,69,2.049,71,0.762,72,4.509,74,2.498,75,0.479,77,1.463,78,1.052,79,0.347,80,1.359,81,4.3,82,1.518,87,1.219,92,3.759,93,1.884,99,1.454,100,4.522,101,2.319,103,2.284,104,1.454,105,1.454,106,1.454,107,3.554,108,2.319,109,3.3,110,1.454,111,0.952,116,1.454,123,2.577,128,2.359,138,2.965,140,3.3,142,1.834,144,3.001,145,1.323,146,3.174,200,0.995,202,1.813,210,0.973,238,1.281,253,2.547,263,2.407,278,2.606,284,2.498,295,1.895,297,1.707,310,3.395,327,2.172,333,0.776,337,2.105,352,1.103,374,1.566,377,1.93,380,1.93,381,2.042,387,1.895,388,3.549,391,3.022,394,3.883,397,4.3,406,3.916,420,1.707,423,4.763,427,1.566,432,1.361,433,1.895,434,3.022,437,0.952,438,1.361,439,1.042,443,1.361,444,1.566,448,0.776,449,1.566,450,3.554,451,1.566,456,1.454,459,4.138,460,3.115,461,1.281,462,1.566,463,1.707,473,2.407,474,3.554,475,2.498,477,3.115,478,2.498,479,2.319,491,1.895,498,1.707,499,1.742,500,2.498,503,1.707,504,1.566,505,1.895,507,1.707,508,2.892,509,1.566,510,1.707,512,1.566,518,3.115,519,1.895,520,1.895,521,3.022,523,1.895,524,1.895,525,3.022,528,1.566,529,1.566,543,1.566,549,1.978,554,1.454,593,1.566,596,3.383,659,0.912,677,2.319,678,1.895,679,2.181,680,4.337,681,3.478,682,2.181,683,2.181,684,2.181,685,2.181,686,3.3,687,2.181,688,2.722,689,2.181,690,2.181,691,2.181,692,1.895,693,2.722,694,3.873,695,2.181,696,2.181,697,2.181,698,1.895,699,1.707,700,2.181,701,3.554,702,1.895,703,2.181,704,2.547,705,1.895,706,3.022,707,2.181,708,1.042,709,1.454,710,1.895,711,1.895,712,2.181,713,2.181,714,3.115,715,2.181,716,2.181,717,3.395,718,1.566,719,1.895,720,3.478,721,2.181,722,1.895,723,2.181,724,3.478,725,2.181,726,2.181,727,2.181,728,2.181,729,2.181,730,2.181,731,2.181,732,1.895,733,4.337,734,2.181,735,3.478,736,3.022,737,2.181,738,3.478,739,3.478,740,2.181]],["title/classes/CommentModel.html",[52,0.272,709,2.656]],["body/classes/CommentModel.html",[12,0.014,18,0.165,19,0.165,20,0.145,51,0.165,52,0.361,53,0.009,54,0.011,55,0.009,60,0.318,75,0.634,79,0.46,87,1.437,210,1.053,320,0.783,324,1.542,328,2.417,329,2.621,333,2.324,368,1.927,659,2.733,709,4.358,741,5.179,742,6.751,743,2.78,744,2.931,745,3.52,746,4.133,747,3.792,748,3.1,749,3.294,750,3.792,751,5.28,752,5.28,753,5.28]],["title/injectables/CommentService.html",[192,1.263,704,2.339]],["body/injectables/CommentService.html",[12,0.015,18,0.099,19,0.099,20,0.087,23,0.54,27,0.865,29,1.381,51,0.099,52,0.216,53,0.006,54,0.008,55,0.006,60,0.191,61,1.264,63,2.13,71,0.693,75,0.574,77,1.75,78,1.155,79,0.385,80,1.626,81,3.749,82,1.758,87,1.358,92,1.757,93,1.97,128,2.622,138,2.791,142,1.893,145,1.132,192,1.466,193,1.511,200,2.109,202,2.954,206,4.006,210,0.968,256,0.931,257,2.11,263,3.032,278,2.435,327,1.585,337,1.668,355,1.387,377,2.567,379,2.715,380,2.567,381,2.715,432,2.885,437,1.381,438,1.975,439,1.511,443,1.975,448,1.644,456,2.11,479,2.11,499,3.539,549,2.741,554,2.11,555,1.323,575,4.018,580,3.083,585,2.273,593,3.321,596,3.753,603,2.736,604,2.885,605,1.585,606,3.321,607,2.273,686,4.596,704,2.715,706,2.75,708,1.511,710,2.75,711,2.75,718,2.273,719,2.75,754,2.75,755,3.165,756,6.009,757,3.165,758,5.463,759,3.165,760,4.624,761,3.165,762,3.165,763,3.165,764,3.165,765,3.165,766,2.273,767,2.273,768,3.165,769,3.165,770,3.165,771,3.165,772,3.165,773,3.165,774,3.165,775,3.165,776,3.165,777,4.624,778,2.75,779,3.165,780,3.165,781,4.624,782,3.165,783,3.165,784,3.165,785,3.165]],["title/modules/CommentsModule.html",[0,1.363,786,2.656]],["body/modules/CommentsModule.html",[0,2.236,2,2.021,3,2.021,4,2.219,5,2.219,6,2.021,7,3.274,8,2.926,12,0.015,15,2.926,16,2.219,17,2.219,18,0.139,19,0.139,20,0.121,22,3.076,23,0.59,27,1.21,28,2.601,29,1.933,37,3.716,51,0.139,52,0.303,53,0.008,54,0.01,55,0.008,58,2.442,71,1.28,176,1.852,202,3.102,319,1.784,337,1.353,355,1.483,454,3.716,458,2.115,544,2.601,549,3.384,554,2.953,555,1.852,556,3.181,677,4.358,704,4.356,705,3.849,708,2.115,766,3.181,786,5.36,787,3.849,788,4.43,789,3.849,790,4.43,791,4.43,792,3.467,793,3.467,794,4.43]],["title/classes/CreateCategoryDTO.html",[52,0.272,403,2.339]],["body/classes/CreateCategoryDTO.html",[12,0.014,18,0.106,19,0.106,20,0.093,23,0.457,51,0.106,52,0.331,53,0.006,54,0.008,55,0.006,60,0.204,69,2.704,75,0.633,78,1.228,79,0.469,87,1.489,111,1.476,123,2.605,145,1.671,210,0.914,319,2.086,320,0.502,324,1.145,325,2.987,326,3.149,330,2.372,331,2.588,332,2.987,337,1.733,351,2.213,355,1.666,368,1.671,403,2.849,555,1.414,708,1.616,795,6.666,796,2.648,797,2.089,798,4.93,799,4.93,800,4.93,801,4.93,802,5.291,803,2.94,804,2.94,805,2.705,806,2.94,807,2.94,808,3.027,809,2.94,810,2.94,811,1.987,812,2.94,813,2.94,814,2.94,815,2.94,816,2.94,817,2.94,818,3.331,819,1.781,820,3.639]],["title/classes/CreateCategoryDTO-1.html",[52,0.227,403,1.952,603,1.665]],["body/classes/CreateCategoryDTO-1.html",[12,0.014,18,0.106,19,0.106,20,0.093,23,0.457,51,0.106,52,0.331,53,0.006,54,0.008,55,0.006,60,0.204,69,2.704,75,0.633,78,1.228,79,0.469,87,1.489,111,1.476,123,2.605,145,1.671,210,0.914,319,2.086,320,0.502,324,1.145,325,2.987,326,3.149,330,2.372,331,2.588,332,2.987,337,1.733,351,2.213,355,1.666,368,1.671,403,2.849,555,1.414,708,1.616,796,2.648,797,2.089,798,4.93,799,4.93,800,4.93,801,4.93,802,5.291,803,2.94,804,2.94,805,2.705,806,2.94,807,2.94,808,3.027,809,2.94,810,2.94,811,1.987,812,2.94,813,2.94,814,2.94,815,2.94,816,2.94,817,2.94,818,3.331,819,1.781,820,3.639,821,6.666]],["title/classes/CreateCommentDTO.html",[52,0.272,686,2.656]],["body/classes/CreateCommentDTO.html",[12,0.014,18,0.123,19,0.123,20,0.108,23,0.397,51,0.123,52,0.368,53,0.007,54,0.009,55,0.007,60,0.237,69,2.608,75,0.61,79,0.462,87,1.49,103,2.835,111,1.712,123,2.547,210,0.867,320,0.582,324,1.27,337,1.644,351,3.018,355,1.367,368,1.753,473,4.467,659,2.57,686,3.59,718,4.415,797,2.061,802,5.162,805,2.35,808,3.359,811,2.304,818,3.609,819,2.066,820,3.885,822,6.491,823,3.071,824,5.342,825,5.342,826,5.342,827,5.342,828,6.024,829,3.924,830,3.41,831,3.41,832,3.924,833,3.924,834,3.924,835,3.924]],["title/classes/CreateCommentModel.html",[52,0.272,836,3.118]],["body/classes/CreateCommentModel.html",[12,0.014,18,0.181,19,0.181,20,0.158,23,0.426,51,0.181,52,0.394,53,0.01,54,0.012,55,0.01,60,0.348,75,0.574,79,0.416,87,1.299,210,1.111,320,0.856,324,1.627,337,1.761,368,1.412,442,5.299,659,2.883,708,2.754,741,4.92,743,3.037,744,3.201,748,3.386,749,3.598,750,4.142,836,5.398]],["title/classes/CreateModel.html",[52,0.272,441,2.861]],["body/classes/CreateModel.html",[12,0.014,18,0.177,19,0.177,20,0.155,51,0.177,52,0.386,53,0.01,54,0.012,55,0.01,60,0.341,75,0.609,78,1.143,79,0.441,87,1.431,210,1.178,320,0.839,324,1.608,330,2.85,441,4.896,442,5.456,743,2.978,744,3.14,747,4.063,748,3.321,837,5.065,838,4.427,839,4.915]],["title/classes/CreateSessionDTO.html",[52,0.272,68,2.861]],["body/classes/CreateSessionDTO.html",[12,0.014,18,0.142,19,0.142,20,0.124,23,0.437,51,0.142,52,0.405,53,0.008,54,0.01,55,0.008,60,0.273,68,4.256,69,2.349,71,1.709,75,0.583,78,1.219,79,0.465,87,1.494,97,3.474,100,3.697,111,1.976,123,2.654,320,0.672,324,1.398,368,1.827,797,2.027,808,3.697,811,2.658,818,3.879,819,2.384,820,4.116,840,3.934,841,6.607,842,4.527,843,3.934,844,4.527,845,4.527,846,5.926,847,5.149,848,5.926,849,4.527,850,4.527]],["title/classes/CreateTopicDTO.html",[52,0.272,851,2.656]],["body/classes/CreateTopicDTO.html",[12,0.014,18,0.125,19,0.125,20,0.109,23,0.402,51,0.125,52,0.372,53,0.007,54,0.009,55,0.007,60,0.241,69,2.48,71,1.194,75,0.58,78,1.169,79,0.464,87,1.528,103,2.869,111,1.742,123,2.736,210,1.073,319,1.664,320,0.592,324,1.285,330,2.593,355,1.828,368,1.883,473,4.222,478,3.913,659,2.593,797,2.023,811,4.096,818,4.466,819,2.102,820,4.227,851,3.633,852,6.256,853,3.125,854,5.39,855,5.39,856,3.992,857,5.448,858,3.992,859,3.992,860,2.602,861,3.992,862,3.992]],["title/classes/CreateUserDTO.html",[52,0.272,260,2.485]],["body/classes/CreateUserDTO.html",[12,0.014,18,0.106,19,0.106,20,0.093,23,0.358,51,0.106,52,0.331,53,0.006,54,0.008,55,0.006,60,0.204,69,2.676,71,1.063,75,0.633,78,0.951,79,0.474,87,1.532,97,3.134,111,1.476,123,2.644,210,0.914,235,3.54,241,3.642,260,3.027,270,4.217,275,3.54,320,0.502,324,1.145,331,2.588,351,2.827,368,1.82,797,2.081,802,5.115,805,2.118,808,3.54,811,2.849,818,3.639,819,1.781,820,4.01,863,6.666,864,2.648,865,5.136,866,4.094,867,3.783,868,4.075,869,4.075,870,3.798,871,3.383,872,3.383,873,3.383,874,3.383,875,3.383,876,3.383,877,3.383,878,3.383,879,3.383,880,3.383,881,3.383,882,3.383]],["title/classes/DeleteModel.html",[52,0.272,466,2.861]],["body/classes/DeleteModel.html",[12,0.014,18,0.186,19,0.186,20,0.163,51,0.186,52,0.406,53,0.01,54,0.012,55,0.01,60,0.359,75,0.495,79,0.359,87,1.324,150,3.745,320,0.883,324,1.657,466,5.046,797,1.898,883,6.106,884,5.171,885,5.95]],["title/classes/DeletedItemCategoryDTO.html",[52,0.272,886,3.118]],["body/classes/DeletedItemCategoryDTO.html",[12,0.014,18,0.186,19,0.186,20,0.163,51,0.186,52,0.406,53,0.01,54,0.012,55,0.01,60,0.359,75,0.495,79,0.359,87,1.324,150,3.745,320,0.883,324,1.657,797,1.898,886,5.499,887,6.106,888,5.171,889,5.95]],["title/classes/DeletedItemTopicDTO.html",[52,0.272,890,2.861]],["body/classes/DeletedItemTopicDTO.html",[12,0.014,18,0.186,19,0.186,20,0.163,51,0.186,52,0.406,53,0.01,54,0.012,55,0.01,60,0.359,75,0.495,79,0.359,87,1.324,150,3.745,320,0.883,324,1.657,797,1.898,853,4.657,890,5.046,891,6.106,892,5.95]],["title/classes/DeletedItemUserDTO.html",[52,0.272,893,2.861]],["body/classes/DeletedItemUserDTO.html",[12,0.014,18,0.186,19,0.186,20,0.163,51,0.186,52,0.406,53,0.01,54,0.012,55,0.01,60,0.359,75,0.495,79,0.359,87,1.324,150,3.745,320,0.883,324,1.657,797,1.898,864,4.657,893,5.046,894,6.106,895,5.95]],["title/injectables/FilesService.html",[192,1.263,567,2.097]],["body/injectables/FilesService.html",[12,0.014,18,0.157,19,0.157,20,0.137,23,0.512,27,1.369,51,0.157,52,0.342,53,0.009,54,0.011,55,0.009,60,0.302,61,1.729,63,1.894,75,0.526,77,1.272,78,0.84,79,0.302,80,1.182,82,1.32,87,1.306,93,1.369,103,2.638,128,2.187,138,2.898,142,1.421,145,1.226,192,2.006,193,2.393,200,3.162,567,3.331,572,4.979,573,5.229,896,4.354,897,6.326,898,5.011,899,6.326,900,5.011,901,6.326,902,6.024,903,3.922,904,4.354,905,5.011,906,3.31,907,6.326,908,5.011,909,5.011,910,5.011,911,5.011,912,3.922,913,5.011]],["title/classes/FindAllModel.html",[52,0.272,437,1.738]],["body/classes/FindAllModel.html",[12,0.014,18,0.153,19,0.153,20,0.134,23,0.36,51,0.153,52,0.333,53,0.008,54,0.011,55,0.008,60,0.294,75,0.634,79,0.459,320,0.724,324,1.467,332,3.606,355,1.239,437,2.715,439,3.696,555,2.04,605,3.43,608,3.801,609,3.276,743,2.57,744,2.709,745,3.254,797,2.09,805,3.452,914,6.725,915,4.021,916,4.021,917,3.82,918,4.241,919,3.505,920,5.406,921,4.88,922,3.505]],["title/classes/FindAllModel-1.html",[52,0.227,437,1.451,603,1.665]],["body/classes/FindAllModel-1.html",[12,0.014,18,0.153,19,0.153,20,0.134,23,0.361,51,0.153,52,0.334,53,0.009,54,0.011,55,0.009,60,0.295,75,0.634,79,0.459,319,2.094,320,0.726,324,1.47,390,3.61,437,2.719,439,3.698,458,2.336,605,3.434,608,3.805,609,3.28,797,2.09,805,3.454,837,5.163,915,4.025,916,4.025,922,3.513,923,4.251,924,4.892,925,4.892,926,4.892,927,4.892,928,4.892,929,4.892]],["title/classes/FindAllModel-2.html",[52,0.227,437,1.451,930,2.889]],["body/classes/FindAllModel-2.html",[12,0.014,18,0.161,19,0.161,20,0.141,23,0.379,51,0.161,52,0.351,53,0.009,54,0.011,55,0.009,60,0.31,75,0.642,79,0.465,87,1.21,320,0.762,324,1.515,327,3.512,337,2.141,437,2.804,439,3.738,605,3.512,608,3.892,609,3.383,708,2.452,741,5.219,743,2.704,744,2.851,745,3.424,748,3.015,805,3.416,915,4.117,916,4.117,917,4.019,918,4.463,919,3.688,922,3.688]],["title/classes/FindOneModel.html",[52,0.272,464,2.861]],["body/classes/FindOneModel.html",[12,0.014,18,0.159,19,0.159,20,0.139,51,0.159,52,0.347,53,0.009,54,0.011,55,0.009,60,0.307,75,0.64,78,1.07,79,0.464,80,1.727,87,1.45,123,2.27,210,1.028,320,0.754,324,1.506,325,3.362,326,3.544,330,2.669,368,1.244,439,3.73,464,4.585,465,6.113,743,2.677,744,2.822,745,3.39,746,3.98,747,3.652,748,2.986,749,3.172,837,5.208,838,3.98,839,4.419,919,3.652,931,4.419,932,5.085,933,5.085]],["title/modules/ForumModule.html",[0,1.363,13,2.656]],["body/modules/ForumModule.html",[0,2.084,2,1.76,3,1.76,4,1.932,5,1.932,6,1.76,7,3.052,8,3.052,12,0.015,13,5.43,14,3.955,15,2.666,16,1.932,17,1.932,18,0.121,19,0.121,20,0.106,22,2.802,23,0.588,27,1.054,28,2.265,29,1.684,37,3.568,51,0.121,52,0.264,53,0.007,54,0.009,55,0.007,58,2.225,319,1.178,337,1.625,355,1.351,372,4.062,454,3.568,458,1.842,544,4.57,548,4.856,549,3.25,552,3.352,553,3.352,554,2.572,555,1.613,557,3.352,677,4.062,704,4.183,708,1.842,786,5.189,792,3.019,793,3.019,934,3.352,935,3.352,936,3.858,937,3.858,938,3.858,939,4.062,940,3.858,941,3.858,942,3.858,943,3.858,944,3.858,945,3.858]],["title/classes/Image1621217598627.html",[52,0.272,946,3.118]],["body/classes/Image1621217598627.html",[12,0.014,18,0.144,19,0.144,20,0.126,23,0.338,51,0.144,52,0.313,53,0.008,54,0.01,55,0.008,60,0.277,61,1.633,63,2.047,75,0.497,77,1.518,78,1.256,79,0.44,80,1.41,82,1.575,93,1.925,142,1.885,145,1.123,210,0.739,256,1.35,320,0.681,352,1.895,448,1.631,797,1.902,860,2.854,870,3.59,906,2.191,912,3.59,946,4.678,947,3.904,948,5.778,949,3.986,950,2.727,951,3.033,952,2.727,953,2.727,954,2.727,955,3.568,956,4.587,957,2.727,958,4.587,959,2.609,960,2.994,961,2.092,962,3.058,963,2.092,964,2.298,965,2.092,966,2.092,967,3.033,968,2.397,969,2.298,970,3.986,971,2.298,972,3.986]],["title/modules/ImageModule.html",[0,1.363,973,2.656]],["body/modules/ImageModule.html",[0,2.417,2,2.384,3,2.384,4,2.618,5,2.618,6,2.384,7,3.54,8,3.54,12,0.014,15,3.253,16,2.618,17,2.618,18,0.164,19,0.164,20,0.143,22,2.752,23,0.521,27,1.428,51,0.164,52,0.357,53,0.009,54,0.011,55,0.009,58,2.185,71,1.145,133,4.665,319,1.596,355,1.327,567,4.287,973,5.239,974,4.542,975,4.542,976,4.542,977,5.227,978,4.542,979,4.091,980,4.091,981,4.091,982,4.091,983,4.091,984,4.091]],["title/injectables/JwtAuthGuard.html",[192,1.263,461,2.339]],["body/injectables/JwtAuthGuard.html",[12,0.014,18,0.189,19,0.189,20,0.165,23,0.523,27,1.65,51,0.189,52,0.412,53,0.01,54,0.012,55,0.01,179,3.767,192,2.247,193,2.883,322,3.351,461,4.161,985,5.246,986,4.725,987,5.246,988,6.038]],["title/injectables/JwtStrategy.html",[169,2.656,192,1.263]],["body/injectables/JwtStrategy.html",[12,0.014,18,0.162,19,0.162,20,0.142,23,0.519,27,1.414,51,0.162,52,0.353,53,0.009,54,0.011,55,0.009,60,0.312,61,1.764,63,1.922,75,0.537,77,1.314,78,0.867,79,0.312,80,1.221,82,1.363,97,2.471,128,2.258,169,4.303,179,3.228,183,4.496,184,4.496,185,4.496,186,4.496,187,4.496,192,2.046,193,2.471,200,3.209,210,0.833,281,4.496,322,2.872,406,3.228,968,2.075,989,4.496,990,5.609,991,5.174,992,6.455,993,5.174,994,5.174,995,4.496,996,4.05,997,4.496,998,4.496,999,4.05,1000,5.174,1001,5.174,1002,5.174,1003,5.174,1004,5.174,1005,5.174]],["title/injectables/LocalAuthGuard.html",[114,2.656,192,1.263]],["body/injectables/LocalAuthGuard.html",[12,0.014,18,0.188,19,0.188,20,0.165,23,0.522,27,1.645,51,0.188,52,0.411,53,0.01,54,0.012,55,0.01,114,4.717,179,3.756,192,2.243,193,2.875,322,3.341,986,4.712,987,5.231,1006,5.231,1007,6.02]],["title/injectables/LocalStrategy.html",[170,2.656,192,1.263]],["body/injectables/LocalStrategy.html",[12,0.014,18,0.151,19,0.151,20,0.132,23,0.53,27,1.318,51,0.151,52,0.329,53,0.008,54,0.011,55,0.008,60,0.291,61,1.687,63,1.861,71,1.492,75,0.514,77,1.568,78,1.035,79,0.372,80,1.457,82,1.27,87,1.43,93,1.687,97,2.948,112,4.458,113,3.775,120,3.775,128,2.105,138,2.016,142,1.368,144,2.677,145,1.18,170,4.117,179,3.009,192,1.958,193,2.303,200,2.2,241,4.12,253,2.832,322,2.677,990,5.365,995,4.191,996,3.775,997,4.191,998,4.191,999,3.775,1008,4.191,1009,4.823,1010,4.823,1011,6.174,1012,4.823,1013,4.823,1014,3.775,1015,4.823,1016,4.823,1017,4.823,1018,4.823,1019,4.191,1020,4.823]],["title/classes/LogsSeeding.html",[52,0.272,1021,2.656]],["body/classes/LogsSeeding.html",[12,0.014,18,0.16,19,0.16,20,0.14,23,0.516,51,0.16,52,0.349,53,0.009,54,0.011,55,0.009,60,0.308,69,2.277,71,1.119,75,0.582,77,1.297,78,0.856,79,0.422,80,1.205,176,2.136,200,2.331,210,1.031,256,1.503,320,0.758,322,3.555,323,5.024,324,1.511,342,3.407,344,3.407,346,4.664,351,3.191,352,1.62,355,1.297,357,3.407,359,3.407,360,3.67,361,3.407,362,3.407,365,3.67,672,4.44,805,2.23,999,3.999,1021,4.27,1022,4.44,1023,5.475,1024,5.11,1025,6.404,1026,6.404,1027,5.11,1028,5.11,1029,5.11,1030,5.11,1031,5.11,1032,5.11]],["title/classes/NewPasswordDto.html",[52,0.272,88,2.656]],["body/classes/NewPasswordDto.html",[12,0.014,18,0.159,19,0.159,20,0.139,23,0.374,51,0.159,52,0.435,53,0.009,54,0.011,55,0.009,60,0.306,69,1.804,75,0.53,79,0.384,87,1.378,88,4.25,150,3.774,159,6.02,241,3.87,307,6.058,320,0.752,324,1.504,417,5.539,819,2.671,1033,4.408,1034,5.072,1035,6.375,1036,5.072,1037,7.314,1038,7.314,1039,6.375,1040,6.375,1041,5.072,1042,6.375,1043,6.375,1044,6.971,1045,5.072,1046,5.072,1047,6.375,1048,5.072,1049,5.072,1050,5.072,1051,5.072,1052,5.072]],["title/classes/PaginatedCommentsModel.html",[52,0.272,767,2.861]],["body/classes/PaginatedCommentsModel.html",[12,0.014,18,0.152,19,0.152,20,0.133,51,0.194,52,0.331,53,0.008,54,0.011,55,0.008,60,0.292,75,0.632,79,0.458,320,0.719,324,1.461,327,3.957,337,1.48,368,1.186,605,3.419,608,3.788,609,3.261,709,3.231,749,3.023,750,3.48,767,4.448,797,2.088,805,3.448,915,4.008,916,4.008,922,3.48,1053,6.715,1054,4.211,1055,4.846,1056,4.846,1057,4.846,1058,4.846,1059,4.846,1060,4.846,1061,4.846,1062,3.48,1063,4.846,1064,4.846,1065,4.846]],["title/classes/PaginatedUsersDTO.html",[52,0.272,1066,2.861]],["body/classes/PaginatedUsersDTO.html",[12,0.014,18,0.155,19,0.155,20,0.136,23,0.365,51,0.155,52,0.338,53,0.009,54,0.011,55,0.009,60,0.298,71,1.085,75,0.636,79,0.461,176,2.07,271,3.453,320,0.734,324,1.481,605,3.453,608,3.826,609,3.63,797,2.093,805,3.488,915,4.048,916,4.048,920,5.455,1066,4.509,1067,6.747,1068,4.302,1069,4.951,1070,4.951,1071,4.951,1072,4.951,1073,4.951,1074,4.951]],["title/interfaces/QueryPage.html",[388,2.339,1062,2.861]],["body/interfaces/QueryPage.html",[12,0.014,18,0.187,19,0.187,20,0.164,51,0.221,53,0.01,54,0.012,55,0.01,60,0.361,79,0.425,324,1.663,388,4.14,499,4.007,1062,4.298,1075,5.201,1076,4.684,1077,5.985,1078,5.985]],["title/modules/SharedModule.html",[0,1.363,37,1.995]],["body/modules/SharedModule.html",[0,2.382,2,2.308,3,2.308,4,2.534,5,2.534,6,2.308,7,3.488,8,3.488,12,0.014,15,3.188,16,2.534,17,2.534,18,0.158,19,0.158,20,0.139,22,3.351,23,0.539,27,1.383,37,3.988,51,0.158,52,0.346,53,0.009,54,0.011,55,0.009,58,2.115,71,1.108,133,4.571,319,1.545,355,1.285,567,4.047,973,5.405,978,4.397,979,3.96,980,3.96,981,3.96,982,3.96,983,3.96,984,3.96,1079,4.397,1080,4.397,1081,5.06,1082,5.06,1083,5.06,1084,5.06]],["title/classes/Topic.html",[52,0.272,355,1.011]],["body/classes/Topic.html",[12,0.015,18,0.117,19,0.117,20,0.102,23,0.478,51,0.117,52,0.255,53,0.006,54,0.009,55,0.006,60,0.225,69,2.752,71,1.617,75,0.644,78,1.003,79,0.467,87,1.39,210,0.964,256,1.098,319,2.254,320,0.554,322,2.887,323,4.3,324,1.227,327,3.243,328,2.214,329,2.4,330,2.503,331,2.731,333,2.129,334,4.685,337,1.977,338,2.921,339,4.317,341,4.701,342,3.991,344,3.991,346,4.92,348,3.735,351,2.372,352,1.649,355,1.321,357,3.991,359,2.488,360,4.3,361,3.468,362,2.488,363,2.921,364,2.921,366,2.921,368,0.913,604,2.328,659,2.503,660,4.52,669,3.243,805,2.27,1085,3.243,1086,3.735,1087,3.732,1088,3.732,1089,3.732,1090,3.732,1091,3.732,1092,3.732,1093,3.732,1094,3.732,1095,3.732,1096,3.732,1097,3.732,1098,3.732,1099,3.732,1100,3.732,1101,3.732,1102,3.732,1103,3.732]],["title/modules/TopicModule.html",[0,1.363,548,2.485]],["body/modules/TopicModule.html",[0,2.265,2,2.074,3,2.074,4,2.277,5,2.277,6,2.074,7,3.316,8,2.977,12,0.015,15,2.977,16,2.277,17,2.277,18,0.142,19,0.142,20,0.125,22,3.129,23,0.586,27,1.243,28,2.67,29,1.984,37,3.649,51,0.142,52,0.311,53,0.008,54,0.01,55,0.008,58,2.485,71,1.668,176,1.901,202,3.124,319,1.388,355,1.154,454,3.743,458,2.171,544,2.67,548,5.032,549,3.409,555,1.901,556,3.265,766,3.265,792,3.559,793,3.559,939,4.414,1104,4.547,1105,4.547,1106,4.547,1107,4.547,1108,3.951,1109,4.547,1110,5.943,1111,4.547]],["title/controllers/TopicsController.html",[56,1.902,939,2.656]],["body/controllers/TopicsController.html",[12,0.015,18,0.061,19,0.061,20,0.128,23,0.494,27,0.536,51,0.061,52,0.134,53,0.003,54,0.006,55,0.003,56,0.937,58,0.821,60,0.118,61,0.873,63,2.044,69,2.059,71,1.02,72,5.021,74,1.41,75,0.482,77,1.395,78,1.046,79,0.331,80,1.296,81,4.096,82,1.525,87,1.283,92,3.561,93,1.753,99,1.309,100,4.096,101,2.13,103,2.127,104,1.309,105,1.309,106,1.309,107,2.295,108,2.13,109,3.416,110,1.309,111,0.857,116,1.309,123,2.519,128,2.723,138,3.09,140,3.104,142,1.931,144,3.049,145,1.344,146,3.4,150,1.6,200,0.895,202,1.689,210,0.972,253,2.734,263,1.773,272,1.41,278,2.892,319,1.234,352,1.281,355,1.778,374,1.41,377,2.242,379,2.372,380,1.773,384,3.162,385,1.706,388,2.372,392,1.706,394,2.901,396,2.501,401,1.09,406,4.178,420,1.536,423,4.335,427,1.41,432,1.225,437,0.857,438,1.225,439,0.937,443,1.225,444,1.41,445,1.536,446,1.41,447,1.41,448,1.822,449,1.41,450,3.344,451,1.41,452,1.536,453,2.501,456,1.309,459,3.68,460,3.344,461,1.153,462,1.41,467,1.706,473,1.773,474,3.344,475,1.41,476,4.01,477,3.344,478,2.901,479,2.694,494,3.644,498,1.536,499,0.983,500,1.41,504,2.295,508,2.13,509,2.901,512,1.41,518,2.295,528,1.41,529,1.41,536,1.706,537,1.536,538,3.511,539,3.511,542,1.536,543,2.901,549,1.843,555,0.821,560,2.501,580,1.309,596,1.876,636,2.501,688,1.536,693,2.501,694,4.532,699,1.536,702,1.706,714,1.41,717,2.501,766,1.41,851,4.541,890,1.41,939,2.13,1108,1.706,1112,1.706,1113,1.963,1114,3.195,1115,1.963,1116,1.963,1117,3.195,1118,1.963,1119,1.963,1120,1.706,1121,1.963,1122,1.963,1123,1.706,1124,1.963,1125,1.963,1126,1.963,1127,1.706,1128,1.963,1129,1.963,1130,3.195,1131,1.963,1132,2.901,1133,1.963,1134,1.963,1135,3.195,1136,1.963,1137,1.963,1138,1.963,1139,1.963,1140,1.963,1141,1.963,1142,1.963,1143,1.963,1144,1.963,1145,1.963,1146,1.963,1147,1.963,1148,1.963,1149,1.963,1150,1.963,1151,1.963,1152,1.963,1153,4.656,1154,4.04,1155,4.04,1156,1.963,1157,3.195,1158,1.963,1159,1.963,1160,1.963,1161,3.195,1162,1.963,1163,2.776,1164,1.706,1165,1.963,1166,1.963]],["title/injectables/TopicsService.html",[192,1.263,549,1.817]],["body/injectables/TopicsService.html",[12,0.015,18,0.065,19,0.065,20,0.056,23,0.468,27,0.563,29,0.9,51,0.065,52,0.141,53,0.004,54,0.006,55,0.004,60,0.124,61,0.908,63,2.168,71,0.728,75,0.582,77,1.724,78,1.173,79,0.402,80,1.601,82,1.817,87,1.462,93,1.957,128,2.907,138,2.838,142,1.984,145,0.504,154,1.48,176,0.862,192,1.054,193,0.984,200,1.516,205,3.75,206,4.345,210,1.073,256,0.606,257,1.374,263,2.659,264,1.613,265,1.791,278,1.75,282,1.613,284,2.387,319,0.629,328,1.229,329,1.333,330,2.197,331,1.516,333,1.182,337,0.629,352,1.324,355,1.612,370,1.791,377,2.659,378,2.601,379,1.952,380,1.845,381,1.952,401,2.318,432,2.074,437,0.9,438,1.286,439,0.984,443,1.286,448,1.182,458,0.984,473,2.318,499,2.632,549,1.516,555,0.862,560,2.601,563,2.601,566,3.629,567,3.111,569,4.163,571,3.75,572,2.999,573,3.441,580,2.216,585,2.387,589,2.601,596,2.813,599,1.613,600,1.791,601,1.791,603,2.092,604,2.074,605,1.032,606,2.387,607,1.48,609,1.085,610,1.613,614,3.629,615,1.144,628,1.791,633,1.791,643,2.888,648,1.613,649,1.791,650,1.791,651,1.791,659,1.39,851,3.503,854,1.791,855,1.791,1120,2.888,1132,4.034,1167,1.791,1168,3.324,1169,3.324,1170,4.791,1171,3.324,1172,2.061,1173,2.061,1174,3.324,1175,2.061,1176,2.061,1177,3.324,1178,2.061,1179,2.061,1180,2.061,1181,2.061,1182,3.324,1183,2.061,1184,2.061,1185,3.324,1186,2.061,1187,3.324,1188,2.061,1189,2.061,1190,3.324,1191,2.061,1192,2.061,1193,2.061,1194,2.061,1195,2.061,1196,2.061,1197,3.324,1198,2.061,1199,3.324,1200,2.061,1201,2.061,1202,2.061,1203,1.791,1204,2.061,1205,2.061,1206,3.324,1207,2.061,1208,2.061,1209,2.061,1210,3.324,1211,2.061,1212,2.061,1213,2.061,1214,2.061,1215,2.061,1216,2.061,1217,2.061,1218,3.324,1219,2.061,1220,2.061,1221,2.061,1222,2.061,1223,2.061,1224,3.324,1225,3.324,1226,2.061,1227,2.061,1228,2.061,1229,2.061,1230,2.061,1231,1.791,1232,1.791,1233,2.061,1234,2.061,1235,2.061,1236,2.061,1237,2.061,1238,2.061,1239,2.061,1240,2.061,1241,2.061,1242,2.061,1243,2.061,1244,3.324,1245,2.061,1246,2.061,1247,2.061,1248,1.791,1249,2.061,1250,2.061,1251,2.061,1252,4.176,1253,4.176,1254,2.061,1255,2.061,1256,4.176,1257,4.176,1258,2.061,1259,2.061,1260,2.061,1261,2.061,1262,2.061,1263,2.061,1264,2.061,1265,2.061,1266,2.061,1267,2.061,1268,2.061,1269,2.061]],["title/classes/UpdateCommentDTO.html",[52,0.272,701,2.861]],["body/classes/UpdateCommentDTO.html",[12,0.014,18,0.123,19,0.123,20,0.108,23,0.397,51,0.123,52,0.368,53,0.007,54,0.009,55,0.007,60,0.237,69,2.608,75,0.61,79,0.462,87,1.49,103,2.835,111,1.712,123,2.547,210,0.867,320,0.582,324,1.27,337,1.644,351,3.018,355,1.367,368,1.753,473,4.467,659,2.57,701,3.867,718,4.415,797,2.061,802,5.162,805,2.35,808,3.359,811,2.304,818,3.609,819,2.066,820,3.885,823,3.071,824,5.342,825,5.342,826,5.342,827,5.342,828,6.024,830,3.41,831,3.41,1270,6.491,1271,3.924,1272,3.924,1273,3.924,1274,3.924,1275,3.924]],["title/classes/UpdateCommentModel.html",[52,0.272,1276,3.118]],["body/classes/UpdateCommentModel.html",[12,0.014,18,0.181,19,0.181,20,0.158,23,0.426,51,0.181,52,0.394,53,0.01,54,0.012,55,0.01,60,0.348,75,0.574,79,0.416,87,1.299,210,1.111,320,0.856,324,1.627,337,1.761,368,1.412,470,4.92,659,2.883,708,2.754,741,4.92,743,3.037,744,3.201,748,3.386,749,3.598,750,4.142,1276,5.398]],["title/classes/UpdateModel.html",[52,0.272,469,2.656]],["body/classes/UpdateModel.html",[12,0.014,18,0.157,19,0.157,20,0.138,51,0.157,52,0.343,53,0.009,54,0.011,55,0.009,60,0.303,75,0.648,78,1.062,79,0.47,80,1.719,87,1.468,123,2.253,210,1.02,320,0.745,324,1.495,325,3.654,328,2.343,330,2.901,333,2.253,341,4.224,368,1.229,469,4.224,470,5.254,743,2.645,744,2.788,745,3.349,746,3.931,747,3.607,748,2.949,749,3.134,837,5.254,838,3.931,917,3.931,919,3.607,931,4.365,1277,5.023,1278,5.023]],["title/classes/User.html",[52,0.272,71,0.873]],["body/classes/User.html",[12,0.015,18,0.102,19,0.102,20,0.09,23,0.41,51,0.102,52,0.223,53,0.006,54,0.008,55,0.006,60,0.197,64,3.702,69,2.784,71,1.336,75,0.651,78,0.932,79,0.472,87,1.482,97,2.656,210,0.896,235,3.47,241,3.087,256,0.961,275,3.47,320,0.484,322,2.625,323,3.994,324,1.116,327,2.786,328,2.057,329,2.23,332,2.928,333,1.978,334,5.774,337,1.976,338,3.702,339,3.708,341,4.499,342,3.708,344,3.708,346,5.083,348,3.397,351,2.158,355,1.643,357,3.708,359,2.177,361,3.708,362,2.177,363,2.556,364,2.556,365,2.345,366,2.556,368,1.651,604,2.037,615,2.625,778,2.838,805,2.427,865,4.353,866,3.47,867,3.708,868,3.994,869,3.994,968,1.897,1086,2.951,1203,2.838,1279,2.838,1280,4.73,1281,4.73,1282,4.73,1283,4.73,1284,4.73,1285,3.265,1286,3.265,1287,3.265,1288,3.265,1289,3.265,1290,3.265,1291,3.265,1292,3.265,1293,3.265,1294,3.265,1295,3.265,1296,3.265,1297,3.265,1298,3.265,1299,3.265,1300,3.265,1301,3.265,1302,3.265,1303,3.265,1304,3.265]],["title/controllers/UserController.html",[56,1.902,1305,2.861]],["body/controllers/UserController.html",[12,0.015,18,0.055,19,0.055,20,0.12,23,0.456,27,0.481,51,0.055,52,0.12,53,0.003,54,0.005,55,0.003,56,0.841,58,0.737,60,0.106,61,0.799,63,2.019,69,2.056,71,1.494,75,0.481,77,1.468,78,1.183,79,0.333,80,1.364,81,3.959,82,1.523,87,1.13,92,3.785,93,1.58,97,2.49,99,1.175,100,4.446,101,1.949,102,2.099,103,1.539,104,1.175,105,1.175,106,1.175,108,1.175,109,3.477,110,1.175,111,0.769,116,1.949,120,1.379,123,2.556,128,2.523,134,2.54,138,3.105,140,2.907,142,1.933,144,2.684,145,1.184,146,2.839,150,1.464,176,0.737,202,1.566,210,0.996,213,1.379,215,1.531,220,1.531,253,1.716,260,4.047,262,2.288,271,2.422,272,2.099,278,1.973,337,0.538,339,1.949,352,0.927,374,1.265,376,2.932,377,1.623,379,2.2,380,2.42,381,1.716,382,3.132,384,2.932,388,3.244,394,4.308,396,1.379,406,4.484,423,4.442,427,2.099,444,1.265,445,1.379,446,1.265,447,1.265,448,1.332,449,1.265,450,2.099,451,1.265,452,1.379,453,2.288,459,3.745,460,3.745,461,1.034,462,2.099,473,0.978,474,3.745,475,1.265,476,3.413,477,2.099,479,1.949,494,2.288,499,2.184,500,2.099,503,2.288,504,2.099,507,1.379,508,2.498,509,2.099,510,1.379,512,1.265,518,1.265,528,1.265,529,1.265,537,1.379,541,1.531,542,1.379,543,1.265,561,1.531,596,1.034,605,1.464,608,1.623,609,1.539,636,1.379,688,1.379,692,1.531,693,3.785,694,4.84,698,1.531,699,2.288,714,1.265,717,2.932,732,1.531,866,3.017,893,1.265,915,1.716,916,1.716,1014,1.379,1123,1.531,1127,1.531,1163,2.54,1164,1.531,1305,2.099,1306,1.531,1307,2.923,1308,1.762,1309,1.762,1310,1.762,1311,1.762,1312,1.762,1313,1.531,1314,1.762,1315,6.185,1316,1.762,1317,1.762,1318,1.762,1319,1.762,1320,1.762,1321,4.202,1322,1.762,1323,1.762,1324,1.762,1325,1.762,1326,1.762,1327,1.762,1328,1.762,1329,1.762,1330,2.923,1331,1.531,1332,1.762,1333,1.762,1334,1.762,1335,1.762,1336,1.762,1337,1.762,1338,1.762,1339,2.923,1340,1.762,1341,2.923,1342,2.923,1343,2.923,1344,2.923,1345,1.762,1346,1.762,1347,1.762,1348,1.762,1349,1.762,1350,1.762,1351,2.54,1352,2.923,1353,1.762,1354,2.923,1355,2.923,1356,1.762,1357,2.923,1358,1.762,1359,2.923,1360,1.762,1361,1.762,1362,1.762,1363,1.762,1364,1.762,1365,2.923,1366,1.762,1367,2.923,1368,2.923,1369,1.762,1370,4.36,1371,2.923,1372,1.762,1373,1.762,1374,1.762,1375,1.762,1376,1.762,1377,1.531,1378,1.762,1379,1.531,1380,1.762,1381,1.531,1382,1.762,1383,1.762,1384,1.762,1385,1.762,1386,1.762,1387,1.762,1388,1.762,1389,1.762]],["title/modules/UserModule.html",[0,1.363,14,2.211]],["body/modules/UserModule.html",[0,2.239,2,2.025,3,2.025,4,2.223,5,2.223,6,2.025,7,3.278,8,3.278,12,0.014,14,4.442,15,2.93,16,2.223,17,2.223,18,0.139,19,0.139,20,0.122,22,3.08,23,0.583,27,1.213,28,2.607,29,1.937,37,3.718,51,0.139,52,0.303,53,0.008,54,0.01,55,0.008,58,2.446,71,1.282,133,4.202,176,1.856,180,3.857,202,3.327,319,1.998,355,1.661,454,3.718,458,2.12,549,3.386,555,1.856,556,3.188,979,3.474,980,3.474,981,3.474,982,3.474,983,3.474,984,3.474,1305,4.7,1331,3.857,1390,3.857,1391,4.439,1392,3.857,1393,4.439,1394,4.439,1395,4.439,1396,4.439,1397,4.439]],["title/injectables/UserService.html",[192,1.263,202,1.665]],["body/injectables/UserService.html",[12,0.015,18,0.056,19,0.056,20,0.049,23,0.43,27,0.49,29,0.783,51,0.056,52,0.123,53,0.005,54,0.005,55,0.003,60,0.108,61,0.811,63,2.182,71,1.363,75,0.59,77,1.782,78,1.227,79,0.418,80,1.655,82,1.848,87,1.491,92,2.106,93,2.025,97,2.659,128,3.028,138,2.963,142,1.989,144,1.647,145,1.079,146,1.742,150,0.899,176,0.75,192,0.941,193,0.857,195,2.579,200,1.354,202,1.241,205,2.322,206,2.94,208,2.579,210,1.087,230,3.297,235,2.367,238,1.053,241,2.92,253,2.228,256,0.528,257,1.196,260,4.274,262,1.404,263,1.647,264,1.404,267,1.559,271,0.899,274,4.839,275,1.119,277,1.559,278,1.562,282,1.404,284,1.288,328,0.663,329,0.719,333,0.638,376,2.322,377,2.447,379,2.228,380,1.647,381,1.742,382,2.131,429,2.579,432,1.851,448,1.055,499,3.025,563,2.322,567,2.932,571,2.97,572,2.725,573,3.167,580,1.978,585,2.131,589,2.322,593,2.131,596,2.589,599,1.404,603,2.446,604,1.851,605,0.899,606,3.508,607,3.167,608,0.996,609,0.945,610,2.97,616,1.559,648,1.404,714,1.288,736,1.559,865,4.118,866,3.047,867,1.196,903,1.404,915,1.053,916,1.053,1019,1.559,1066,1.288,1231,2.579,1232,1.559,1313,2.579,1321,2.579,1351,1.559,1377,1.559,1379,1.559,1381,1.559,1398,1.559,1399,2.967,1400,2.967,1401,2.967,1402,2.967,1403,2.967,1404,6.383,1405,3.795,1406,1.794,1407,1.794,1408,1.794,1409,1.794,1410,1.794,1411,2.967,1412,1.794,1413,2.967,1414,1.794,1415,2.967,1416,1.794,1417,1.794,1418,1.794,1419,1.794,1420,2.967,1421,1.794,1422,1.794,1423,2.967,1424,1.794,1425,2.967,1426,1.794,1427,1.794,1428,1.794,1429,1.794,1430,1.794,1431,1.794,1432,1.794,1433,1.794,1434,1.794,1435,1.794,1436,1.794,1437,2.579,1438,1.794,1439,1.794,1440,2.967,1441,1.794,1442,2.967,1443,1.794,1444,1.794,1445,1.794,1446,1.794,1447,1.794,1448,1.794,1449,1.794,1450,1.794,1451,1.794,1452,2.967,1453,1.794,1454,1.794,1455,1.794,1456,3.795,1457,2.967,1458,1.794,1459,1.794,1460,1.794,1461,4.884,1462,2.967,1463,1.794,1464,1.794,1465,1.794,1466,1.794,1467,1.794,1468,1.794,1469,2.967,1470,1.794,1471,1.794,1472,1.794,1473,1.794,1474,1.794]],["title/coverage.html",[1475,4.258]],["body/coverage.html",[6,1.199,12,0.014,20,0.072,35,2.057,52,0.555,53,0.005,54,0.007,55,0.005,56,2.82,57,1.888,59,2.284,68,1.888,71,0.576,79,0.158,88,1.753,112,1.543,114,1.753,145,0.643,169,1.753,170,1.753,192,2.217,194,2.284,202,1.099,243,5.632,260,1.64,319,0.803,321,2.284,327,2.015,337,0.803,355,0.667,368,0.643,372,1.753,373,2.284,388,1.543,403,2.363,437,2.134,439,2.616,441,1.888,442,2.89,454,1.317,461,1.543,464,1.888,465,2.057,466,1.888,469,1.753,470,2.683,549,1.199,559,2.284,567,1.384,615,4.601,658,2.284,677,1.753,678,2.284,686,1.753,701,1.888,704,1.543,709,2.683,741,3.652,742,2.284,743,3.52,754,2.284,767,1.888,795,2.284,796,3.149,821,2.284,822,2.284,823,3.149,836,2.057,837,3.652,840,2.284,851,1.753,852,2.284,853,3.149,863,2.284,864,3.149,883,2.284,884,2.284,886,2.057,887,2.284,888,2.284,890,1.888,891,2.284,893,1.888,894,2.284,896,2.284,914,2.284,923,2.284,939,1.753,946,2.057,947,3.657,948,2.284,949,2.284,959,1.147,985,2.284,986,3.149,989,2.284,1006,2.284,1008,2.284,1021,1.753,1022,2.284,1033,2.284,1053,3.497,1054,3.497,1062,2.89,1066,1.888,1067,2.284,1068,2.284,1076,2.057,1085,2.284,1112,2.284,1167,2.284,1270,2.284,1276,2.057,1279,2.284,1305,1.888,1306,2.284,1398,2.284,1475,2.057,1476,2.629,1477,2.629,1478,2.629,1479,4.024,1480,2.629,1481,2.629,1482,7.114,1483,7.619,1484,2.284,1485,4.024,1486,2.284,1487,2.284,1488,2.284,1489,2.057,1490,2.284,1491,3.149,1492,2.057,1493,2.284,1494,3.149,1495,2.057,1496,2.284,1497,3.149,1498,2.057,1499,2.284,1500,3.149,1501,2.057,1502,2.284,1503,3.149,1504,2.057,1505,2.284,1506,5.131,1507,2.284,1508,2.284,1509,2.284,1510,2.284,1511,2.284,1512,2.284,1513,2.284,1514,2.284,1515,2.284,1516,2.284,1517,2.284,1518,2.284,1519,5.905,1520,4.889,1521,4.024,1522,2.629,1523,2.284,1524,2.284,1525,2.284,1526,2.057,1527,2.284,1528,2.057,1529,2.284,1530,2.057,1531,2.284,1532,2.057,1533,2.284,1534,2.057,1535,6.482,1536,5.905,1537,2.629,1538,5.905,1539,4.889,1540,2.629,1541,2.629,1542,2.629]],["title/classes/createCategories1615383757064.html",[52,0.272,1526,3.118]],["body/classes/createCategories1615383757064.html",[12,0.014,18,0.124,19,0.124,20,0.109,23,0.4,51,0.124,52,0.271,53,0.007,54,0.009,55,0.007,60,0.239,61,1.481,63,1.963,75,0.451,77,1.376,78,1.327,79,0.471,80,1.279,82,1.428,93,1.815,123,1.409,142,1.883,145,0.97,210,0.638,256,1.166,319,1.21,320,0.588,325,2.086,326,2.199,328,1.465,329,1.588,330,1.656,331,1.807,333,1.409,352,2.331,368,1.512,390,2.086,448,1.409,458,1.892,603,1.984,797,1.824,860,3.322,906,1.892,947,3.627,950,2.472,951,2.818,952,2.472,953,2.472,954,2.472,955,3.464,957,2.472,959,2.365,960,2.715,961,1.807,963,1.807,964,1.984,965,1.807,966,1.807,967,3.504,968,2.663,969,1.984,971,1.984,1491,3.101,1525,5.368,1526,4.242,1543,3.443,1544,3.443,1545,2.472,1546,3.429,1547,3.008,1548,3.443,1549,3.443,1550,3.443]],["title/classes/createCategories1621383670928.html",[52,0.272,1492,3.118]],["body/classes/createCategories1621383670928.html",[12,0.014,18,0.125,19,0.125,20,0.109,23,0.402,51,0.125,52,0.272,53,0.007,54,0.009,55,0.007,60,0.24,61,1.487,63,1.966,75,0.453,77,1.382,78,1.328,79,0.472,80,1.284,82,1.433,93,1.82,123,1.417,142,1.888,145,0.975,210,0.642,256,1.172,319,1.217,320,0.591,325,2.098,326,2.212,328,1.474,329,1.598,330,1.666,331,1.818,333,1.417,352,2.335,368,1.517,390,2.098,448,1.417,458,1.903,603,1.996,797,1.827,860,3.329,906,1.903,950,2.482,951,2.826,952,2.482,953,2.482,954,2.482,955,3.468,957,2.482,959,2.375,960,2.725,961,1.818,963,1.818,964,1.996,965,1.818,966,1.818,967,3.508,968,2.67,969,1.996,971,1.996,1490,5.384,1491,3.119,1492,4.259,1543,3.462,1544,3.462,1545,2.486,1546,3.439,1547,3.02,1548,3.462,1549,3.462,1550,3.462]],["title/classes/createComments1615387777376.html",[52,0.272,1532,3.118]],["body/classes/createComments1615387777376.html",[12,0.014,18,0.114,19,0.114,20,0.099,23,0.376,51,0.114,52,0.248,53,0.006,54,0.009,55,0.006,60,0.219,61,1.393,63,1.91,75,0.424,77,1.294,78,1.279,79,0.455,80,1.203,82,1.343,93,1.748,138,2.465,142,2.112,145,1.757,210,1.03,238,2.994,256,1.067,271,1.817,320,0.538,327,3.203,328,1.341,329,1.454,332,1.91,333,1.29,337,1.108,352,2.136,368,1.248,390,1.91,401,2.83,448,1.29,659,1.516,708,1.732,797,1.774,860,1.732,906,1.732,947,3.462,950,2.326,951,2.689,952,2.326,953,2.326,954,2.326,955,3.397,957,2.326,959,2.225,960,2.554,961,1.655,963,1.655,964,3.203,965,1.655,966,1.655,967,3.342,968,2.564,969,1.817,971,1.817,1132,3.662,1500,2.839,1531,5.123,1532,3.99,1546,3.272,1547,2.83,1551,3.152,1552,3.152,1553,3.99,1554,3.99,1555,3.678,1556,4.43,1557,3.678,1558,3.678,1559,3.678,1560,3.678,1561,3.678,1562,4.43,1563,4.43,1564,5.123,1565,3.152,1566,3.152]],["title/classes/createComments1621384210972.html",[52,0.272,1501,3.118]],["body/classes/createComments1621384210972.html",[12,0.014,18,0.114,19,0.114,20,0.1,23,0.378,51,0.114,52,0.249,53,0.006,54,0.009,55,0.006,60,0.22,61,1.398,63,1.913,75,0.426,77,1.299,78,1.28,79,0.455,80,1.207,82,1.348,93,1.752,138,2.472,142,2.114,145,1.759,210,1.032,238,3.005,256,1.073,271,1.826,320,0.541,327,3.211,328,1.349,329,1.462,332,1.92,333,1.297,337,1.114,352,2.14,368,1.252,390,1.92,401,2.84,448,1.297,659,1.524,708,1.741,797,1.777,860,1.741,906,1.741,950,2.334,951,2.697,952,2.334,953,2.334,954,2.334,955,3.401,957,2.334,959,2.233,960,2.563,961,1.663,963,1.663,964,3.211,965,1.663,966,1.663,967,3.347,968,2.57,969,1.826,971,1.826,1132,3.675,1499,5.138,1500,2.854,1501,4.005,1546,3.282,1547,2.84,1551,3.169,1552,3.169,1553,3.999,1554,3.999,1555,3.688,1556,4.447,1557,3.688,1558,3.688,1559,3.688,1560,3.688,1561,3.688,1562,4.447,1563,4.447,1564,5.138,1565,3.169,1566,3.169]],["title/classes/createImage1621383559463.html",[52,0.272,1489,3.118]],["body/classes/createImage1621383559463.html",[12,0.014,18,0.145,19,0.145,20,0.127,23,0.341,51,0.145,52,0.315,53,0.008,54,0.01,55,0.008,60,0.278,61,1.641,63,2.051,75,0.5,77,1.524,78,1.258,79,0.441,80,1.416,82,1.581,93,1.93,142,1.891,145,1.13,210,0.744,256,1.359,320,0.685,352,1.903,448,1.642,797,1.905,860,2.867,870,3.614,906,2.205,912,3.614,950,2.739,951,3.043,952,2.739,953,2.739,954,2.739,955,3.572,957,2.739,959,2.62,960,3.007,961,2.106,962,3.079,963,2.106,964,2.313,965,2.106,966,2.106,967,3.043,968,2.407,969,2.313,970,4.013,971,2.313,972,4.013,1487,5.797,1488,4.013,1489,4.699,1567,4.618,1568,4.618]],["title/classes/createLogSeedings1615471723537.html",[52,0.272,1534,3.118]],["body/classes/createLogSeedings1615471723537.html",[12,0.014,18,0.148,19,0.148,20,0.129,23,0.348,51,0.148,52,0.322,53,0.008,54,0.011,55,0.008,60,0.284,61,1.662,63,2.062,75,0.506,77,1.545,78,1.235,79,0.429,80,1.435,82,1.602,93,1.945,142,1.336,145,1.153,210,0.759,256,1.387,320,0.699,352,2.136,368,1.153,615,2.616,797,1.916,947,3.955,950,2.775,951,3.073,952,2.775,953,2.775,954,2.775,955,3.586,957,2.775,959,2.655,961,2.15,963,2.15,965,2.15,966,2.15,967,2.775,968,1.89,1021,3.142,1023,3.689,1503,3.689,1533,5.853,1534,4.761,1545,2.94,1569,4.095,1570,4.095,1571,2.94,1572,2.94,1573,2.94]],["title/classes/createLogSeedings1621384230860.html",[52,0.272,1504,3.118]],["body/classes/createLogSeedings1621384230860.html",[12,0.014,18,0.149,19,0.149,20,0.13,23,0.35,51,0.149,52,0.324,53,0.008,54,0.011,55,0.008,60,0.286,61,1.67,63,2.066,75,0.508,77,1.551,78,1.238,79,0.43,80,1.441,82,1.609,93,1.95,142,1.346,145,1.161,210,0.764,256,1.396,320,0.704,352,2.143,368,1.161,615,2.634,797,1.919,950,2.787,951,3.083,952,2.787,953,2.787,954,2.787,955,3.59,957,2.787,959,2.667,961,2.165,963,2.165,965,2.165,966,2.165,967,2.787,968,1.903,1021,3.164,1023,3.714,1502,5.873,1503,3.714,1504,4.782,1545,2.961,1569,4.124,1570,4.124,1571,2.961,1572,2.961,1573,2.961]],["title/classes/createTopics1615387637872.html",[52,0.272,1530,3.118]],["body/classes/createTopics1615387637872.html",[12,0.014,18,0.112,19,0.112,20,0.098,23,0.373,51,0.112,52,0.245,53,0.006,54,0.009,55,0.006,60,0.216,61,1.383,63,1.903,75,0.421,77,1.285,78,1.316,79,0.467,80,1.194,82,1.333,93,1.74,142,2.029,145,1.643,210,0.944,238,2.972,256,1.056,271,1.798,320,0.532,328,1.327,329,1.439,330,1.501,331,1.637,332,3.534,333,1.276,352,2.269,355,0.911,368,1.435,390,1.89,401,2.809,448,1.276,555,1.501,603,1.798,659,1.501,797,1.768,860,2.799,906,1.714,947,3.442,950,2.308,951,2.674,952,2.308,953,2.308,954,2.308,955,3.389,957,2.308,959,2.209,960,2.535,961,1.637,963,1.637,964,2.936,965,2.308,966,2.308,967,3.435,968,2.869,969,1.798,971,1.798,1086,2.239,1497,2.809,1529,5.094,1530,3.961,1545,2.239,1546,3.254,1547,2.809,1553,3.657,1554,3.657,1555,3.157,1557,3.157,1558,3.157,1559,3.157,1560,3.157,1561,3.157,1571,2.239,1572,2.239,1573,2.239,1574,3.589,1575,3.119,1576,2.578,1577,3.635,1578,3.119,1579,3.119]],["title/classes/createTopics1621384200326.html",[52,0.272,1498,3.118]],["body/classes/createTopics1621384200326.html",[12,0.014,18,0.109,19,0.109,20,0.096,23,0.366,51,0.109,52,0.238,53,0.006,54,0.009,55,0.006,60,0.21,61,1.355,63,1.885,75,0.412,77,1.259,78,1.31,79,0.465,80,1.169,82,1.306,93,1.717,142,2.092,145,1.737,210,1.012,238,2.911,256,1.026,271,1.746,320,0.517,328,1.289,329,1.398,331,1.59,332,3.737,333,1.24,352,2.187,355,0.885,368,1.412,390,1.836,401,2.752,448,1.24,555,1.457,603,1.746,659,1.457,797,1.751,860,2.367,906,1.665,950,2.261,951,2.631,952,2.261,953,2.261,954,2.261,955,3.366,957,2.261,959,2.163,960,2.483,961,1.59,962,2.324,963,1.59,964,3.147,965,2.261,966,2.261,967,3.414,968,2.908,969,1.746,971,1.746,1086,2.175,1496,5.013,1497,2.728,1498,3.88,1545,2.175,1546,3.202,1547,2.752,1553,3.92,1554,3.92,1555,3.599,1557,3.599,1558,3.599,1559,3.599,1560,3.599,1561,3.599,1571,2.175,1572,2.175,1573,2.175,1575,3.029,1576,2.504,1577,4.143,1578,3.029,1579,3.029,1580,3.486,1581,4.957]],["title/classes/createUsers1615386570301.html",[52,0.272,1528,3.118]],["body/classes/createUsers1615386570301.html",[12,0.015,18,0.106,19,0.106,20,0.093,23,0.359,51,0.106,52,0.232,53,0.006,54,0.008,55,0.006,60,0.205,61,1.331,63,1.869,71,0.745,75,0.405,77,1.236,78,1.34,79,0.479,80,1.149,82,1.283,93,1.698,97,1.624,142,1.864,145,1.392,176,1.421,210,0.784,235,2.121,241,1.887,256,1,271,2.85,275,2.121,320,0.504,328,1.257,329,1.363,331,1.551,333,1.209,351,2.221,352,2.413,368,1.609,448,1.209,615,2.703,797,1.737,860,3.364,866,2.121,867,2.267,868,2.442,869,2.442,906,1.624,947,3.341,950,2.221,951,2.595,952,2.221,953,2.221,954,2.221,955,3.346,957,2.221,959,2.125,960,2.439,961,1.551,962,2.267,963,1.551,964,2.85,965,1.551,966,2.221,967,3.591,968,2.941,969,1.703,971,1.703,1086,2.121,1494,2.661,1527,4.944,1528,3.811,1546,3.158,1547,2.703,1553,3.038,1554,3.038,1555,2.121,1557,2.121,1558,2.121,1559,2.121,1560,2.121,1561,2.121,1571,3.038,1572,2.121,1573,2.121,1576,2.442,1577,2.442,1582,3.4,1583,2.954,1584,4.944,1585,2.954,1586,2.954]],["title/classes/createUsers1621383679414.html",[52,0.272,1495,3.118]],["body/classes/createUsers1621383679414.html",[12,0.015,18,0.108,19,0.108,20,0.095,23,0.364,51,0.108,52,0.237,53,0.006,54,0.009,55,0.006,60,0.209,61,1.348,63,1.881,71,0.759,75,0.411,77,1.253,78,1.339,79,0.478,80,1.164,82,1.3,93,1.712,97,1.654,142,1.877,145,1.407,176,1.448,210,0.794,235,2.16,241,1.922,256,1.019,271,2.879,275,2.16,320,0.514,328,1.281,329,1.388,331,1.58,333,1.231,351,2.25,352,2.397,368,1.62,448,1.231,615,2.739,797,1.748,860,3.382,866,2.16,867,2.309,868,2.487,869,2.487,906,1.654,950,2.25,951,2.622,952,2.25,953,2.25,954,2.25,955,3.361,957,2.25,959,2.153,960,2.471,961,1.58,962,2.309,963,1.58,964,2.471,965,1.58,966,2.25,967,3.582,968,2.954,969,1.734,971,1.734,1086,2.16,1493,4.994,1494,2.71,1495,3.861,1546,3.19,1547,2.739,1553,3.078,1554,3.078,1555,2.16,1557,2.16,1558,2.16,1559,2.16,1560,2.16,1561,2.16,1571,3.078,1572,2.16,1573,2.16,1576,2.487,1577,2.487,1583,3.009,1584,4.287,1585,3.009,1586,3.009,1587,3.463]],["title/dependencies.html",[3,2.186,1588,3.325]],["body/dependencies.html",[3,2.155,12,0.015,24,4.105,25,4.105,27,1.291,29,2.061,33,3.697,34,3.697,40,4.105,41,4.105,52,0.416,53,0.008,54,0.011,55,0.008,111,2.061,175,3.697,179,2.947,256,1.39,406,2.947,446,3.393,447,5.117,819,2.487,902,4.105,903,3.697,904,4.105,996,5.278,1014,3.697,1589,4.724,1590,6.743,1591,4.724,1592,4.724,1593,4.724,1594,4.724,1595,4.724,1596,4.724,1597,4.724,1598,4.724,1599,4.724,1600,4.724,1601,4.724,1602,4.724,1603,4.724,1604,4.724,1605,4.724,1606,4.724,1607,4.724,1608,4.724,1609,4.724,1610,4.724,1611,4.724,1612,4.724,1613,4.724,1614,4.724,1615,6.092,1616,6.092,1617,4.724,1618,4.724,1619,4.724,1620,4.724,1621,4.724,1622,4.724,1623,4.724,1624,6.092,1625,4.724,1626,4.724,1627,4.724,1628,4.724,1629,4.724,1630,4.724,1631,4.724,1632,4.724,1633,4.724,1634,4.724,1635,4.724,1636,4.724,1637,4.724,1638,4.724]],["title/miscellaneous/functions.html",[1639,2.074,1640,4.164]],["body/miscellaneous/functions.html",[6,3.169,12,0.014,53,0.009,54,0.011,55,0.009,60,0.304,77,1.852,78,1.223,79,0.44,80,1.721,82,1.83,93,1.899,351,3.596,1505,4.375,1506,6.963,1507,5.514,1508,4.375,1509,5.514,1510,6.038,1511,4.375,1512,5.514,1513,4.375,1514,5.514,1515,4.375,1516,5.514,1517,4.375,1518,6.038,1524,4.375,1639,3.141,1640,4.375,1641,5.035,1642,5.035,1643,5.035,1644,5.035,1645,5.035,1646,5.035,1647,5.035,1648,5.035,1649,7.294,1650,5.035,1651,5.035,1652,5.035]],["title/index.html",[60,0.2,1248,2.889,1653,3.325]],["body/index.html",[12,0.014,53,0.01,54,0.012,55,0.01,1475,4.427,1654,5.657,1655,7.988,1656,5.657,1657,5.657,1658,5.657,1659,7.897,1660,5.657,1661,5.657,1662,6.817,1663,5.657,1664,5.657,1665,5.657,1666,5.657,1667,6.817,1668,6.817,1669,5.657,1670,5.657,1671,5.657]],["title/modules.html",[2,2.481]],["body/modules.html",[1,4.063,2,2.58,11,3.771,12,0.012,13,3.771,14,3.14,37,2.833,53,0.01,54,0.012,55,0.01,544,3.321,548,3.529,786,3.771,973,3.771,1672,8.112,1673,8.112,1674,8.112,1675,8.112]],["title/overview.html",[1676,4.727]],["body/overview.html",[0,1.187,1,5.202,2,1.582,3,1.582,4,1.737,5,1.737,6,1.582,7,1.737,8,1.737,9,3.014,10,3.014,11,5.174,12,0.014,13,5.36,14,4.335,15,2.474,16,1.737,17,1.737,37,3.826,53,0.006,54,0.009,55,0.006,58,1.45,71,1.373,112,4.161,165,3.014,166,3.014,167,3.014,168,3.014,169,3.836,170,3.836,193,1.656,202,3.126,247,3.014,320,0.515,454,3.549,544,4.674,545,3.014,546,3.014,547,3.014,548,4.946,549,3.232,567,3.814,704,3.681,786,5.263,787,3.014,789,3.014,930,3.014,934,3.014,935,3.014,973,4.984,974,3.014,975,3.014,976,3.014,1075,3.014,1079,3.014,1080,3.014,1390,3.014,1392,3.014,1437,3.014,1676,3.014,1677,3.469,1678,3.469]],["title/miscellaneous/typealiases.html",[1639,2.074,1679,4.792]],["body/miscellaneous/typealiases.html",[12,0.013,53,0.011,54,0.013,55,0.011,60,0.378,79,0.437,499,3.631,843,5.454,1076,4.912,1639,3.916,1680,6.276,1681,6.276]],["title/miscellaneous/variables.html",[1639,2.074,1682,4.164]],["body/miscellaneous/variables.html",[12,0.014,35,5.108,53,0.009,54,0.011,55,0.009,60,0.318,71,1.154,79,0.393,145,1.289,290,4.577,304,4.577,368,1.597,722,4.577,847,4.577,968,2.617,1484,4.577,1486,5.671,1523,4.577,1639,3.286,1682,4.577,1683,5.267,1684,5.267,1685,6.526,1686,5.267,1687,5.267,1688,5.267,1689,6.526,1690,6.526,1691,5.267,1692,5.267,1693,5.267,1694,5.267,1695,5.267,1696,5.267,1697,5.267,1698,5.267,1699,5.267,1700,5.267,1701,5.267,1702,5.267,1703,6.526,1704,5.267,1705,5.267,1706,5.267,1707,5.267,1708,5.267,1709,5.267,1710,5.267,1711,5.267]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"modules/ForumModule.html":{},"classes/Image1621217598627.html":{},"modules/ImageModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"interfaces/QueryPage.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":615,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"coverage.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["0.1.13",{"_index":1625,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":1602,"title":{},"body":{"dependencies.html":{}}}],["0.2.31",{"_index":1636,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":1601,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1623,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":1591,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1482,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1537,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1540,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1522,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1541,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1538,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1483,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1521,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1479,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1539,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1536,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1520,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":603,"title":{"classes/CreateCategoryDTO-1.html":{},"classes/FindAllModel-1.html":{}},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["1.0.0",{"_index":1624,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":1605,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1617,"title":{},"body":{"dependencies.html":{}}}],["1.5.1",{"_index":1589,"title":{},"body":{"dependencies.html":{}}}],["1.amazonaws.com/default",{"_index":1283,"title":{},"body":{"classes/User.html":{}}}],["10",{"_index":1437,"title":{},"body":{"injectables/UserService.html":{},"overview.html":{}}}],["17.4.0",{"_index":1612,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":930,"title":{"classes/FindAllModel-2.html":{}},"body":{"overview.html":{}}}],["2.14.1",{"_index":1620,"title":{},"body":{"dependencies.html":{}}}],["2.9.0",{"_index":1618,"title":{},"body":{"dependencies.html":{}}}],["2.900.0",{"_index":1597,"title":{},"body":{"dependencies.html":{}}}],["27",{"_index":1480,"title":{},"body":{"coverage.html":{}}}],["3.0.2",{"_index":1627,"title":{},"body":{"dependencies.html":{}}}],["3/11",{"_index":1481,"title":{},"body":{"coverage.html":{}}}],["32",{"_index":1043,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["4.0.0",{"_index":1615,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1632,"title":{},"body":{"dependencies.html":{}}}],["4.17.1",{"_index":1603,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":1609,"title":{},"body":{"dependencies.html":{}}}],["4.7.12",{"_index":1595,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":1611,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":1678,"title":{},"body":{"overview.html":{}}}],["401",{"_index":1162,"title":{},"body":{"controllers/TopicsController.html":{}}}],["476a",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["5",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["5.0.0",{"_index":1599,"title":{},"body":{"dependencies.html":{}}}],["5.4.0",{"_index":1607,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1040,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["6.2.5",{"_index":1638,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":1622,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":1629,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":1590,"title":{},"body":{"dependencies.html":{}}}],["7.1.3",{"_index":1594,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1596,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1593,"title":{},"body":{"dependencies.html":{}}}],["7200s",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["8dc3",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["9",{"_index":1677,"title":{},"body":{"overview.html":{}}}],["95b4",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["access_token",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["adapter",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["add",{"_index":1383,"title":{},"body":{"controllers/UserController.html":{}}}],["addavatar",{"_index":376,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["addavatar(req",{"_index":383,"title":{},"body":{"controllers/CategoryController.html":{}}}],["addavatar(request",{"_index":1308,"title":{},"body":{"controllers/UserController.html":{}}}],["addavatar(userid",{"_index":1408,"title":{},"body":{"injectables/UserService.html":{}}}],["addavatar(userid:string",{"_index":1471,"title":{},"body":{"injectables/UserService.html":{}}}],["addimage",{"_index":560,"title":{},"body":{"injectables/CategoryService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{}}}],["addimage(@request",{"_index":1165,"title":{},"body":{"controllers/TopicsController.html":{}}}],["addimage(categoryid",{"_index":570,"title":{},"body":{"injectables/CategoryService.html":{}}}],["addimage(req",{"_index":1115,"title":{},"body":{"controllers/TopicsController.html":{}}}],["addimage(topicid",{"_index":1174,"title":{},"body":{"injectables/TopicsService.html":{}}}],["admin",{"_index":414,"title":{},"body":{"controllers/CategoryController.html":{}}}],["adminfindall",{"_index":377,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["adminfindall():promise",{"_index":1151,"title":{},"body":{"controllers/TopicsController.html":{}}}],["adminfindall(@query",{"_index":505,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["adminfindall(@request",{"_index":1385,"title":{},"body":{"controllers/UserController.html":{}}}],["adminfindall(page",{"_index":575,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{}}}],["adminfindall(query",{"_index":387,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["adminfindall(req",{"_index":1311,"title":{},"body":{"controllers/UserController.html":{}}}],["adminfindone",{"_index":378,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["adminfindone(categoryid",{"_index":395,"title":{},"body":{"controllers/CategoryController.html":{}}}],["adminfindone(id",{"_index":577,"title":{},"body":{"injectables/CategoryService.html":{}}}],["adminfindone(topicid",{"_index":1177,"title":{},"body":{"injectables/TopicsService.html":{}}}],["admingettopicbyid(@param('topicid",{"_index":1144,"title":{},"body":{"controllers/TopicsController.html":{}}}],["administrador",{"_index":495,"title":{},"body":{"controllers/CategoryController.html":{}}}],["adminseed",{"_index":1507,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["adminseed(verifyrun",{"_index":1648,"title":{},"body":{"miscellaneous/functions.html":{}}}],["affected",{"_index":618,"title":{},"body":{"injectables/CategoryService.html":{}}}],["aliases",{"_index":1680,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all.model",{"_index":440,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["all.model.ts",{"_index":923,"title":{},"body":{"classes/FindAllModel-1.html":{},"coverage.html":{}}}],["all.model.ts:4",{"_index":924,"title":{},"body":{"classes/FindAllModel-1.html":{}}}],["all.model.ts:5",{"_index":925,"title":{},"body":{"classes/FindAllModel-1.html":{}}}],["all.model.ts:6",{"_index":928,"title":{},"body":{"classes/FindAllModel-1.html":{}}}],["all.model.ts:7",{"_index":926,"title":{},"body":{"classes/FindAllModel-1.html":{}}}],["all.model.ts:8",{"_index":927,"title":{},"body":{"classes/FindAllModel-1.html":{}}}],["all.model.ts:9",{"_index":929,"title":{},"body":{"classes/FindAllModel-1.html":{}}}],["allusers",{"_index":1440,"title":{},"body":{"injectables/UserService.html":{}}}],["already",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["alterada",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["ao",{"_index":520,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["api",{"_index":438,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{}}}],["apibadrequestresponse",{"_index":459,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["apicreatedresponse",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{}}}],["apiforbiddenresponse",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["apiheader",{"_index":460,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["apiheader({name",{"_index":404,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apiokresponse",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["apiokresponse({description",{"_index":1117,"title":{},"body":{"controllers/TopicsController.html":{}}}],["apiproperty",{"_index":820,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["apiproperty({type",{"_index":811,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["apitags",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["apitags('categories",{"_index":471,"title":{},"body":{"controllers/CategoryController.html":{}}}],["apitags('comments",{"_index":712,"title":{},"body":{"controllers/CommentController.html":{}}}],["apitags('signin",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('topics",{"_index":1137,"title":{},"body":{"controllers/TopicsController.html":{}}}],["apitags('users",{"_index":1333,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":1657,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argument",{"_index":584,"title":{},"body":{"injectables/CategoryService.html":{}}}],["arguments",{"_index":1020,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["argumentshost",{"_index":1013,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["asc",{"_index":1247,"title":{},"body":{"injectables/TopicsService.html":{}}}],["async",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"classes/Image1621217598627.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["auth",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":986,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":462,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["auth/local",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{}}}],["authcontroller",{"_index":57,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":987,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":988,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1007,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":478,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"classes/CreateTopicDTO.html":{},"controllers/TopicsController.html":{}}}],["author).user.id",{"_index":1154,"title":{},"body":{"controllers/TopicsController.html":{}}}],["author.email",{"_index":481,"title":{},"body":{"controllers/CategoryController.html":{}}}],["author.id",{"_index":483,"title":{},"body":{"controllers/CategoryController.html":{}}}],["author.isadmin",{"_index":487,"title":{},"body":{"controllers/CategoryController.html":{}}}],["author.user.id",{"_index":735,"title":{},"body":{"controllers/CommentController.html":{}}}],["authoremail",{"_index":325,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/FindOneModel.html":{},"classes/UpdateModel.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{}}}],["authoremail?:string",{"_index":933,"title":{},"body":{"classes/FindOneModel.html":{}}}],["authorid",{"_index":326,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/FindOneModel.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{}}}],["authorid:string",{"_index":369,"title":{},"body":{"classes/Category.html":{}}}],["authorid?:string",{"_index":932,"title":{},"body":{"classes/FindOneModel.html":{}}}],["authorization",{"_index":850,"title":{},"body":{"classes/CreateSessionDTO.html":{}}}],["authorizationcheck",{"_index":1399,"title":{},"body":{"injectables/UserService.html":{}}}],["authorizationcheck(tokenrequest",{"_index":1411,"title":{},"body":{"injectables/UserService.html":{}}}],["authorized",{"_index":515,"title":{},"body":{"controllers/CategoryController.html":{}}}],["authservice",{"_index":112,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autorizada",{"_index":412,"title":{},"body":{"controllers/CategoryController.html":{}}}],["autorizado",{"_index":525,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["avatar",{"_index":865,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["avatarid",{"_index":1584,"title":{},"body":{"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["await",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"classes/Image1621217598627.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["aws",{"_index":903,"title":{},"body":{"injectables/FilesService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_region",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_s3_bucket_name",{"_index":907,"title":{},"body":{"injectables/FilesService.html":{}}}],["aws_secret_access_key",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["ação",{"_index":411,"title":{},"body":{"controllers/CategoryController.html":{}}}],["backup/migrationsv1/1615383757064",{"_index":1525,"title":{},"body":{"coverage.html":{},"classes/createCategories1615383757064.html":{}}}],["backup/migrationsv1/1615386570301",{"_index":1527,"title":{},"body":{"coverage.html":{},"classes/createUsers1615386570301.html":{}}}],["backup/migrationsv1/1615387637872",{"_index":1529,"title":{},"body":{"coverage.html":{},"classes/createTopics1615387637872.html":{}}}],["backup/migrationsv1/1615387777376",{"_index":1531,"title":{},"body":{"coverage.html":{},"classes/createComments1615387777376.html":{}}}],["backup/migrationsv1/1615471723537",{"_index":1533,"title":{},"body":{"coverage.html":{},"classes/createLogSeedings1615471723537.html":{}}}],["backup/migrationsv1/1621217598627",{"_index":948,"title":{},"body":{"classes/Image1621217598627.html":{},"coverage.html":{}}}],["bad",{"_index":423,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["baseentity",{"_index":323,"title":{},"body":{"classes/Category.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["bcrypt",{"_index":1598,"title":{},"body":{"dependencies.html":{}}}],["bcrypt.hash(userpassword",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["bearer",{"_index":405,"title":{},"body":{"controllers/CategoryController.html":{}}}],["beenn",{"_index":434,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["below",{"_index":1374,"title":{},"body":{"controllers/UserController.html":{}}}],["bio",{"_index":866,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["body",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"injectables/FilesService.html":{},"controllers/TopicsController.html":{},"classes/UpdateCommentDTO.html":{},"controllers/UserController.html":{}}}],["body('email",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["body(validationpipe",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":351,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"classes/UpdateCommentDTO.html":{},"classes/User.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1675,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1672,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":911,"title":{},"body":{"injectables/FilesService.html":{}}}],["buffer",{"_index":572,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/FilesService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["cadastrada",{"_index":492,"title":{},"body":{"controllers/CategoryController.html":{}}}],["cadastrado",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["callingseeders",{"_index":1510,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["caracteres",{"_index":1044,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["caracteres'})@maxlength(32",{"_index":1041,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["cascade",{"_index":1561,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["cat",{"_index":628,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["cat.authorid",{"_index":651,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["cat.created_at",{"_index":1240,"title":{},"body":{"injectables/TopicsService.html":{}}}],["cat.description",{"_index":650,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["cat.id",{"_index":643,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["cat.imagestorage",{"_index":1239,"title":{},"body":{"injectables/TopicsService.html":{}}}],["cat.name",{"_index":649,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["cat.updated_at",{"_index":1241,"title":{},"body":{"injectables/TopicsService.html":{}}}],["catch",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["categoria",{"_index":408,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categoria'})@usepipes(validationpipe",{"_index":418,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categorias",{"_index":496,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categories",{"_index":390,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/FindAllModel-1.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["categories.controller",{"_index":551,"title":{},"body":{"modules/CategoryModule.html":{}}}],["categories.dto.ts",{"_index":888,"title":{},"body":{"classes/DeletedItemCategoryDTO.html":{},"coverage.html":{}}}],["categories.dto.ts:2",{"_index":889,"title":{},"body":{"classes/DeletedItemCategoryDTO.html":{}}}],["categories.service",{"_index":455,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{}}}],["categories/categories.controller",{"_index":940,"title":{},"body":{"modules/ForumModule.html":{}}}],["categories/categories.module",{"_index":792,"title":{},"body":{"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/TopicModule.html":{}}}],["categories/categories.service",{"_index":793,"title":{},"body":{"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/TopicModule.html":{}}}],["category",{"_index":319,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateTopicDTO.html":{},"classes/FindAllModel-1.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{}}}],["category.authoremail",{"_index":625,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.authorid",{"_index":623,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.description",{"_index":626,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.dto",{"_index":457,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["category.dto.ts",{"_index":796,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"coverage.html":{}}}],["category.dto.ts:15",{"_index":816,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.dto.ts:18",{"_index":804,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.dto.ts:21",{"_index":803,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.dto.ts:29",{"_index":809,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.dto.ts:36",{"_index":812,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.dto.ts:39",{"_index":813,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.dto.ts:42",{"_index":817,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.dto.ts:45",{"_index":815,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.dto.ts:48",{"_index":807,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.dto.ts:51",{"_index":806,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.dto.ts:54",{"_index":814,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.dto.ts:7",{"_index":810,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["category.entity",{"_index":669,"title":{},"body":{"classes/Comment.html":{},"classes/Topic.html":{}}}],["category.name",{"_index":624,"title":{},"body":{"injectables/CategoryService.html":{}}}],["category.topics",{"_index":1102,"title":{},"body":{"classes/Topic.html":{}}}],["category=>category.comments",{"_index":676,"title":{},"body":{"classes/Comment.html":{}}}],["category]),sharedmodule",{"_index":1111,"title":{},"body":{"modules/TopicModule.html":{}}}],["category_id",{"_index":854,"title":{},"body":{"classes/CreateTopicDTO.html":{},"injectables/TopicsService.html":{}}}],["categorycontroller",{"_index":372,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"modules/ForumModule.html":{},"coverage.html":{}}}],["categoryexists",{"_index":530,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categoryid",{"_index":401,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["categorymodule",{"_index":544,"title":{"modules/CategoryModule.html":{}},"body":{"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/TopicModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryrepository",{"_index":569,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["categoryseed",{"_index":1512,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["categoryseed(verifyrun",{"_index":1650,"title":{},"body":{"miscellaneous/functions.html":{}}}],["categoryservice",{"_index":454,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["categp",{"_index":497,"title":{},"body":{"controllers/CategoryController.html":{}}}],["categp'})@apibadrequestresponse({description",{"_index":422,"title":{},"body":{"controllers/CategoryController.html":{}}}],["causa",{"_index":982,"title":{},"body":{"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["changepassword",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["changepassword(id",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["check",{"_index":476,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["checkifalreadyexists",{"_index":1400,"title":{},"body":{"injectables/UserService.html":{}}}],["checkifalreadyexists(email",{"_index":1415,"title":{},"body":{"injectables/UserService.html":{}}}],["checktoken",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["checktoken(token",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["checktoken(token:string",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":52,"title":{"classes/Category.html":{},"classes/Comment.html":{},"classes/CommentModel.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"classes/Image1621217598627.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"classes/Topic.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"modules/ForumModule.html":{},"classes/Image1621217598627.html":{},"modules/ImageModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"dependencies.html":{}}}],["classes",{"_index":320,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/CommentModel.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"classes/Image1621217598627.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"classes/Topic.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"overview.html":{}}}],["clean",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":545,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_imports",{"_index":546,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_providers",{"_index":547,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_commentsmodule",{"_index":787,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_commentsmodule_imports",{"_index":788,"title":{},"body":{"modules/CommentsModule.html":{}}}],["cluster_commentsmodule_providers",{"_index":789,"title":{},"body":{"modules/CommentsModule.html":{},"overview.html":{}}}],["cluster_forummodule",{"_index":934,"title":{},"body":{"modules/ForumModule.html":{},"overview.html":{}}}],["cluster_forummodule_exports",{"_index":935,"title":{},"body":{"modules/ForumModule.html":{},"overview.html":{}}}],["cluster_forummodule_imports",{"_index":936,"title":{},"body":{"modules/ForumModule.html":{}}}],["cluster_forummodule_providers",{"_index":937,"title":{},"body":{"modules/ForumModule.html":{}}}],["cluster_imagemodule",{"_index":974,"title":{},"body":{"modules/ImageModule.html":{},"overview.html":{}}}],["cluster_imagemodule_exports",{"_index":975,"title":{},"body":{"modules/ImageModule.html":{},"overview.html":{}}}],["cluster_imagemodule_providers",{"_index":976,"title":{},"body":{"modules/ImageModule.html":{},"overview.html":{}}}],["cluster_sharedmodule",{"_index":1079,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_exports",{"_index":1080,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_imports",{"_index":1081,"title":{},"body":{"modules/SharedModule.html":{}}}],["cluster_sharedmodule_providers",{"_index":1082,"title":{},"body":{"modules/SharedModule.html":{}}}],["cluster_topicmodule",{"_index":1104,"title":{},"body":{"modules/TopicModule.html":{}}}],["cluster_topicmodule_imports",{"_index":1106,"title":{},"body":{"modules/TopicModule.html":{}}}],["cluster_topicmodule_providers",{"_index":1105,"title":{},"body":{"modules/TopicModule.html":{}}}],["cluster_usermodule",{"_index":1390,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1392,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":1391,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1393,"title":{},"body":{"modules/UserModule.html":{}}}],["colocar",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["column",{"_index":346,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["column({default",{"_index":334,"title":{},"body":{"classes/Category.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["columnnames",{"_index":1557,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["columns",{"_index":963,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["com",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/TopicsService.html":{}}}],["com.created_at",{"_index":1244,"title":{},"body":{"injectables/TopicsService.html":{}}}],["com.id",{"_index":1242,"title":{},"body":{"injectables/TopicsService.html":{}}}],["com.textbody",{"_index":1243,"title":{},"body":{"injectables/TopicsService.html":{}}}],["com.topicid",{"_index":1217,"title":{},"body":{"injectables/TopicsService.html":{}}}],["com.updated_at",{"_index":1245,"title":{},"body":{"injectables/TopicsService.html":{}}}],["com.user",{"_index":1222,"title":{},"body":{"injectables/TopicsService.html":{}}}],["com.userid",{"_index":1224,"title":{},"body":{"injectables/TopicsService.html":{}}}],["comentário",{"_index":739,"title":{},"body":{"controllers/CommentController.html":{}}}],["comes",{"_index":846,"title":{},"body":{"classes/CreateSessionDTO.html":{}}}],["comment",{"_index":337,"title":{"classes/Comment.html":{}},"body":{"classes/Category.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/FindAllModel-2.html":{},"modules/ForumModule.html":{},"classes/PaginatedCommentsModel.html":{},"classes/Topic.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"coverage.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["comment.category",{"_index":371,"title":{},"body":{"classes/Category.html":{}}}],["comment.dto",{"_index":706,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["comment.dto.ts",{"_index":823,"title":{},"body":{"classes/CreateCommentDTO.html":{},"classes/UpdateCommentDTO.html":{},"coverage.html":{}}}],["comment.dto.ts:11",{"_index":834,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:12",{"_index":1274,"title":{},"body":{"classes/UpdateCommentDTO.html":{}}}],["comment.dto.ts:19",{"_index":833,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:21",{"_index":1273,"title":{},"body":{"classes/UpdateCommentDTO.html":{}}}],["comment.dto.ts:22",{"_index":829,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:25",{"_index":830,"title":{},"body":{"classes/CreateCommentDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["comment.dto.ts:28",{"_index":831,"title":{},"body":{"classes/CreateCommentDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["comment.dto.ts:31",{"_index":832,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:32",{"_index":1271,"title":{},"body":{"classes/UpdateCommentDTO.html":{}}}],["comment.dto.ts:36",{"_index":1272,"title":{},"body":{"classes/UpdateCommentDTO.html":{}}}],["comment.dto.ts:39",{"_index":835,"title":{},"body":{"classes/CreateCommentDTO.html":{}}}],["comment.dto.ts:45",{"_index":1275,"title":{},"body":{"classes/UpdateCommentDTO.html":{}}}],["comment.textbody",{"_index":775,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.topic",{"_index":780,"title":{},"body":{"injectables/CommentService.html":{}}}],["comment.user",{"_index":778,"title":{},"body":{"injectables/CommentService.html":{},"classes/User.html":{}}}],["commentcontroller",{"_index":677,"title":{"controllers/CommentController.html":{}},"body":{"controllers/CommentController.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"coverage.html":{}}}],["commentmodel",{"_index":709,"title":{"classes/CommentModel.html":{}},"body":{"controllers/CommentController.html":{},"classes/CommentModel.html":{},"classes/PaginatedCommentsModel.html":{},"coverage.html":{}}}],["comments",{"_index":327,"title":{},"body":{"classes/Category.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/FindAllModel-2.html":{},"classes/PaginatedCommentsModel.html":{},"classes/Topic.html":{},"classes/User.html":{},"coverage.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["comments.controller",{"_index":791,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.entity",{"_index":366,"title":{},"body":{"classes/Category.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["comments.service",{"_index":705,"title":{},"body":{"controllers/CommentController.html":{},"modules/CommentsModule.html":{}}}],["comments.topic",{"_index":1103,"title":{},"body":{"classes/Topic.html":{}}}],["comments/comments.controller",{"_index":941,"title":{},"body":{"modules/ForumModule.html":{}}}],["comments/comments.module",{"_index":942,"title":{},"body":{"modules/ForumModule.html":{}}}],["comments/comments.service",{"_index":943,"title":{},"body":{"modules/ForumModule.html":{}}}],["comments:comment",{"_index":1061,"title":{},"body":{"classes/PaginatedCommentsModel.html":{}}}],["commentservice",{"_index":704,"title":{"injectables/CommentService.html":{}},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"coverage.html":{},"overview.html":{}}}],["commentsmodule",{"_index":786,"title":{"modules/CommentsModule.html":{}},"body":{"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":758,"title":{},"body":{"injectables/CommentService.html":{}}}],["commentsseed",{"_index":1514,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["commentsseed(verifyrun",{"_index":1651,"title":{},"body":{"miscellaneous/functions.html":{}}}],["como",{"_index":1343,"title":{},"body":{"controllers/UserController.html":{}}}],["conferem",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["configmodule",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(\"____end____",{"_index":657,"title":{},"body":{"injectables/CategoryService.html":{}}}],["console.log(\"aoba",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(\"token",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('__________end_______________",{"_index":1251,"title":{},"body":{"injectables/TopicsService.html":{}}}],["console.log('__________start_____________",{"_index":1211,"title":{},"body":{"injectables/TopicsService.html":{}}}],["console.log('entroi",{"_index":1347,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('has",{"_index":620,"title":{},"body":{"injectables/CategoryService.html":{}}}],["console.log('page:\\n",{"_index":602,"title":{},"body":{"injectables/CategoryService.html":{}}}],["console.log('this",{"_index":1348,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log('user",{"_index":1454,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(`deleted",{"_index":622,"title":{},"body":{"injectables/CategoryService.html":{}}}],["console.log(clean",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(newpassword",{"_index":1470,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(page",{"_index":501,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["console.log(qb.getquery",{"_index":1256,"title":{},"body":{"injectables/TopicsService.html":{}}}],["console.log(req.headers.authorization",{"_index":1336,"title":{},"body":{"controllers/UserController.html":{}}}],["console.log(req.user",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(update",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(user",{"_index":1468,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(userrequestedtodelete",{"_index":1363,"title":{},"body":{"controllers/UserController.html":{}}}],["const",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["constant",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constructor",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":1009,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(categoryrepository",{"_index":565,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(commentsrepository",{"_index":755,"title":{},"body":{"injectables/CommentService.html":{}}}],["constructor(private",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/UserController.html":{}}}],["constructor(runnedallmigrations",{"_index":1024,"title":{},"body":{"classes/LogsSeeding.html":{}}}],["constructor(runnedallmigrations:boolean",{"_index":1031,"title":{},"body":{"classes/LogsSeeding.html":{}}}],["constructor(topicrepository",{"_index":1172,"title":{},"body":{"injectables/TopicsService.html":{}}}],["constructor(userrepository",{"_index":1406,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["const{id,textbody,updated_at",{"_index":730,"title":{},"body":{"controllers/CommentController.html":{}}}],["context",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":56,"title":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('forum/categories",{"_index":472,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('forum/comments",{"_index":713,"title":{},"body":{"controllers/CommentController.html":{}}}],["controller('forum/topics",{"_index":1138,"title":{},"body":{"controllers/TopicsController.html":{}}}],["controller('users",{"_index":1334,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/CommentController.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":848,"title":{},"body":{"classes/CreateSessionDTO.html":{}}}],["countcomments",{"_index":798,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["counttopics",{"_index":799,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["coverage",{"_index":1475,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":379,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":1349,"title":{},"body":{"controllers/UserController.html":{}}}],["create(createcategorydto",{"_index":402,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createtopicdto",{"_index":1120,"title":{},"body":{"controllers/TopicsController.html":{},"injectables/TopicsService.html":{}}}],["create(createuserdto",{"_index":1313,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(data",{"_index":760,"title":{},"body":{"injectables/CommentService.html":{}}}],["createcategories.ts",{"_index":1491,"title":{},"body":{"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{}}}],["createcategories.ts:5",{"_index":1544,"title":{},"body":{"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{}}}],["createcategories.ts:78",{"_index":1543,"title":{},"body":{"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{}}}],["createcategories1615383757064",{"_index":1526,"title":{"classes/createCategories1615383757064.html":{}},"body":{"coverage.html":{},"classes/createCategories1615383757064.html":{}}}],["createcategories1621383670928",{"_index":1492,"title":{"classes/createCategories1621383670928.html":{}},"body":{"coverage.html":{},"classes/createCategories1621383670928.html":{}}}],["createcategorydto",{"_index":403,"title":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"coverage.html":{}}}],["createcategorydto.authoremail",{"_index":480,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["createcategorydto.authorid",{"_index":482,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["createcategorydto.description",{"_index":627,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createcategorydto.name",{"_index":485,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["createcomment",{"_index":680,"title":{},"body":{"controllers/CommentController.html":{}}}],["createcomment(data",{"_index":685,"title":{},"body":{"controllers/CommentController.html":{}}}],["createcommentdto",{"_index":686,"title":{"classes/CreateCommentDTO.html":{}},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDTO.html":{},"coverage.html":{}}}],["createcommentmodel",{"_index":836,"title":{"classes/CreateCommentModel.html":{}},"body":{"classes/CreateCommentModel.html":{},"coverage.html":{}}}],["createcomments.ts",{"_index":1500,"title":{},"body":{"coverage.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["createcomments.ts:105",{"_index":1551,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["createcomments.ts:12",{"_index":1552,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["createcomments1615387777376",{"_index":1532,"title":{"classes/createComments1615387777376.html":{}},"body":{"coverage.html":{},"classes/createComments1615387777376.html":{}}}],["createcomments1621384210972",{"_index":1501,"title":{"classes/createComments1621384210972.html":{}},"body":{"coverage.html":{},"classes/createComments1621384210972.html":{}}}],["created",{"_index":714,"title":{},"body":{"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["created'})@apibadrequestresponse({description",{"_index":688,"title":{},"body":{"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["created'})@apiforbiddenresponse({description",{"_index":683,"title":{},"body":{"controllers/CommentController.html":{}}}],["created_at",{"_index":328,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"classes/CommentModel.html":{},"classes/Topic.html":{},"injectables/TopicsService.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["created_at:date",{"_index":1278,"title":{},"body":{"classes/UpdateModel.html":{}}}],["created_at:string",{"_index":752,"title":{},"body":{"classes/CommentModel.html":{}}}],["created_at?:date",{"_index":1064,"title":{},"body":{"classes/PaginatedCommentsModel.html":{}}}],["createdatecolumn",{"_index":342,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["createduser",{"_index":1352,"title":{},"body":{"controllers/UserController.html":{}}}],["createimage.ts",{"_index":1488,"title":{},"body":{"coverage.html":{},"classes/createImage1621383559463.html":{}}}],["createimage.ts:32",{"_index":1567,"title":{},"body":{"classes/createImage1621383559463.html":{}}}],["createimage.ts:4",{"_index":1568,"title":{},"body":{"classes/createImage1621383559463.html":{}}}],["createimage1621383559463",{"_index":1489,"title":{"classes/createImage1621383559463.html":{}},"body":{"coverage.html":{},"classes/createImage1621383559463.html":{}}}],["createlogseedings.ts",{"_index":1503,"title":{},"body":{"coverage.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{}}}],["createlogseedings.ts:28",{"_index":1569,"title":{},"body":{"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{}}}],["createlogseedings.ts:4",{"_index":1570,"title":{},"body":{"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{}}}],["createlogseedings1615471723537",{"_index":1534,"title":{"classes/createLogSeedings1615471723537.html":{}},"body":{"coverage.html":{},"classes/createLogSeedings1615471723537.html":{}}}],["createlogseedings1621384230860",{"_index":1504,"title":{"classes/createLogSeedings1621384230860.html":{}},"body":{"coverage.html":{},"classes/createLogSeedings1621384230860.html":{}}}],["createmodel",{"_index":441,"title":{"classes/CreateModel.html":{}},"body":{"controllers/CategoryController.html":{},"classes/CreateModel.html":{},"coverage.html":{}}}],["createquerybuilder",{"_index":969,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["createquerybuilder(\"cat",{"_index":638,"title":{},"body":{"injectables/CategoryService.html":{}}}],["createquerybuilder('t",{"_index":1213,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createsessiondto",{"_index":68,"title":{"classes/CreateSessionDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateSessionDTO.html":{},"coverage.html":{}}}],["createtopicdto",{"_index":851,"title":{"classes/CreateTopicDTO.html":{}},"body":{"classes/CreateTopicDTO.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"coverage.html":{}}}],["createtopicdto.category_id",{"_index":1202,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createtopicdto.name",{"_index":1198,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createtopicdto.textbody",{"_index":1200,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createtopicdto.user_id",{"_index":1201,"title":{},"body":{"injectables/TopicsService.html":{}}}],["createtopics.ts",{"_index":1497,"title":{},"body":{"coverage.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["createtopics.ts:115",{"_index":1574,"title":{},"body":{"classes/createTopics1615387637872.html":{}}}],["createtopics.ts:12",{"_index":1575,"title":{},"body":{"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["createtopics.ts:130",{"_index":1580,"title":{},"body":{"classes/createTopics1621384200326.html":{}}}],["createtopics1615387637872",{"_index":1530,"title":{"classes/createTopics1615387637872.html":{}},"body":{"coverage.html":{},"classes/createTopics1615387637872.html":{}}}],["createtopics1621384200326",{"_index":1498,"title":{"classes/createTopics1621384200326.html":{}},"body":{"coverage.html":{},"classes/createTopics1621384200326.html":{}}}],["createuserdto",{"_index":260,"title":{"classes/CreateUserDTO.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.bio",{"_index":1379,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto.email",{"_index":1351,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto.isadmin",{"_index":1448,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.name",{"_index":1377,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":1381,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuserdto.quarentinenum",{"_index":1450,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.role",{"_index":1447,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.tokenlogout",{"_index":1451,"title":{},"body":{"injectables/UserService.html":{}}}],["createusers.ts",{"_index":1494,"title":{},"body":{"coverage.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["createusers.ts:124",{"_index":1587,"title":{},"body":{"classes/createUsers1621383679414.html":{}}}],["createusers.ts:130",{"_index":1582,"title":{},"body":{"classes/createUsers1615386570301.html":{}}}],["createusers.ts:5",{"_index":1583,"title":{},"body":{"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["createusers1615386570301",{"_index":1528,"title":{"classes/createUsers1615386570301.html":{}},"body":{"coverage.html":{},"classes/createUsers1615386570301.html":{}}}],["createusers1621383679414",{"_index":1495,"title":{"classes/createUsers1621383679414.html":{}},"body":{"coverage.html":{},"classes/createUsers1621383679414.html":{}}}],["credentials",{"_index":1466,"title":{},"body":{"injectables/UserService.html":{}}}],["criada",{"_index":409,"title":{},"body":{"controllers/CategoryController.html":{}}}],["criar",{"_index":416,"title":{},"body":{"controllers/CategoryController.html":{}}}],["crypto",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentpage",{"_index":915,"title":{},"body":{"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["d2cc9f632137",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["data",{"_index":596,"title":{},"body":{"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["data.textbody",{"_index":776,"title":{},"body":{"injectables/CommentService.html":{}}}],["data.topic_id",{"_index":719,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["databuffer",{"_index":901,"title":{},"body":{"injectables/FilesService.html":{}}}],["date",{"_index":341,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/UpdateModel.html":{},"classes/User.html":{}}}],["datetime",{"_index":1546,"title":{},"body":{"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["db",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["de",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["deactivated",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"classes/UpdateCommentDTO.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":368,"title":{},"body":{"classes/Category.html":{},"classes/CommentModel.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FindOneModel.html":{},"classes/PaginatedCommentsModel.html":{},"classes/Topic.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"classes/Image1621217598627.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["deletada",{"_index":522,"title":{},"body":{"controllers/CategoryController.html":{}}}],["deletar",{"_index":521,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["delete",{"_index":448,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/Image1621217598627.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["delete(':id",{"_index":512,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["delete(':id')@useguards(jwtauthguard)@apiokresponse({description",{"_index":692,"title":{},"body":{"controllers/CommentController.html":{},"controllers/UserController.html":{}}}],["delete(id",{"_index":580,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["deletecomment",{"_index":681,"title":{},"body":{"controllers/CommentController.html":{}}}],["deletecomment(@param('id",{"_index":734,"title":{},"body":{"controllers/CommentController.html":{}}}],["deletecomment(id",{"_index":691,"title":{},"body":{"controllers/CommentController.html":{}}}],["deleted",{"_index":508,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["deleted'})@apibadrequestresponse({description",{"_index":427,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["deleted'})@apiforbiddenresponse({description",{"_index":398,"title":{},"body":{"controllers/CategoryController.html":{}}}],["deleted_at",{"_index":329,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/CommentModel.html":{},"classes/Topic.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["deleted_at:string",{"_index":753,"title":{},"body":{"classes/CommentModel.html":{}}}],["deleted_at?:date",{"_index":1065,"title":{},"body":{"classes/PaginatedCommentsModel.html":{}}}],["deletedatecolumn",{"_index":344,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["deleteditem",{"_index":516,"title":{},"body":{"controllers/CategoryController.html":{}}}],["deleteditemcategorydto",{"_index":886,"title":{"classes/DeletedItemCategoryDTO.html":{}},"body":{"classes/DeletedItemCategoryDTO.html":{},"coverage.html":{}}}],["deleteditemtopicdto",{"_index":890,"title":{"classes/DeletedItemTopicDTO.html":{}},"body":{"classes/DeletedItemTopicDTO.html":{},"controllers/TopicsController.html":{},"coverage.html":{}}}],["deleteditemuserdto",{"_index":893,"title":{"classes/DeletedItemUserDTO.html":{}},"body":{"classes/DeletedItemUserDTO.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["deletediten",{"_index":1163,"title":{},"body":{"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["deletemodel",{"_index":466,"title":{"classes/DeleteModel.html":{}},"body":{"controllers/CategoryController.html":{},"classes/DeleteModel.html":{},"coverage.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["desc",{"_index":1255,"title":{},"body":{"injectables/TopicsService.html":{}}}],["description",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FindOneModel.html":{},"controllers/TopicsController.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateModel.html":{},"controllers/UserController.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{}}}],["description:string",{"_index":931,"title":{},"body":{"classes/FindOneModel.html":{},"classes/UpdateModel.html":{}}}],["dev",{"_index":1635,"title":{},"body":{"dependencies.html":{}}}],["deve",{"_index":1037,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["development",{"_index":1658,"title":{},"body":{"index.html":{}}}],["dir",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disable",{"_index":824,"title":{},"body":{"classes/CreateCommentDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["documentation",{"_index":1476,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{}}}],["down",{"_index":952,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["down(queryrunner",{"_index":954,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["dtio",{"_index":711,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["dtio.ts",{"_index":1054,"title":{},"body":{"classes/PaginatedCommentsModel.html":{},"coverage.html":{}}}],["dtio.ts:2",{"_index":1055,"title":{},"body":{"classes/PaginatedCommentsModel.html":{}}}],["dtio.ts:3",{"_index":1056,"title":{},"body":{"classes/PaginatedCommentsModel.html":{}}}],["dtio.ts:4",{"_index":1058,"title":{},"body":{"classes/PaginatedCommentsModel.html":{}}}],["dtio.ts:5",{"_index":1059,"title":{},"body":{"classes/PaginatedCommentsModel.html":{}}}],["dtio.ts:6",{"_index":1057,"title":{},"body":{"classes/PaginatedCommentsModel.html":{}}}],["dtio.ts:7",{"_index":1060,"title":{},"body":{"classes/PaginatedCommentsModel.html":{}}}],["dto",{"_index":1194,"title":{},"body":{"injectables/TopicsService.html":{}}}],["dto/create",{"_index":456,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{}}}],["dto/delete",{"_index":467,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{}}}],["dto/paginated",{"_index":710,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{}}}],["dto/update",{"_index":707,"title":{},"body":{"controllers/CommentController.html":{}}}],["e2e",{"_index":1669,"title":{},"body":{"index.html":{}}}],["east",{"_index":1282,"title":{},"body":{"classes/User.html":{}}}],["edac5915",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["ele",{"_index":983,"title":{},"body":{"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["email",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["entities/category.entity",{"_index":458,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"modules/CommentsModule.html":{},"classes/FindAllModel-1.html":{},"modules/ForumModule.html":{},"modules/TopicModule.html":{},"injectables/TopicsService.html":{},"modules/UserModule.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{}}}],["entities/comments.entity",{"_index":708,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentModel.html":{},"classes/FindAllModel-2.html":{},"modules/ForumModule.html":{},"classes/UpdateCommentModel.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["entities/topic.entity",{"_index":555,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/FindAllModel.html":{},"modules/ForumModule.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"modules/UserModule.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["entities/user.entity",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"classes/Comment.html":{},"modules/CommentsModule.html":{},"classes/LogsSeeding.html":{},"classes/PaginatedUsersDTO.html":{},"modules/TopicModule.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["entity",{"_index":359,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["entity('categories",{"_index":367,"title":{},"body":{"classes/Category.html":{}}}],["entity('comments",{"_index":673,"title":{},"body":{"classes/Comment.html":{}}}],["entity('logsseeding",{"_index":1028,"title":{},"body":{"classes/LogsSeeding.html":{}}}],["entity('topics",{"_index":1100,"title":{},"body":{"classes/Topic.html":{}}}],["entity('users",{"_index":1303,"title":{},"body":{"classes/User.html":{}}}],["enviado",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["erro",{"_index":519,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["error",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["errors",{"_index":1161,"title":{},"body":{"controllers/TopicsController.html":{}}}],["essa",{"_index":526,"title":{},"body":{"controllers/CategoryController.html":{}}}],["esse",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["est",{"_index":524,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["execute",{"_index":971,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["existe",{"_index":491,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["exists",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["expiresin",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"modules/ForumModule.html":{},"classes/Image1621217598627.html":{},"modules/ImageModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"interfaces/QueryPage.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":447,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":384,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["extends",{"_index":322,"title":{},"body":{"classes/Category.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["extname",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":994,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1001,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["faker",{"_index":1606,"title":{},"body":{"dependencies.html":{}}}],["false",{"_index":968,"title":{},"body":{"classes/Image1621217598627.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"miscellaneous/variables.html":{}}}],["falta",{"_index":979,"title":{},"body":{"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["file",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"modules/ForumModule.html":{},"classes/Image1621217598627.html":{},"modules/ImageModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"interfaces/QueryPage.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["file.buffer",{"_index":541,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/UserController.html":{}}}],["file.originalname",{"_index":542,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["fileinterceptor",{"_index":445,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["filename",{"_index":573,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/FilesService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["filesservice",{"_index":567,"title":{"injectables/FilesService.html":{}},"body":{"injectables/CategoryService.html":{},"injectables/FilesService.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["find",{"_index":561,"title":{},"body":{"injectables/CategoryService.html":{},"controllers/UserController.html":{}}}],["find(argument",{"_index":582,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findall",{"_index":380,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findall(@query",{"_index":498,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{}}}],["findall(@request",{"_index":1335,"title":{},"body":{"controllers/UserController.html":{}}}],["findall(page",{"_index":585,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["findall(query",{"_index":420,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{}}}],["findall(req",{"_index":1317,"title":{},"body":{"controllers/UserController.html":{}}}],["findallmodel",{"_index":437,"title":{"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"coverage.html":{}}}],["findbyauthorslug",{"_index":562,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findbyauthorslug(id",{"_index":587,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findbycategory",{"_index":1168,"title":{},"body":{"injectables/TopicsService.html":{}}}],["findbycategory(categoryid",{"_index":1182,"title":{},"body":{"injectables/TopicsService.html":{}}}],["findbyemail",{"_index":1401,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyemail(email",{"_index":1420,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":563,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["findbyid(id",{"_index":589,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["findbyname",{"_index":564,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findbyname(name",{"_index":591,"title":{},"body":{"injectables/CategoryService.html":{}}}],["findbyrecovertoken",{"_index":1402,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyrecovertoken(recovertoken",{"_index":1423,"title":{},"body":{"injectables/UserService.html":{}}}],["findbytoken",{"_index":1403,"title":{},"body":{"injectables/UserService.html":{}}}],["findbytoken(token",{"_index":1425,"title":{},"body":{"injectables/UserService.html":{}}}],["findnoresponse",{"_index":1169,"title":{},"body":{"injectables/TopicsService.html":{}}}],["findnoresponse(id",{"_index":1185,"title":{},"body":{"injectables/TopicsService.html":{}}}],["findone",{"_index":381,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":732,"title":{},"body":{"controllers/CommentController.html":{},"controllers/UserController.html":{}}}],["findone(categoryid",{"_index":425,"title":{},"body":{"controllers/CategoryController.html":{}}}],["findone(id",{"_index":593,"title":{},"body":{"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/UserService.html":{}}}],["findone(iduser",{"_index":1319,"title":{},"body":{"controllers/UserController.html":{}}}],["findone(topicid",{"_index":1187,"title":{},"body":{"injectables/TopicsService.html":{}}}],["findonebytoken",{"_index":1307,"title":{},"body":{"controllers/UserController.html":{}}}],["findonebytoken(@request",{"_index":1346,"title":{},"body":{"controllers/UserController.html":{}}}],["findonebytoken(req",{"_index":1322,"title":{},"body":{"controllers/UserController.html":{}}}],["findonemodel",{"_index":464,"title":{"classes/FindOneModel.html":{}},"body":{"controllers/CategoryController.html":{},"classes/FindOneModel.html":{},"coverage.html":{}}}],["findwithorderby",{"_index":1170,"title":{},"body":{"injectables/TopicsService.html":{}}}],["fk_category_id",{"_index":1563,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["fk_topic_id",{"_index":1562,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["fk_user_id",{"_index":1556,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["foi",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{}}}],["forbidden",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{}}}],["forbidden'})@get('admin/:id",{"_index":399,"title":{},"body":{"controllers/CategoryController.html":{}}}],["forbidden'})@get('admin/list",{"_index":1118,"title":{},"body":{"controllers/TopicsController.html":{}}}],["forbiddenexception",{"_index":1330,"title":{},"body":{"controllers/UserController.html":{}}}],["formidable",{"_index":1604,"title":{},"body":{"dependencies.html":{}}}],["forum/categories",{"_index":375,"title":{},"body":{"controllers/CategoryController.html":{}}}],["forum/categories/categories.service",{"_index":1396,"title":{},"body":{"modules/UserModule.html":{}}}],["forum/comments",{"_index":679,"title":{},"body":{"controllers/CommentController.html":{}}}],["forum/topics",{"_index":1113,"title":{},"body":{"controllers/TopicsController.html":{}}}],["forum/topics/topics.service",{"_index":1395,"title":{},"body":{"modules/UserModule.html":{}}}],["forummodule",{"_index":13,"title":{"modules/ForumModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ForumModule.html":{},"modules.html":{},"overview.html":{}}}],["found",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["founduser",{"_index":1354,"title":{},"body":{"controllers/UserController.html":{}}}],["from(category",{"_index":1549,"title":{},"body":{"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{}}}],["from(comment",{"_index":1565,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["from(image",{"_index":970,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createImage1621383559463.html":{}}}],["from(topic",{"_index":1578,"title":{},"body":{"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["from(user",{"_index":1585,"title":{},"body":{"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["function",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["functions",{"_index":1640,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":1302,"title":{},"body":{"classes/User.html":{}}}],["generationstrategy",{"_index":966,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["get(':id",{"_index":507,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/UserController.html":{}}}],["get(':id')@apiokresponse({description",{"_index":426,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get(':id')@useguards(jwtauthguard)@apiokresponse({description",{"_index":698,"title":{},"body":{"controllers/CommentController.html":{},"controllers/UserController.html":{}}}],["get(':topicid",{"_index":1130,"title":{},"body":{"controllers/TopicsController.html":{}}}],["get('admin",{"_index":503,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/UserController.html":{}}}],["get('admin')@apicreatedresponse({description",{"_index":682,"title":{},"body":{"controllers/CommentController.html":{}}}],["get('admin')@apiokresponse({description",{"_index":389,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get('admin/:id",{"_index":527,"title":{},"body":{"controllers/CategoryController.html":{}}}],["get('admin/:topicid",{"_index":1143,"title":{},"body":{"controllers/TopicsController.html":{}}}],["get('admin/list",{"_index":1150,"title":{},"body":{"controllers/TopicsController.html":{}}}],["get('bycategory/:categoryid",{"_index":1139,"title":{},"body":{"controllers/TopicsController.html":{}}}],["get('findme",{"_index":1345,"title":{},"body":{"controllers/UserController.html":{}}}],["get('logout",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apicreatedresponse({description",{"_index":696,"title":{},"body":{"controllers/CommentController.html":{}}}],["get()@apiokresponse({description",{"_index":421,"title":{},"body":{"controllers/CategoryController.html":{}}}],["getconnection",{"_index":960,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["getmanager",{"_index":598,"title":{},"body":{"injectables/CategoryService.html":{}}}],["getmany",{"_index":656,"title":{},"body":{"injectables/CategoryService.html":{}}}],["getone",{"_index":1250,"title":{},"body":{"injectables/TopicsService.html":{}}}],["getrepository",{"_index":1193,"title":{},"body":{"injectables/TopicsService.html":{}}}],["getrepository(category",{"_index":637,"title":{},"body":{"injectables/CategoryService.html":{}}}],["getrepository(topic",{"_index":1212,"title":{},"body":{"injectables/TopicsService.html":{}}}],["getting",{"_index":1248,"title":{"index.html":{}},"body":{"injectables/TopicsService.html":{}}}],["gettopicbyid",{"_index":1114,"title":{},"body":{"controllers/TopicsController.html":{}}}],["gettopicbyid(@param('topicid",{"_index":1146,"title":{},"body":{"controllers/TopicsController.html":{}}}],["gettopicbyid(topicid",{"_index":1129,"title":{},"body":{"controllers/TopicsController.html":{}}}],["gettopicsbycategory(@param('categoryid",{"_index":1140,"title":{},"body":{"controllers/TopicsController.html":{}}}],["global",{"_index":1608,"title":{},"body":{"dependencies.html":{}}}],["h",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["handlebars",{"_index":1610,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hash",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashing",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashingpassword(userpassword",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasparentecomment",{"_index":825,"title":{},"body":{"classes/CreateCommentDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["hbs",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["headers",{"_index":841,"title":{},"body":{"classes/CreateSessionDTO.html":{}}}],["host",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":450,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["https://plantasia.s3",{"_index":1280,"title":{},"body":{"classes/User.html":{}}}],["httpstatus",{"_index":451,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["httpstatus.bad_request",{"_index":494,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["httpstatus.expectation_failed",{"_index":738,"title":{},"body":{"controllers/CommentController.html":{}}}],["httpstatus.forbidden",{"_index":729,"title":{},"body":{"controllers/CommentController.html":{}}}],["httpstatus.unauthorized",{"_index":724,"title":{},"body":{"controllers/CommentController.html":{}}}],["httpstatus.unprocessable_entity",{"_index":727,"title":{},"body":{"controllers/CommentController.html":{}}}],["id",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FindOneModel.html":{},"classes/Image1621217598627.html":{},"injectables/JwtStrategy.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["id:number",{"_index":1029,"title":{},"body":{"classes/LogsSeeding.html":{}}}],["id:string",{"_index":749,"title":{},"body":{"classes/CommentModel.html":{},"classes/CreateCommentModel.html":{},"classes/FindOneModel.html":{},"classes/PaginatedCommentsModel.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{}}}],["identifier",{"_index":1477,"title":{},"body":{"coverage.html":{}}}],["idparentcomment",{"_index":826,"title":{},"body":{"classes/CreateCommentDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["iduser",{"_index":1321,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ignoreexpiration",{"_index":1002,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":857,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["image.ts",{"_index":949,"title":{},"body":{"classes/Image1621217598627.html":{},"coverage.html":{}}}],["image.ts:33",{"_index":956,"title":{},"body":{"classes/Image1621217598627.html":{}}}],["image.ts:5",{"_index":958,"title":{},"body":{"classes/Image1621217598627.html":{}}}],["image/image.module",{"_index":1084,"title":{},"body":{"modules/SharedModule.html":{}}}],["image/images3.service",{"_index":599,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["image1621217598627",{"_index":946,"title":{"classes/Image1621217598627.html":{}},"body":{"classes/Image1621217598627.html":{},"coverage.html":{}}}],["imagebuffer",{"_index":571,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["imageid",{"_index":1581,"title":{},"body":{"classes/createTopics1621384200326.html":{}}}],["imagemodule",{"_index":973,"title":{"modules/ImageModule.html":{}},"body":{"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["images",{"_index":962,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createImage1621383559463.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["imagestorage",{"_index":330,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateModel.html":{},"classes/CreateTopicDTO.html":{},"classes/FindOneModel.html":{},"classes/Topic.html":{},"injectables/TopicsService.html":{},"classes/UpdateModel.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createTopics1615387637872.html":{}}}],["imagestorage:string",{"_index":839,"title":{},"body":{"classes/CreateModel.html":{},"classes/FindOneModel.html":{}}}],["implements",{"_index":950,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["import",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"modules/ForumModule.html":{},"classes/Image1621217598627.html":{},"modules/ImageModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedUsersDTO.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["imports",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["incorrect",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["increment",{"_index":1572,"title":{},"body":{"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["index",{"_index":60,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"classes/Image1621217598627.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"interfaces/QueryPage.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexorder",{"_index":827,"title":{},"body":{"classes/CreateCommentDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["inexistente",{"_index":726,"title":{},"body":{"controllers/CommentController.html":{}}}],["info",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"modules/ForumModule.html":{},"classes/Image1621217598627.html":{},"modules/ImageModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"interfaces/QueryPage.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["informe",{"_index":1035,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["injectable",{"_index":192,"title":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(category",{"_index":600,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["injectrepository(comment",{"_index":768,"title":{},"body":{"injectables/CommentService.html":{}}}],["injectrepository(topic",{"_index":601,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["injectrepository(user",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["innerjoin('t.category",{"_index":1214,"title":{},"body":{"injectables/TopicsService.html":{}}}],["innerjoin('t.comments",{"_index":1216,"title":{},"body":{"injectables/TopicsService.html":{}}}],["innerjoinandselect",{"_index":1221,"title":{},"body":{"injectables/TopicsService.html":{}}}],["innerjoinandselect('t.user",{"_index":1219,"title":{},"body":{"injectables/TopicsService.html":{}}}],["installation",{"_index":1654,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1656,"title":{},"body":{"index.html":{}}}],["instruções",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["int",{"_index":1571,"title":{},"body":{"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["interface",{"_index":1062,"title":{"interfaces/QueryPage.html":{}},"body":{"classes/PaginatedCommentsModel.html":{},"interfaces/QueryPage.html":{},"coverage.html":{}}}],["interfaces",{"_index":1075,"title":{},"body":{"interfaces/QueryPage.html":{},"overview.html":{}}}],["invalid",{"_index":1019,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["inválido",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["isactive",{"_index":331,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateUserDTO.html":{},"classes/Topic.html":{},"injectables/TopicsService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["isadmin",{"_index":867,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["isempty",{"_index":802,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["isgenerated",{"_index":1573,"title":{},"body":{"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["isnotempty",{"_index":818,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["isnotempty()@apiproperty({type",{"_index":808,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["isnullable",{"_index":967,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["isprimary",{"_index":965,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["isstring",{"_index":1047,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["isstring({message",{"_index":1034,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["isunique",{"_index":1576,"title":{},"body":{"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["iten",{"_index":1164,"title":{},"body":{"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["j",{"_index":490,"title":{},"body":{"controllers/CategoryController.html":{}}}],["joi",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["joi.object",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":364,"title":{},"body":{"classes/Category.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["js",{"_index":1613,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":406,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"injectables/JwtStrategy.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":461,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1000,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":169,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":912,"title":{},"body":{"injectables/FilesService.html":{},"classes/Image1621217598627.html":{},"classes/createImage1621383559463.html":{}}}],["last",{"_index":1249,"title":{},"body":{"injectables/TopicsService.html":{}}}],["lastcomment",{"_index":800,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["lasttopic",{"_index":801,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{}}}],["layoutsdir",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["leftjoinandselect(\"cat.comments\",'com','com.categoryid",{"_index":642,"title":{},"body":{"injectables/CategoryService.html":{}}}],["leftjoinandselect(\"cat.topics\",\"topic\",\"cat.id",{"_index":639,"title":{},"body":{"injectables/CategoryService.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["literal",{"_index":843,"title":{},"body":{"classes/CreateSessionDTO.html":{},"miscellaneous/typealiases.html":{}}}],["ll",{"_index":1375,"title":{},"body":{"controllers/UserController.html":{}}}],["loadrelationcountandmap(\"cat.countcomments\",\"cat.comments",{"_index":645,"title":{},"body":{"injectables/CategoryService.html":{}}}],["loadrelationcountandmap(\"cat.counttopics\",\"cat.topics",{"_index":644,"title":{},"body":{"injectables/CategoryService.html":{}}}],["local",{"_index":1014,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["localauthguard",{"_index":114,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":170,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logged",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["logged'})@apiforbiddenresponse({description",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["login",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["logoff",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/User.html":{}}}],["logout(@request",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(useremail",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["logoutconstant",{"_index":1486,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logsseeding",{"_index":1021,"title":{"classes/LogsSeeding.html":{}},"body":{"classes/LogsSeeding.html":{},"coverage.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{}}}],["mail",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["mailer/mailer.config",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["mailerconfig",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mailermodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule.forroot(mailerconfig",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["maileroptions",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mailerservice",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["manytomany",{"_index":672,"title":{},"body":{"classes/Comment.html":{},"classes/LogsSeeding.html":{}}}],["manytoone",{"_index":360,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{}}}],["manytoone(undefined",{"_index":660,"title":{},"body":{"classes/Comment.html":{},"classes/Topic.html":{}}}],["matching",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"modules/ForumModule.html":{},"classes/Image1621217598627.html":{},"modules/ImageModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"interfaces/QueryPage.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":1049,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["maxlength(32",{"_index":1052,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["message",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"classes/NewPasswordDto.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["metadata",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["method",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"classes/Image1621217598627.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["metodo",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["migrationinterface",{"_index":951,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["minlength",{"_index":1048,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["minlength(6",{"_index":1051,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["miscellaneous",{"_index":1639,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1662,"title":{},"body":{"index.html":{}}}],["model",{"_index":443,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{}}}],["model.dto",{"_index":468,"title":{},"body":{"controllers/CategoryController.html":{}}}],["model.dto.ts",{"_index":884,"title":{},"body":{"classes/DeleteModel.html":{},"coverage.html":{}}}],["model.dto.ts:2",{"_index":885,"title":{},"body":{"classes/DeleteModel.html":{}}}],["model.ts",{"_index":743,"title":{},"body":{"classes/CommentModel.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"coverage.html":{}}}],["model.ts:10",{"_index":921,"title":{},"body":{"classes/FindAllModel.html":{}}}],["model.ts:2",{"_index":746,"title":{},"body":{"classes/CommentModel.html":{},"classes/FindOneModel.html":{},"classes/UpdateModel.html":{}}}],["model.ts:3",{"_index":747,"title":{},"body":{"classes/CommentModel.html":{},"classes/CreateModel.html":{},"classes/FindOneModel.html":{},"classes/UpdateModel.html":{}}}],["model.ts:4",{"_index":748,"title":{},"body":{"classes/CommentModel.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{}}}],["model.ts:5",{"_index":744,"title":{},"body":{"classes/CommentModel.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{}}}],["model.ts:6",{"_index":745,"title":{},"body":{"classes/CommentModel.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"classes/UpdateModel.html":{}}}],["model.ts:7",{"_index":919,"title":{},"body":{"classes/FindAllModel.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"classes/UpdateModel.html":{}}}],["model.ts:8",{"_index":917,"title":{},"body":{"classes/FindAllModel.html":{},"classes/FindAllModel-2.html":{},"classes/UpdateModel.html":{}}}],["model.ts:9",{"_index":918,"title":{},"body":{"classes/FindAllModel.html":{},"classes/FindAllModel-2.html":{}}}],["model/comment",{"_index":742,"title":{},"body":{"classes/CommentModel.html":{},"coverage.html":{}}}],["model/create",{"_index":442,"title":{},"body":{"controllers/CategoryController.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"coverage.html":{}}}],["model/find",{"_index":439,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"coverage.html":{}}}],["model/update",{"_index":470,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"coverage.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/forum/forum.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/mailer",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["modules/profile/user/create",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["modules/profile/user/user.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["modules/profile/user/user.service",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["modules/shared/shared.module",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["multer",{"_index":1616,"title":{},"body":{"dependencies.html":{}}}],["mysql",{"_index":1619,"title":{},"body":{"dependencies.html":{}}}],["máximo",{"_index":1042,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["mínimo",{"_index":1039,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["name",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindOneModel.html":{},"classes/Image1621217598627.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"miscellaneous/functions.html":{}}}],["name:string",{"_index":838,"title":{},"body":{"classes/CreateModel.html":{},"classes/FindOneModel.html":{},"classes/UpdateModel.html":{}}}],["necessary",{"_index":723,"title":{},"body":{"controllers/CommentController.html":{}}}],["nestjs",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"injectables/FilesService.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common/exceptions/http.exception",{"_index":1136,"title":{},"body":{"controllers/TopicsController.html":{}}}],["nestjs/common/pipes/validation.pipe",{"_index":1332,"title":{},"body":{"controllers/UserController.html":{}}}],["nestjs/config",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1592,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":446,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"controllers/TopicsController.html":{},"classes/UpdateCommentDTO.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/TopicModule.html":{},"injectables/TopicsService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"injectables/FilesService.html":{},"classes/Image1621217598627.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"miscellaneous/variables.html":{}}}],["newcategory",{"_index":488,"title":{},"body":{"controllers/CategoryController.html":{}}}],["newcomment",{"_index":781,"title":{},"body":{"injectables/CommentService.html":{}}}],["newpassword",{"_index":1469,"title":{},"body":{"injectables/UserService.html":{}}}],["newpassworddto",{"_index":88,"title":{"classes/NewPasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/NewPasswordDto.html":{},"coverage.html":{}}}],["newpasswordto",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["newtopic",{"_index":1206,"title":{},"body":{"injectables/TopicsService.html":{}}}],["newuser",{"_index":1452,"title":{},"body":{"injectables/UserService.html":{}}}],["nextpage",{"_index":605,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["node",{"_index":1634,"title":{},"body":{"dependencies.html":{}}}],["nodemailer",{"_index":1621,"title":{},"body":{"dependencies.html":{}}}],["nome",{"_index":493,"title":{},"body":{"controllers/CategoryController.html":{}}}],["note",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/UserController.html":{}}}],["notfoundexception",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/UserController.html":{}}}],["notfoundexception('não",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('token",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(`error",{"_index":1356,"title":{},"body":{"controllers/UserController.html":{}}}],["now",{"_index":1547,"title":{},"body":{"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["now_not_used",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["npm",{"_index":1655,"title":{},"body":{"index.html":{}}}],["null",{"_index":604,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"classes/Topic.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["nullpasswordlogout",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["nullpasswordlogout(useremail",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":805,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/LogsSeeding.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"classes/Topic.html":{},"classes/UpdateCommentDTO.html":{},"classes/User.html":{}}}],["não",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["o",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["object",{"_index":847,"title":{},"body":{"classes/CreateSessionDTO.html":{},"miscellaneous/variables.html":{}}}],["ondelete",{"_index":1560,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["one",{"_index":465,"title":{},"body":{"controllers/CategoryController.html":{},"classes/FindOneModel.html":{},"coverage.html":{}}}],["onetomany",{"_index":361,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":338,"title":{},"body":{"classes/Category.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["onetoone",{"_index":363,"title":{},"body":{"classes/Category.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["optional",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"classes/FindOneModel.html":{},"classes/Image1621217598627.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateModel.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["orderby",{"_index":1246,"title":{},"body":{"injectables/TopicsService.html":{}}}],["orderby(\"cat.id\",\"asc",{"_index":655,"title":{},"body":{"injectables/CategoryService.html":{}}}],["orderby(\"lasttopic.updated_at",{"_index":654,"title":{},"body":{"injectables/CategoryService.html":{}}}],["original",{"_index":1384,"title":{},"body":{"controllers/UserController.html":{}}}],["os",{"_index":671,"title":{},"body":{"classes/Comment.html":{}}}],["ou",{"_index":725,"title":{},"body":{"controllers/CommentController.html":{}}}],["out",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":1676,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1588,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":499,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"interfaces/QueryPage.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["page:number",{"_index":1077,"title":{},"body":{"interfaces/QueryPage.html":{}}}],["page:page",{"_index":1078,"title":{},"body":{"interfaces/QueryPage.html":{}}}],["paginated",{"_index":1434,"title":{},"body":{"injectables/UserService.html":{}}}],["paginatedcommentsmodel",{"_index":767,"title":{"classes/PaginatedCommentsModel.html":{}},"body":{"injectables/CommentService.html":{},"classes/PaginatedCommentsModel.html":{},"coverage.html":{}}}],["paginatedusers",{"_index":1339,"title":{},"body":{"controllers/UserController.html":{}}}],["paginatedusersdto",{"_index":1066,"title":{"classes/PaginatedUsersDTO.html":{}},"body":{"classes/PaginatedUsersDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["para",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["param",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["param('id",{"_index":509,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["param('token",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"classes/Image1621217598627.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"miscellaneous/functions.html":{}}}],["parametro",{"_index":1344,"title":{},"body":{"controllers/UserController.html":{}}}],["parseint(page",{"_index":1438,"title":{},"body":{"injectables/UserService.html":{}}}],["partial",{"_index":920,"title":{},"body":{"classes/FindAllModel.html":{},"classes/PaginatedUsersDTO.html":{}}}],["pass",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passamos",{"_index":1341,"title":{},"body":{"controllers/UserController.html":{}}}],["passed",{"_index":694,"title":{},"body":{"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["passport",{"_index":996,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":997,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":998,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["password/:token",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["passwordconfirmation",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"classes/NewPasswordDto.html":{}}}],["passwordfield",{"_index":1016,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passwordlogout",{"_index":1404,"title":{},"body":{"injectables/UserService.html":{}}}],["passwordlogout(id",{"_index":1428,"title":{},"body":{"injectables/UserService.html":{}}}],["passwordlogoutbyemail",{"_index":1405,"title":{},"body":{"injectables/UserService.html":{}}}],["passwordlogoutbyemail(useremail",{"_index":1430,"title":{},"body":{"injectables/UserService.html":{}}}],["patch",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["patch('/reset",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch(':id",{"_index":528,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["patch(':id')@useguards(jwtauthguard)@apiokresponse({description",{"_index":1328,"title":{},"body":{"controllers/UserController.html":{}}}],["path.resolve(__dirname",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":1005,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1004,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pede",{"_index":984,"title":{},"body":{"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["permit",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["permitted",{"_index":543,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["perpage",{"_index":608,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["plantasia.fatec@gmail.com",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plantasia@123",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":636,"title":{},"body":{"injectables/CategoryService.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["pode",{"_index":415,"title":{},"body":{"controllers/CategoryController.html":{}}}],["por",{"_index":981,"title":{},"body":{"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["port",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["post('/send",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('avatar",{"_index":1387,"title":{},"body":{"controllers/UserController.html":{}}}],["post('avatar')@useguards(jwtauthguard)@useinterceptors(undefined",{"_index":1309,"title":{},"body":{"controllers/UserController.html":{}}}],["post('image/:id",{"_index":536,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{}}}],["post('image/:id')@useguards(jwtauthguard)@useinterceptors(undefined",{"_index":385,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{}}}],["post('signin",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useguards(jwtauthguard)@usepipes(validationpipe)@apicreatedresponse({description",{"_index":687,"title":{},"body":{"controllers/CommentController.html":{}}}],["prefix",{"_index":374,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["prevpage",{"_index":916,"title":{},"body":{"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["primarygeneratedcolumn",{"_index":362,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["primarygeneratedcolumn('increment",{"_index":1026,"title":{},"body":{"classes/LogsSeeding.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":348,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["private",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["process.env.aws_public_bucket_name",{"_index":908,"title":{},"body":{"injectables/FilesService.html":{}}}],["process.env.jwt_secret",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.logout_constant",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["process.env.sender_email",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.smtp_host",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.smtp_password",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.smtp_port",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.smtp_user",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1664,"title":{},"body":{"index.html":{}}}],["profile.png",{"_index":1284,"title":{},"body":{"classes/User.html":{}}}],["profile/user/user.service",{"_index":766,"title":{},"body":{"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{}}}],["promise",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"classes/Image1621217598627.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"miscellaneous/functions.html":{}}}],["properties",{"_index":324,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/CommentModel.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"interfaces/QueryPage.html":{},"classes/Topic.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{}}}],["property",{"_index":619,"title":{},"body":{"injectables/CategoryService.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":797,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/Image1621217598627.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"classes/UpdateCommentDTO.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["qb",{"_index":1252,"title":{},"body":{"injectables/TopicsService.html":{}}}],["qb.getmany",{"_index":1257,"title":{},"body":{"injectables/TopicsService.html":{}}}],["qb.orderby('topic.created_at",{"_index":1254,"title":{},"body":{"injectables/TopicsService.html":{}}}],["qb.select",{"_index":1260,"title":{},"body":{"injectables/TopicsService.html":{}}}],["qb.where('topic.categoryid",{"_index":1259,"title":{},"body":{"injectables/TopicsService.html":{}}}],["qb.where('topic.response",{"_index":1258,"title":{},"body":{"injectables/TopicsService.html":{}}}],["quarentinenum",{"_index":868,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/User.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["query",{"_index":394,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["query.page",{"_index":500,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["querypage",{"_index":388,"title":{"interfaces/QueryPage.html":{}},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"interfaces/QueryPage.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["querypage):promise",{"_index":1148,"title":{},"body":{"controllers/TopicsController.html":{}}}],["queryrunner",{"_index":955,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["queryrunner.addcolumn",{"_index":1555,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["queryrunner.clearsqlmemory",{"_index":1548,"title":{},"body":{"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{}}}],["queryrunner.createforeignkey",{"_index":1577,"title":{},"body":{"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["queryrunner.createforeignkey('comments",{"_index":1564,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["queryrunner.createtable",{"_index":961,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["queryrunner.droptable('categories",{"_index":1550,"title":{},"body":{"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{}}}],["queryrunner.droptable('comments",{"_index":1566,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["queryrunner.droptable('images",{"_index":972,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createImage1621383559463.html":{}}}],["queryrunner.droptable('topics",{"_index":1579,"title":{},"body":{"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["queryrunner.droptable('users",{"_index":1586,"title":{},"body":{"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["randombytes",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["randombytes(32).tostring('hex",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["reaction",{"_index":828,"title":{},"body":{"classes/CreateCommentDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["readonly",{"_index":473,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"controllers/UserController.html":{}}}],["recover",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["recovertoken",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["recuperação",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["referencedcolumnnames",{"_index":1558,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["referencedtablename",{"_index":1559,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["reflect",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["rejectunauthorized",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":382,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":513,"title":{},"body":{"controllers/CategoryController.html":{}}}],["remove(id",{"_index":429,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/UserService.html":{}}}],["remove(req",{"_index":1325,"title":{},"body":{"controllers/UserController.html":{}}}],["repository",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["req.headers.authorization",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["request",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"classes/CreateSessionDTO.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["request'})@apicreatedresponse({description",{"_index":1122,"title":{},"body":{"controllers/TopicsController.html":{}}}],["request'})@apiheader({name",{"_index":693,"title":{},"body":{"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["request'})@delete(':id",{"_index":1125,"title":{},"body":{"controllers/TopicsController.html":{}}}],["request'})@get",{"_index":1127,"title":{},"body":{"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["request'})@patch(':id",{"_index":1133,"title":{},"body":{"controllers/TopicsController.html":{}}}],["request'})@post",{"_index":1123,"title":{},"body":{"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["request'})@usepipes(validationpipe",{"_index":689,"title":{},"body":{"controllers/CommentController.html":{}}}],["request.user.id",{"_index":1389,"title":{},"body":{"controllers/UserController.html":{}}}],["requestedname",{"_index":484,"title":{},"body":{"controllers/CategoryController.html":{}}}],["requesteduser",{"_index":1359,"title":{},"body":{"controllers/UserController.html":{}}}],["requesteduser.email",{"_index":1367,"title":{},"body":{"controllers/UserController.html":{}}}],["requesteduser.id",{"_index":1365,"title":{},"body":{"controllers/UserController.html":{}}}],["requesteduser.isadmin",{"_index":1368,"title":{},"body":{"controllers/UserController.html":{}}}],["requesteruser",{"_index":538,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{}}}],["requesteruser).id",{"_index":1155,"title":{},"body":{"controllers/TopicsController.html":{}}}],["requesteruser).isadmin",{"_index":539,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{}}}],["reset",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resetar",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["resetpassword(recovertoken",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetpassword(token",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["resp",{"_index":616,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/UserService.html":{}}}],["resp.affected",{"_index":621,"title":{},"body":{"injectables/CategoryService.html":{}}}],["response",{"_index":1157,"title":{},"body":{"controllers/TopicsController.html":{}}}],["result",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"modules/ForumModule.html":{},"classes/Image1621217598627.html":{},"modules/ImageModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"interfaces/QueryPage.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.map",{"_index":1441,"title":{},"body":{"injectables/UserService.html":{}}}],["results",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"modules/ForumModule.html":{},"classes/Image1621217598627.html":{},"modules/ImageModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"interfaces/QueryPage.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":504,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["returned'})@apibadrequestresponse({description",{"_index":699,"title":{},"body":{"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["returned'})@apiforbiddenresponse({description",{"_index":392,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{}}}],["returns",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"injectables/FilesService.html":{},"classes/Image1621217598627.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1626,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":869,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/User.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["run",{"_index":1659,"title":{},"body":{"index.html":{}}}],["runnedallmigrations",{"_index":1023,"title":{},"body":{"classes/LogsSeeding.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{}}}],["runnedallmigrations:boolean",{"_index":1030,"title":{},"body":{"classes/LogsSeeding.html":{}}}],["rxjs",{"_index":1628,"title":{},"body":{"dependencies.html":{}}}],["s3",{"_index":902,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["s3.upload",{"_index":910,"title":{},"body":{"injectables/FilesService.html":{}}}],["sa",{"_index":1281,"title":{},"body":{"classes/User.html":{}}}],["saltorrounds",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["sdk",{"_index":904,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["sdk/clients/appstream",{"_index":1436,"title":{},"body":{"injectables/UserService.html":{}}}],["secret",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1003,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["seed.ts",{"_index":1506,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeders.ts",{"_index":1509,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seedingid",{"_index":1086,"title":{},"body":{"classes/Topic.html":{},"classes/User.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["seedingid:number",{"_index":1304,"title":{},"body":{"classes/User.html":{}}}],["select",{"_index":648,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["select('cat.name",{"_index":641,"title":{},"body":{"injectables/CategoryService.html":{}}}],["selecteduser",{"_index":1357,"title":{},"body":{"controllers/UserController.html":{}}}],["sendrecoverpasswordemail",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["sendrecoverpasswordemail(email",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["senha",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/NewPasswordDto.html":{}}}],["senhas",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["service",{"_index":980,"title":{},"body":{"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/UserModule.html":{}}}],["shared/shared.module",{"_index":945,"title":{},"body":{"modules/ForumModule.html":{}}}],["sharedmodule",{"_index":37,"title":{"modules/SharedModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["signoptions",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["skip",{"_index":607,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["skip(skip",{"_index":647,"title":{},"body":{"injectables/CategoryService.html":{}}}],["smtps://plantasia.fatec@gmail.com:plantasia@123#@smtp.gmail.com",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["somente",{"_index":413,"title":{},"body":{"controllers/CategoryController.html":{}}}],["source",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"modules/ForumModule.html":{},"classes/Image1621217598627.html":{},"modules/ImageModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"interfaces/QueryPage.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["src/.../admin",{"_index":1641,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../calling",{"_index":1643,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../category",{"_index":1644,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../comments",{"_index":1645,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../logout.ts",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mailer.config.ts",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1642,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../page.ts",{"_index":1681,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../topics",{"_index":1646,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user",{"_index":1647,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:56",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:66",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:103",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:108",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:118",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:139",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:152",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:50",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:81",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:88",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/createsessiondto.ts",{"_index":840,"title":{},"body":{"classes/CreateSessionDTO.html":{},"coverage.html":{}}}],["src/auth/createsessiondto.ts:11",{"_index":845,"title":{},"body":{"classes/CreateSessionDTO.html":{}}}],["src/auth/createsessiondto.ts:19",{"_index":842,"title":{},"body":{"classes/CreateSessionDTO.html":{}}}],["src/auth/createsessiondto.ts:26",{"_index":849,"title":{},"body":{"classes/CreateSessionDTO.html":{}}}],["src/auth/createsessiondto.ts:28",{"_index":844,"title":{},"body":{"classes/CreateSessionDTO.html":{}}}],["src/auth/jwt",{"_index":985,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":989,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:15",{"_index":993,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":991,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local",{"_index":1006,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts",{"_index":1008,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:11",{"_index":1010,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:19",{"_index":1012,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/logout.ts",{"_index":1484,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/newpasswordto.ts",{"_index":1033,"title":{},"body":{"classes/NewPasswordDto.html":{},"coverage.html":{}}}],["src/auth/newpasswordto.ts:13",{"_index":1045,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["src/auth/newpasswordto.ts:15",{"_index":1046,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["src/database/migrations/1621383559463",{"_index":1487,"title":{},"body":{"coverage.html":{},"classes/createImage1621383559463.html":{}}}],["src/database/migrations/1621383670928",{"_index":1490,"title":{},"body":{"coverage.html":{},"classes/createCategories1621383670928.html":{}}}],["src/database/migrations/1621383679414",{"_index":1493,"title":{},"body":{"coverage.html":{},"classes/createUsers1621383679414.html":{}}}],["src/database/migrations/1621384200326",{"_index":1496,"title":{},"body":{"coverage.html":{},"classes/createTopics1621384200326.html":{}}}],["src/database/migrations/1621384210972",{"_index":1499,"title":{},"body":{"coverage.html":{},"classes/createComments1621384210972.html":{}}}],["src/database/migrations/1621384230860",{"_index":1502,"title":{},"body":{"coverage.html":{},"classes/createLogSeedings1621384230860.html":{}}}],["src/database/seeders/admin",{"_index":1505,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/seeders/calling",{"_index":1508,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/seeders/category",{"_index":1511,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/seeders/comments",{"_index":1513,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/seeders/topics",{"_index":1515,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/database/seeders/user",{"_index":1517,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/entities/category.entity.ts",{"_index":321,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/entities/category.entity.ts:21",{"_index":349,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/category.entity.ts:24",{"_index":354,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/category.entity.ts:27",{"_index":335,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/category.entity.ts:30",{"_index":336,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/category.entity.ts:33",{"_index":347,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/category.entity.ts:36",{"_index":350,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/category.entity.ts:39",{"_index":353,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/category.entity.ts:45",{"_index":356,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/category.entity.ts:51",{"_index":340,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/category.entity.ts:54",{"_index":343,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/category.entity.ts:57",{"_index":358,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/category.entity.ts:60",{"_index":345,"title":{},"body":{"classes/Category.html":{}}}],["src/entities/comments.entity.ts",{"_index":658,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{}}}],["src/entities/comments.entity.ts:20",{"_index":664,"title":{},"body":{"classes/Comment.html":{}}}],["src/entities/comments.entity.ts:23",{"_index":665,"title":{},"body":{"classes/Comment.html":{}}}],["src/entities/comments.entity.ts:30",{"_index":668,"title":{},"body":{"classes/Comment.html":{}}}],["src/entities/comments.entity.ts:36",{"_index":666,"title":{},"body":{"classes/Comment.html":{}}}],["src/entities/comments.entity.ts:43",{"_index":661,"title":{},"body":{"classes/Comment.html":{}}}],["src/entities/comments.entity.ts:46",{"_index":667,"title":{},"body":{"classes/Comment.html":{}}}],["src/entities/comments.entity.ts:49",{"_index":662,"title":{},"body":{"classes/Comment.html":{}}}],["src/entities/comments.entity.ts:52",{"_index":663,"title":{},"body":{"classes/Comment.html":{}}}],["src/entities/logsseeding.entity.ts",{"_index":1022,"title":{},"body":{"classes/LogsSeeding.html":{},"coverage.html":{}}}],["src/entities/logsseeding.entity.ts:21",{"_index":1027,"title":{},"body":{"classes/LogsSeeding.html":{}}}],["src/entities/logsseeding.entity.ts:24",{"_index":1025,"title":{},"body":{"classes/LogsSeeding.html":{}}}],["src/entities/topic.entity.ts",{"_index":1085,"title":{},"body":{"classes/Topic.html":{},"coverage.html":{}}}],["src/entities/topic.entity.ts:23",{"_index":1091,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/topic.entity.ts:26",{"_index":1094,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/topic.entity.ts:29",{"_index":1096,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/topic.entity.ts:32",{"_index":1092,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/topic.entity.ts:35",{"_index":1093,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/topic.entity.ts:41",{"_index":1098,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/topic.entity.ts:47",{"_index":1087,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/topic.entity.ts:53",{"_index":1088,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/topic.entity.ts:57",{"_index":1089,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/topic.entity.ts:60",{"_index":1097,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/topic.entity.ts:63",{"_index":1090,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/topic.entity.ts:66",{"_index":1095,"title":{},"body":{"classes/Topic.html":{}}}],["src/entities/user.entity.ts",{"_index":1279,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/entities/user.entity.ts:21",{"_index":1291,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:24",{"_index":1293,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:27",{"_index":1286,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:30",{"_index":1297,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:34",{"_index":1285,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:37",{"_index":1290,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:41",{"_index":1298,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:44",{"_index":1294,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:47",{"_index":1295,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:50",{"_index":1292,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:53",{"_index":1299,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:56",{"_index":1296,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:62",{"_index":1287,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:68",{"_index":1300,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:72",{"_index":1288,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:75",{"_index":1301,"title":{},"body":{"classes/User.html":{}}}],["src/entities/user.entity.ts:78",{"_index":1289,"title":{},"body":{"classes/User.html":{}}}],["src/mailer/mailer.config.ts",{"_index":1523,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1524,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations",{"_index":947,"title":{},"body":{"classes/Image1621217598627.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createComments1615387777376.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createTopics1615387637872.html":{},"classes/createUsers1615386570301.html":{}}}],["src/modules/forum/categories/api",{"_index":837,"title":{},"body":{"classes/CreateModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindOneModel.html":{},"classes/UpdateModel.html":{},"coverage.html":{}}}],["src/modules/forum/categories/categories.controller.ts",{"_index":373,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/modules/forum/categories/categories.controller.ts:104",{"_index":424,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/forum/categories/categories.controller.ts:113",{"_index":393,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/forum/categories/categories.controller.ts:122",{"_index":428,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/forum/categories/categories.controller.ts:146",{"_index":431,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/forum/categories/categories.controller.ts:176",{"_index":400,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/forum/categories/categories.controller.ts:187",{"_index":436,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/forum/categories/categories.controller.ts:212",{"_index":386,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/forum/categories/categories.controller.ts:63",{"_index":419,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/modules/forum/categories/categories.module.ts",{"_index":550,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/modules/forum/categories/categories.service.ts",{"_index":559,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/modules/forum/categories/categories.service.ts:107",{"_index":588,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:116",{"_index":594,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:12",{"_index":568,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:124",{"_index":578,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:133",{"_index":592,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:141",{"_index":581,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:151",{"_index":579,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:163",{"_index":597,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:188",{"_index":574,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:23",{"_index":586,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:78",{"_index":576,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:95",{"_index":583,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/categories.service.ts:99",{"_index":590,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/modules/forum/categories/delete",{"_index":887,"title":{},"body":{"classes/DeletedItemCategoryDTO.html":{},"coverage.html":{}}}],["src/modules/forum/categories/dto/create",{"_index":795,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"coverage.html":{}}}],["src/modules/forum/categories/dto/delete",{"_index":883,"title":{},"body":{"classes/DeleteModel.html":{},"coverage.html":{}}}],["src/modules/forum/categories/dto/update",{"_index":821,"title":{},"body":{"classes/CreateCategoryDTO-1.html":{},"coverage.html":{}}}],["src/modules/forum/comments/api",{"_index":741,"title":{},"body":{"classes/CommentModel.html":{},"classes/CreateCommentModel.html":{},"classes/FindAllModel-2.html":{},"classes/UpdateCommentModel.html":{},"coverage.html":{}}}],["src/modules/forum/comments/comments.controller.ts",{"_index":678,"title":{},"body":{"controllers/CommentController.html":{},"coverage.html":{}}}],["src/modules/forum/comments/comments.controller.ts:118",{"_index":700,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/forum/comments/comments.controller.ts:134",{"_index":695,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/forum/comments/comments.controller.ts:169",{"_index":703,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/forum/comments/comments.controller.ts:49",{"_index":697,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/forum/comments/comments.controller.ts:58",{"_index":684,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/forum/comments/comments.controller.ts:70",{"_index":690,"title":{},"body":{"controllers/CommentController.html":{}}}],["src/modules/forum/comments/comments.module.ts",{"_index":790,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/modules/forum/comments/comments.service.ts",{"_index":754,"title":{},"body":{"injectables/CommentService.html":{},"coverage.html":{}}}],["src/modules/forum/comments/comments.service.ts:14",{"_index":757,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/forum/comments/comments.service.ts:26",{"_index":764,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/forum/comments/comments.service.ts:34",{"_index":759,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/forum/comments/comments.service.ts:43",{"_index":763,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/forum/comments/comments.service.ts:69",{"_index":762,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/forum/comments/comments.service.ts:73",{"_index":761,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/forum/comments/comments.service.ts:91",{"_index":765,"title":{},"body":{"injectables/CommentService.html":{}}}],["src/modules/forum/comments/dto/create",{"_index":822,"title":{},"body":{"classes/CreateCommentDTO.html":{},"coverage.html":{}}}],["src/modules/forum/comments/dto/paginated",{"_index":1053,"title":{},"body":{"classes/PaginatedCommentsModel.html":{},"coverage.html":{}}}],["src/modules/forum/comments/dto/update",{"_index":1270,"title":{},"body":{"classes/UpdateCommentDTO.html":{},"coverage.html":{}}}],["src/modules/forum/forum.module.ts",{"_index":938,"title":{},"body":{"modules/ForumModule.html":{}}}],["src/modules/forum/topics/api",{"_index":914,"title":{},"body":{"classes/FindAllModel.html":{},"coverage.html":{}}}],["src/modules/forum/topics/dto/create",{"_index":852,"title":{},"body":{"classes/CreateTopicDTO.html":{},"coverage.html":{}}}],["src/modules/forum/topics/dto/delete",{"_index":891,"title":{},"body":{"classes/DeletedItemTopicDTO.html":{},"coverage.html":{}}}],["src/modules/forum/topics/topics.controller.ts",{"_index":1112,"title":{},"body":{"controllers/TopicsController.html":{},"coverage.html":{}}}],["src/modules/forum/topics/topics.controller.ts:115",{"_index":1124,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/modules/forum/topics/topics.controller.ts:150",{"_index":1126,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/modules/forum/topics/topics.controller.ts:187",{"_index":1116,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/modules/forum/topics/topics.controller.ts:58",{"_index":1131,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/modules/forum/topics/topics.controller.ts:65",{"_index":1128,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/modules/forum/topics/topics.controller.ts:73",{"_index":1119,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/modules/forum/topics/topics.controller.ts:85",{"_index":1134,"title":{},"body":{"controllers/TopicsController.html":{}}}],["src/modules/forum/topics/topics.module.ts",{"_index":1107,"title":{},"body":{"modules/TopicModule.html":{}}}],["src/modules/forum/topics/topics.service.ts",{"_index":1167,"title":{},"body":{"injectables/TopicsService.html":{},"coverage.html":{}}}],["src/modules/forum/topics/topics.service.ts:12",{"_index":1173,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:124",{"_index":1188,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:133",{"_index":1191,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:192",{"_index":1189,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:199",{"_index":1186,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:206",{"_index":1183,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:225",{"_index":1184,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:233",{"_index":1192,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:239",{"_index":1180,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:242",{"_index":1175,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:30",{"_index":1179,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:44",{"_index":1176,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:48",{"_index":1178,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/forum/topics/topics.service.ts:72",{"_index":1181,"title":{},"body":{"injectables/TopicsService.html":{}}}],["src/modules/image/image.module.ts",{"_index":977,"title":{},"body":{"modules/ImageModule.html":{}}}],["src/modules/image/images3.service",{"_index":978,"title":{},"body":{"modules/ImageModule.html":{},"modules/SharedModule.html":{}}}],["src/modules/image/images3.service.ts",{"_index":896,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/modules/image/images3.service.ts:11",{"_index":900,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/image/images3.service.ts:6",{"_index":898,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/modules/profile/paginated",{"_index":1067,"title":{},"body":{"classes/PaginatedUsersDTO.html":{},"coverage.html":{}}}],["src/modules/profile/user/create",{"_index":863,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["src/modules/profile/user/delete",{"_index":894,"title":{},"body":{"classes/DeletedItemUserDTO.html":{},"coverage.html":{}}}],["src/modules/profile/user/user.controller.ts",{"_index":1306,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/profile/user/user.controller.ts:127",{"_index":1320,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/profile/user/user.controller.ts:153",{"_index":1326,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/profile/user/user.controller.ts:199",{"_index":1329,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/profile/user/user.controller.ts:236",{"_index":1312,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/profile/user/user.controller.ts:244",{"_index":1310,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/profile/user/user.controller.ts:50",{"_index":1318,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/profile/user/user.controller.ts:82",{"_index":1324,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/profile/user/user.controller.ts:97",{"_index":1316,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/profile/user/user.module",{"_index":553,"title":{},"body":{"modules/CategoryModule.html":{},"modules/ForumModule.html":{}}}],["src/modules/profile/user/user.module.ts",{"_index":1394,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/profile/user/user.service",{"_index":463,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/CommentController.html":{}}}],["src/modules/profile/user/user.service.ts",{"_index":1398,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/profile/user/user.service.ts:104",{"_index":1432,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:108",{"_index":1417,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:133",{"_index":1433,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:139",{"_index":1429,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:14",{"_index":1407,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:147",{"_index":1431,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:164",{"_index":1426,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:178",{"_index":1412,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:190",{"_index":1414,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:199",{"_index":1424,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:208",{"_index":1409,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:21",{"_index":1427,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:29",{"_index":1416,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:37",{"_index":1421,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:45",{"_index":1422,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:53",{"_index":1419,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:85",{"_index":1418,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/profile/user/user.service.ts:89",{"_index":1410,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/shared/shared.module",{"_index":556,"title":{},"body":{"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["src/modules/shared/shared.module.ts",{"_index":1083,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/utils/page.ts",{"_index":1076,"title":{},"body":{"interfaces/QueryPage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["start",{"_index":1660,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1663,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1665,"title":{},"body":{"index.html":{}}}],["started",{"_index":1653,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1478,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":518,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["strategy",{"_index":995,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"injectables/LocalStrategy.html":{},"classes/NewPasswordDto.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["string):promise",{"_index":1141,"title":{},"body":{"controllers/TopicsController.html":{}}}],["sua",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["sub",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["succesfful",{"_index":391,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["succesfull",{"_index":1315,"title":{},"body":{"controllers/UserController.html":{}}}],["succesfully",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{}}}],["successful",{"_index":397,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["sucesso",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{}}}],["sucesso!'})@apiforbiddenresponse({description",{"_index":410,"title":{},"body":{"controllers/CategoryController.html":{}}}],["super",{"_index":999,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{}}}],["support",{"_index":1673,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1674,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1630,"title":{},"body":{"dependencies.html":{}}}],["t.categoryid",{"_index":1215,"title":{},"body":{"injectables/TopicsService.html":{}}}],["t.created_at",{"_index":1237,"title":{},"body":{"injectables/TopicsService.html":{}}}],["t.id",{"_index":1218,"title":{},"body":{"injectables/TopicsService.html":{}}}],["t.imagestorage",{"_index":1236,"title":{},"body":{"injectables/TopicsService.html":{}}}],["t.name",{"_index":1234,"title":{},"body":{"injectables/TopicsService.html":{}}}],["t.textbody",{"_index":1235,"title":{},"body":{"injectables/TopicsService.html":{}}}],["t.updated_at",{"_index":1238,"title":{},"body":{"injectables/TopicsService.html":{}}}],["t.userid",{"_index":1220,"title":{},"body":{"injectables/TopicsService.html":{}}}],["table",{"_index":959,"title":{},"body":{"classes/Image1621217598627.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["tablecolumn",{"_index":1553,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["tableforeignkey",{"_index":1554,"title":{},"body":{"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1542,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":606,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/CommentService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["take(take",{"_index":646,"title":{},"body":{"injectables/CategoryService.html":{}}}],["taketopicdata",{"_index":1171,"title":{},"body":{"injectables/TopicsService.html":{}}}],["taketopicdata(topicid",{"_index":1190,"title":{},"body":{"injectables/TopicsService.html":{}}}],["template",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["templates",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ter",{"_index":1038,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["test",{"_index":1668,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":1671,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1670,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1667,"title":{},"body":{"index.html":{}}}],["text",{"_index":860,"title":{},"body":{"classes/CreateTopicDTO.html":{},"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["textbody",{"_index":659,"title":{},"body":{"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateTopicDTO.html":{},"classes/Topic.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["textbody:string",{"_index":750,"title":{},"body":{"classes/CommentModel.html":{},"classes/CreateCommentModel.html":{},"classes/PaginatedCommentsModel.html":{},"classes/UpdateCommentModel.html":{}}}],["this.authservice.checktoken(usertoken",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(req.user",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(req.user.email",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.resetpassword(token",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendrecoverpasswordemail(email",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1017,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.categoryrepository",{"_index":1195,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.categoryrepository.create(category",{"_index":629,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.find",{"_index":613,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.find(argument",{"_index":611,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.findone",{"_index":612,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.findone(category_id",{"_index":1205,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.categoryrepository.findone(categoryid",{"_index":632,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.save(cat",{"_index":630,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.softdelete(id",{"_index":617,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryrepository.update(categoryid",{"_index":631,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.addimage(id",{"_index":540,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.adminfindall(page",{"_index":506,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.create",{"_index":489,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.delete(id",{"_index":517,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall(page",{"_index":502,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findbyid(id",{"_index":531,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findbyid(id)).authorid",{"_index":532,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findbyname(requestedname",{"_index":486,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findone(categoryid",{"_index":511,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id",{"_index":535,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.changepassword(user.id",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.commentservice.adminfindall(page",{"_index":716,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.create(data",{"_index":731,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.delete(id",{"_index":737,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.findall(page",{"_index":715,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.findone(id",{"_index":733,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentservice.update(id",{"_index":740,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.commentsrepository",{"_index":769,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.create(comment",{"_index":782,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.findone",{"_index":772,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.findone(id",{"_index":785,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.save(newcomment",{"_index":783,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.softdelete(id)).generatedmaps",{"_index":774,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.commentsrepository.update(id",{"_index":784,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.filesservice.uploadpublicfile",{"_index":633,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["this.filesservice.uploadpublicfile(imagebuffer",{"_index":1472,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findbyemail(useremail",{"_index":1460,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findbyid(categoryid",{"_index":634,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.findbyid(topicid",{"_index":1268,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.findbyid(userid",{"_index":1473,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findbytoken(tokenrequest",{"_index":1463,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findone(id",{"_index":1467,"title":{},"body":{"injectables/UserService.html":{}}}],["this.findonebytoken(token",{"_index":1360,"title":{},"body":{"controllers/UserController.html":{}}}],["this.hashingpassword(userpassword",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailerservice.sendmail(mail",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.nullpasswordlogout(useremail",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.runnedallmigrations",{"_index":1032,"title":{},"body":{"classes/LogsSeeding.html":{}}}],["this.topicrepository",{"_index":1196,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.create(topic",{"_index":1207,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.createquerybuilder('topic",{"_index":1253,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.find",{"_index":1208,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.findone",{"_index":1210,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.findone(id",{"_index":1266,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.findone(topicid",{"_index":1209,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.softdelete(id",{"_index":1267,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.update(categoryid",{"_index":635,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.topicrepository.update(id",{"_index":1265,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicrepository.update(topicid",{"_index":1269,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.topicservice",{"_index":770,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.topicservice.findone(topic_id",{"_index":777,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.topicsservice.addimage(id,file.buffer",{"_index":1166,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.adminfindall",{"_index":1152,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.adminfindone(topicid",{"_index":1145,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.create(createtopicdto",{"_index":1158,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.findall(page",{"_index":1149,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.findbycategory(categoryid",{"_index":1142,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.findbyid(topic_id",{"_index":721,"title":{},"body":{"controllers/CommentController.html":{}}}],["this.topicsservice.findone(createtopicdto.category_id",{"_index":1159,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.findone(createtopicdto.user_id",{"_index":1160,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.findone(id",{"_index":1153,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.taketopicdata(topicid",{"_index":1147,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.topicsservice.update(id",{"_index":1156,"title":{},"body":{"controllers/TopicsController.html":{}}}],["this.updatepasswordlogout('bearer",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TopicsService.html":{}}}],["this.userrepository.create(user",{"_index":1453,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.delete(id",{"_index":1445,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":1444,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findandcount",{"_index":1439,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.findone(id",{"_index":1457,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(user_id",{"_index":1204,"title":{},"body":{"injectables/TopicsService.html":{}}}],["this.userrepository.save(newuser",{"_index":1455,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.softdelete(id",{"_index":1443,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":1456,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(userid",{"_index":1474,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.update(usertoupdate",{"_index":1459,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice",{"_index":771,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.userservice.addavatar",{"_index":1388,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.adminfindall",{"_index":1386,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.authorizationcheck",{"_index":510,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/UserController.html":{}}}],["this.userservice.authorizationcheck(token",{"_index":477,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["this.userservice.changepassword(id",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.checkifalreadyexists",{"_index":1350,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.create(createuserdto",{"_index":1353,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.delete(id",{"_index":1369,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall(page",{"_index":1340,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(email",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyemail(req.user.email",{"_index":1338,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyemail(useremail",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(authorid",{"_index":534,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.userservice.findbyid(id",{"_index":1362,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(iduser",{"_index":1355,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyrecovertoken(recovertoken",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbytoken(token",{"_index":479,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["this.userservice.findone(iduser",{"_index":1358,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(user.id",{"_index":779,"title":{},"body":{"injectables/CommentService.html":{}}}],["this.userservice.passwordlogout(userid",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.passwordlogoutbyemail",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.update",{"_index":1382,"title":{},"body":{"controllers/UserController.html":{}}}],["thisuser",{"_index":1337,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["tinyint",{"_index":1545,"title":{},"body":{"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["tls",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["token'})@useguards(jwtauthguard)@post()@apicreatedresponse({description",{"_index":407,"title":{},"body":{"controllers/CategoryController.html":{}}}],["tokenlogout",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["tokenrequest",{"_index":1413,"title":{},"body":{"injectables/UserService.html":{}}}],["topic",{"_index":355,"title":{"classes/Topic.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/FindAllModel.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"classes/LogsSeeding.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["topic.category",{"_index":370,"title":{},"body":{"classes/Category.html":{},"injectables/TopicsService.html":{}}}],["topic.categoryid",{"_index":640,"title":{},"body":{"injectables/CategoryService.html":{}}}],["topic.comments",{"_index":675,"title":{},"body":{"classes/Comment.html":{}}}],["topic.created_at",{"_index":1263,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topic.dto",{"_index":1135,"title":{},"body":{"controllers/TopicsController.html":{}}}],["topic.dto.ts",{"_index":853,"title":{},"body":{"classes/CreateTopicDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"coverage.html":{}}}],["topic.dto.ts:11",{"_index":859,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["topic.dto.ts:19",{"_index":861,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["topic.dto.ts:2",{"_index":892,"title":{},"body":{"classes/DeletedItemTopicDTO.html":{}}}],["topic.dto.ts:26",{"_index":858,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["topic.dto.ts:34",{"_index":856,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["topic.dto.ts:42",{"_index":862,"title":{},"body":{"classes/CreateTopicDTO.html":{}}}],["topic.entity",{"_index":365,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/LogsSeeding.html":{},"classes/User.html":{}}}],["topic.id",{"_index":1261,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topic.id','topic.name','topic.updated_at",{"_index":652,"title":{},"body":{"injectables/CategoryService.html":{}}}],["topic.imagestorage",{"_index":1262,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topic.name",{"_index":1197,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topic.textbody",{"_index":1199,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topic.textbody','topic.imagestorage",{"_index":653,"title":{},"body":{"injectables/CategoryService.html":{}}}],["topic.updated_at",{"_index":1264,"title":{},"body":{"injectables/TopicsService.html":{}}}],["topic.user",{"_index":1203,"title":{},"body":{"injectables/TopicsService.html":{},"classes/User.html":{}}}],["topic]),sharedmodule",{"_index":558,"title":{},"body":{"modules/CategoryModule.html":{}}}],["topic_id",{"_index":718,"title":{},"body":{"controllers/CommentController.html":{},"injectables/CommentService.html":{},"classes/CreateCommentDTO.html":{},"classes/UpdateCommentDTO.html":{}}}],["topicalreadyexists",{"_index":720,"title":{},"body":{"controllers/CommentController.html":{}}}],["topicid",{"_index":1132,"title":{},"body":{"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{}}}],["topicmodule",{"_index":548,"title":{"modules/TopicModule.html":{}},"body":{"modules/CategoryModule.html":{},"modules/ForumModule.html":{},"modules/TopicModule.html":{},"modules.html":{},"overview.html":{}}}],["topicrepository",{"_index":566,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["topics",{"_index":332,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/FindAllModel.html":{},"classes/User.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["topics.controller",{"_index":1109,"title":{},"body":{"modules/TopicModule.html":{}}}],["topics.service",{"_index":1108,"title":{},"body":{"modules/TopicModule.html":{},"controllers/TopicsController.html":{}}}],["topics/topics.controller",{"_index":944,"title":{},"body":{"modules/ForumModule.html":{}}}],["topics/topics.module",{"_index":552,"title":{},"body":{"modules/CategoryModule.html":{},"modules/ForumModule.html":{}}}],["topics/topics.service",{"_index":554,"title":{},"body":{"modules/CategoryModule.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{}}}],["topicscontroller",{"_index":939,"title":{"controllers/TopicsController.html":{}},"body":{"modules/ForumModule.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"coverage.html":{}}}],["topicservice",{"_index":756,"title":{},"body":{"injectables/CommentService.html":{}}}],["topicsseed",{"_index":1516,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["topicsseed(verifyrun",{"_index":1652,"title":{},"body":{"miscellaneous/functions.html":{}}}],["topicsservice",{"_index":549,"title":{"injectables/TopicsService.html":{}},"body":{"modules/CategoryModule.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["total",{"_index":610,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["totalregisters",{"_index":609,"title":{},"body":{"injectables/CategoryService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["totalregisters:number",{"_index":922,"title":{},"body":{"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/PaginatedCommentsModel.html":{}}}],["totalregisters:total",{"_index":773,"title":{},"body":{"injectables/CommentService.html":{}}}],["transformer",{"_index":1600,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":352,"title":{},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"classes/Image1621217598627.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["try",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["ts",{"_index":1633,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"injectables/CommentService.html":{},"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateCommentModel.html":{},"classes/CreateModel.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/DeleteModel.html":{},"classes/DeletedItemCategoryDTO.html":{},"classes/DeletedItemTopicDTO.html":{},"classes/DeletedItemUserDTO.html":{},"injectables/FilesService.html":{},"classes/FindAllModel.html":{},"classes/FindAllModel-1.html":{},"classes/FindAllModel-2.html":{},"classes/FindOneModel.html":{},"classes/Image1621217598627.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/NewPasswordDto.html":{},"classes/PaginatedCommentsModel.html":{},"classes/PaginatedUsersDTO.html":{},"interfaces/QueryPage.html":{},"classes/Topic.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/UpdateCommentDTO.html":{},"classes/UpdateCommentModel.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1679,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"injectables/CommentService.html":{},"classes/Image1621217598627.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":557,"title":{},"body":{"modules/CategoryModule.html":{},"modules/ForumModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":794,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([topic",{"_index":1110,"title":{},"body":{"modules/TopicModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forroot",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["tópico",{"_index":728,"title":{},"body":{"controllers/CommentController.html":{}}}],["ui",{"_index":1631,"title":{},"body":{"dependencies.html":{}}}],["um",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{}}}],["uma",{"_index":417,"title":{},"body":{"controllers/CategoryController.html":{},"classes/NewPasswordDto.html":{}}}],["unauthorized",{"_index":1462,"title":{},"body":{"injectables/UserService.html":{}}}],["unauthorizedexception",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"injectables/LocalStrategy.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["unauthorizedexception('error",{"_index":1018,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":339,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/Topic.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["unit",{"_index":1666,"title":{},"body":{"index.html":{}}}],["unprocessableentityexception",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["unprocessableentityexception('as",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["up",{"_index":953,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["up(queryrunner",{"_index":957,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createLogSeedings1615471723537.html":{},"classes/createLogSeedings1621384230860.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["update",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(categoryid",{"_index":595,"title":{},"body":{"injectables/CategoryService.html":{}}}],["update(id",{"_index":432,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["update(iduser",{"_index":1327,"title":{},"body":{"controllers/UserController.html":{}}}],["updatecommentdto",{"_index":701,"title":{"classes/UpdateCommentDTO.html":{}},"body":{"controllers/CommentController.html":{},"classes/UpdateCommentDTO.html":{},"coverage.html":{}}}],["updatecommentmodel",{"_index":1276,"title":{"classes/UpdateCommentModel.html":{}},"body":{"classes/UpdateCommentModel.html":{},"coverage.html":{}}}],["updated",{"_index":529,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["updated'})@apibadrequestresponse({description",{"_index":702,"title":{},"body":{"controllers/CommentController.html":{},"controllers/TopicsController.html":{}}}],["updated'})@apiforbiddenresponse({description",{"_index":435,"title":{},"body":{"controllers/CategoryController.html":{}}}],["updated_at",{"_index":333,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"classes/CommentModel.html":{},"classes/Topic.html":{},"injectables/TopicsService.html":{},"classes/UpdateModel.html":{},"classes/User.html":{},"injectables/UserService.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["updated_at:date",{"_index":1277,"title":{},"body":{"classes/UpdateModel.html":{}}}],["updated_at:string",{"_index":751,"title":{},"body":{"classes/CommentModel.html":{}}}],["updated_at?:date",{"_index":1063,"title":{},"body":{"classes/PaginatedCommentsModel.html":{}}}],["updatedatecolumn",{"_index":357,"title":{},"body":{"classes/Category.html":{},"classes/Comment.html":{},"classes/LogsSeeding.html":{},"classes/Topic.html":{},"classes/User.html":{}}}],["updatemodel",{"_index":469,"title":{"classes/UpdateModel.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateModel.html":{},"coverage.html":{}}}],["updatepasswordlogout",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatepasswordlogout(token",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["uploadedfile",{"_index":453,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["uploadpublicfile",{"_index":897,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadpublicfile(databuffer",{"_index":899,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult",{"_index":909,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadresult.location",{"_index":913,"title":{},"body":{"injectables/FilesService.html":{}}}],["url",{"_index":870,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/Image1621217598627.html":{},"classes/createImage1621383559463.html":{}}}],["use",{"_index":722,"title":{},"body":{"controllers/CommentController.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["useguards",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":474,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@apiokresponse({description",{"_index":396,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@delete(':id')@apiokresponse({description",{"_index":430,"title":{},"body":{"controllers/CategoryController.html":{}}}],["useguards(jwtauthguard)@get('findme",{"_index":1323,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard)@patch(':id')@apiokresponse({description",{"_index":433,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["useguards(jwtauthguard)@usepipes(validationpipe)@apiheader({name",{"_index":1121,"title":{},"body":{"controllers/TopicsController.html":{}}}],["useguards(localauthguard",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@get('logout",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard)@post('signin')@apiokresponse({description",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":452,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":537,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["usepipes",{"_index":449,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["usepipes(validationpipe",{"_index":475,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["usepipes(validationpipe)@apiokresponse({description",{"_index":1314,"title":{},"body":{"controllers/UserController.html":{}}}],["user",{"_index":71,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"classes/Comment.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"modules/ImageModule.html":{},"injectables/LocalStrategy.html":{},"classes/LogsSeeding.html":{},"classes/PaginatedUsersDTO.html":{},"modules/SharedModule.html":{},"classes/Topic.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"injectables/TopicsService.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["user.avatar",{"_index":1232,"title":{},"body":{"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["user.bio",{"_index":1442,"title":{},"body":{"injectables/UserService.html":{}}}],["user.comments",{"_index":674,"title":{},"body":{"classes/Comment.html":{}}}],["user.controller",{"_index":1397,"title":{},"body":{"modules/UserModule.html":{}}}],["user.created_at",{"_index":1233,"title":{},"body":{"injectables/TopicsService.html":{}}}],["user.dto",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":864,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/DeletedItemUserDTO.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":877,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:2",{"_index":895,"title":{},"body":{"classes/DeletedItemUserDTO.html":{}}}],["user.dto.ts:21",{"_index":872,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:24",{"_index":881,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:31",{"_index":871,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:39",{"_index":873,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:47",{"_index":878,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:50",{"_index":875,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:53",{"_index":879,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:55",{"_index":876,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:58",{"_index":882,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:6",{"_index":874,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:61",{"_index":880,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.email",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["user.entity",{"_index":1099,"title":{},"body":{"classes/Topic.html":{}}}],["user.id",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["user.isadmin",{"_index":736,"title":{},"body":{"controllers/CommentController.html":{},"injectables/UserService.html":{}}}],["user.name",{"_index":1231,"title":{},"body":{"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["user.password",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.quarentinenum",{"_index":1449,"title":{},"body":{"injectables/UserService.html":{}}}],["user.recovertoken",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":1446,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":1331,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.tokenlogout",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.topics",{"_index":1101,"title":{},"body":{"classes/Topic.html":{}}}],["user_id",{"_index":855,"title":{},"body":{"classes/CreateTopicDTO.html":{},"injectables/TopicsService.html":{}}}],["useralreadyexists",{"_index":717,"title":{},"body":{"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["usercomment",{"_index":1223,"title":{},"body":{"injectables/TopicsService.html":{}}}],["usercomment.avatar",{"_index":1228,"title":{},"body":{"injectables/TopicsService.html":{}}}],["usercomment.created_at",{"_index":1230,"title":{},"body":{"injectables/TopicsService.html":{}}}],["usercomment.email",{"_index":1229,"title":{},"body":{"injectables/TopicsService.html":{}}}],["usercomment.id",{"_index":1225,"title":{},"body":{"injectables/TopicsService.html":{}}}],["usercomment.name",{"_index":1227,"title":{},"body":{"injectables/TopicsService.html":{}}}],["usercontroller",{"_index":1305,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["useremail",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["userid",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentController.html":{},"injectables/UserService.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{}}}],["userinfo",{"_index":670,"title":{},"body":{"classes/Comment.html":{}}}],["userisauthorized",{"_index":533,"title":{},"body":{"controllers/CategoryController.html":{}}}],["userislogged",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["userlogged",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["usermodule",{"_index":14,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/ForumModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{}}}],["usernamefield",{"_index":1015,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userpassword",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["userrepository",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TopicsService.html":{},"injectables/UserService.html":{}}}],["userrequestedtodelete",{"_index":1361,"title":{},"body":{"controllers/UserController.html":{}}}],["userrequestedtodelete.email",{"_index":1366,"title":{},"body":{"controllers/UserController.html":{}}}],["userrequestedtodelete.id",{"_index":1364,"title":{},"body":{"controllers/UserController.html":{}}}],["userrequestedtoupdate",{"_index":1370,"title":{},"body":{"controllers/UserController.html":{}}}],["userrequestedtoupdate.bio",{"_index":1378,"title":{},"body":{"controllers/UserController.html":{}}}],["userrequestedtoupdate.email",{"_index":1372,"title":{},"body":{"controllers/UserController.html":{}}}],["userrequestedtoupdate.id",{"_index":1371,"title":{},"body":{"controllers/UserController.html":{}}}],["userrequestedtoupdate.name",{"_index":1376,"title":{},"body":{"controllers/UserController.html":{}}}],["userrequestedtoupdate.password",{"_index":1380,"title":{},"body":{"controllers/UserController.html":{}}}],["users",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"classes/PaginatedUsersDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["users.dto",{"_index":1435,"title":{},"body":{"injectables/UserService.html":{}}}],["users.dto.ts",{"_index":1068,"title":{},"body":{"classes/PaginatedUsersDTO.html":{},"coverage.html":{}}}],["users.dto.ts:4",{"_index":1074,"title":{},"body":{"classes/PaginatedUsersDTO.html":{}}}],["users.dto.ts:5",{"_index":1069,"title":{},"body":{"classes/PaginatedUsersDTO.html":{}}}],["users.dto.ts:6",{"_index":1072,"title":{},"body":{"classes/PaginatedUsersDTO.html":{}}}],["users.dto.ts:7",{"_index":1070,"title":{},"body":{"classes/PaginatedUsersDTO.html":{}}}],["users.dto.ts:8",{"_index":1071,"title":{},"body":{"classes/PaginatedUsersDTO.html":{}}}],["users.dto.ts:9",{"_index":1073,"title":{},"body":{"classes/PaginatedUsersDTO.html":{}}}],["userseed",{"_index":1518,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["userservice",{"_index":202,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/CommentController.html":{},"injectables/CommentService.html":{},"modules/CommentsModule.html":{},"modules/TopicModule.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertocheck",{"_index":1461,"title":{},"body":{"injectables/UserService.html":{}}}],["usertocheck.tokenlogout",{"_index":1464,"title":{},"body":{"injectables/UserService.html":{}}}],["usertoken",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["usertoupdate",{"_index":1458,"title":{},"body":{"injectables/UserService.html":{}}}],["using",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["usuário",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentController.html":{}}}],["utils/page",{"_index":444,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["uuid",{"_index":906,"title":{},"body":{"injectables/FilesService.html":{},"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["uuidv4",{"_index":1637,"title":{},"body":{"dependencies.html":{}}}],["v4",{"_index":905,"title":{},"body":{"injectables/FilesService.html":{}}}],["valid",{"_index":1465,"title":{},"body":{"injectables/UserService.html":{}}}],["validar",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["validate",{"_index":990,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1011,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":992,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(useremail",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationpipe",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoryController.html":{},"controllers/CommentController.html":{},"controllers/TopicsController.html":{},"controllers/UserController.html":{}}}],["validationschema",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":819,"title":{},"body":{"classes/CreateCategoryDTO.html":{},"classes/CreateCategoryDTO-1.html":{},"classes/CreateCommentDTO.html":{},"classes/CreateSessionDTO.html":{},"classes/CreateTopicDTO.html":{},"classes/CreateUserDTO.html":{},"classes/NewPasswordDto.html":{},"classes/UpdateCommentDTO.html":{},"dependencies.html":{}}}],["value",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["values",{"_index":1373,"title":{},"body":{"controllers/UserController.html":{}}}],["varchar",{"_index":964,"title":{},"body":{"classes/Image1621217598627.html":{},"classes/createCategories1615383757064.html":{},"classes/createCategories1621383670928.html":{},"classes/createComments1615387777376.html":{},"classes/createComments1621384210972.html":{},"classes/createImage1621383559463.html":{},"classes/createTopics1615387637872.html":{},"classes/createTopics1621384200326.html":{},"classes/createUsers1615386570301.html":{},"classes/createUsers1621383679414.html":{}}}],["variable",{"_index":1485,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1682,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variavel",{"_index":1342,"title":{},"body":{"controllers/UserController.html":{}}}],["verifying",{"_index":514,"title":{},"body":{"controllers/CategoryController.html":{}}}],["verifyrun",{"_index":1649,"title":{},"body":{"miscellaneous/functions.html":{}}}],["voc",{"_index":523,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/CommentController.html":{}}}],["válida",{"_index":1050,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["válida'})@minlength(6",{"_index":1036,"title":{},"body":{"classes/NewPasswordDto.html":{}}}],["watch",{"_index":1661,"title":{},"body":{"index.html":{}}}],["where('t.id",{"_index":1226,"title":{},"body":{"injectables/TopicsService.html":{}}}],["withdeleted",{"_index":614,"title":{},"body":{"injectables/CategoryService.html":{},"injectables/TopicsService.html":{}}}],["yaml",{"_index":1614,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoryModule.html":{},"modules/CommentsModule.html":{},"modules/ForumModule.html":{},"modules/ImageModule.html":{},"modules/SharedModule.html":{},"modules/TopicModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nForumModule\n\nForumModule\n\nAppModule -->\n\nForumModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ForumModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import 'reflect-metadata';\nimport { AuthModule } from './auth/auth.module';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from './modules/profile/user/user.module';\nimport { ForumModule } from './modules/forum/forum.module';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { mailerConfig } from './mailer/mailer.config';\nimport { SharedModule } from './modules/shared/shared.module';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from 'joi';\n\n@Module({\n  imports: [\n    UserModule,\n    AuthModule,\n    ForumModule,\n    TypeOrmModule.forRoot({}),\n    MailerModule.forRoot(mailerConfig),\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        AWS_REGION: Joi.string().required(),\n        AWS_ACCESS_KEY_ID: Joi.string().required(),\n        AWS_SECRET_ACCESS_KEY: Joi.string().required(),\n      }),\n    })\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                sendRecoverPasswordEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            login\n                        \n                        \n                    \n                \n            \n            \n                \nlogin(req: CreateSessionDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Post('signin')@ApiOkResponse({description: 'user succesfully logged'})@ApiForbiddenResponse({description: 'Forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                CreateSessionDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(LocalAuthGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resetPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(token: string, newPasswordDto: NewPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/reset-password/:token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPasswordDto\n                                    \n                                                NewPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendRecoverPasswordEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendRecoverPasswordEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/send-recover-email')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  Request,\n  Post,\n  Get,\n  NotFoundException,\n  Body,\n  Patch,\n  Param,\n  ValidationPipe,\n} from '@nestjs/common';\nimport {\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { CreateSessionDTO } from './createSessionDTO';\nimport { LocalAuthGuard } from '../auth/local-auth.guard';\nimport { NewPasswordDto } from './newPassworDTO';\n\n@ApiTags('Signin & Signup')\n@Controller()\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @UseGuards(LocalAuthGuard)\n  @Post('signin')\n  @ApiOkResponse({ description: 'user succesfully logged' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  login(@Request() req: CreateSessionDTO) {\n    console.log(\"token!!!!\")\n    console.log(req.user)\n    return this.authService.login(req.user);\n  }\n\n  @UseGuards(LocalAuthGuard)\n  @Get('logout')\n  async logout(@Request() req: any) {\n    //Colocar o metodo de validar o token\n    console.log(\"aoba\")\n    const userToken = req.headers.authorization;\n\n    const userIsLogged = await this.authService.checkToken(userToken);\n\n    if (!userIsLogged) {\n      throw new NotFoundException({ error: 'This user is not logged' });\n    }\n\n    return this.authService.logout(req.user.email);\n  }\n\n  @Post('/send-recover-email')\n  async sendRecoverPasswordEmail(\n    @Body('email') email: string,\n  ): Promise {\n    await this.authService.sendRecoverPasswordEmail(email);\n    return {\n      message: 'Foi enviado um email com instruções para resetar sua senha',\n    };\n  }\n\n  @Patch('/reset-password/:token')\n  async resetPassword(\n    @Param('token') token: string,\n    @Body(ValidationPipe) newPasswordDto: NewPasswordDto,\n  ): Promise {\n    await this.authService.resetPassword(token, newPasswordDto);\n\n    return {\n      message: 'Senha alterada com sucesso',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUser\n\nUser\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUser->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            User\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { Module } from '@nestjs/common';\nimport { UserModule } from '../modules/profile/user/user.module';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { User } from '@entities/user.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtStrategy } from './jwt.strategy';\nimport { PassportModule } from '@nestjs/passport';\n@Module({\n  imports: [\n    UserModule,\n    User,\n    TypeOrmModule.forFeature([User]),\n    PassportModule,\n    JwtModule.register({\n      secret: \"edac5915-8dc3-476a-95b4-d2cc9f632137\",\n      signOptions: { expiresIn: '7200s' },\n    })\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n//secret: process.env.JWT_SECRET,\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                checkToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                nullPasswordLogout\n                            \n                            \n                                    Async\n                                resetPassword\n                            \n                            \n                                    Async\n                                sendRecoverPasswordEmail\n                            \n                            \n                                    Async\n                                updatePasswordLogout\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService, mailerService: MailerService, UserRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        UserRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(id: string, newPasswordDto: NewPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPasswordDto\n                                    \n                                                NewPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:50\n                \n            \n\n\n            \n                \n                    *\nNOTE:  checkToken(token:string) ==>\nOnly to be used in logout context\nto don't permit new using of a token\nwhich was already deactivated by logoff\n*\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:103\n                \n            \n\n\n            \n                \n                    NOTE: This method is\nto clean token from DB\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            nullPasswordLogout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    nullPasswordLogout(userEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resetPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetPassword(recoverToken: string, newPasswordDto: NewPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recoverToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPasswordDto\n                                    \n                                                NewPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendRecoverPasswordEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendRecoverPasswordEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePasswordLogout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePasswordLogout(token: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:81\n                \n            \n\n\n            \n                \n                    NOTE: This is to hashing a password\nNOW_NOT_USED!\nFunction for hashing string, deprecated\nasync hashingPassword(userPassword: string){\nconst saltOrRounds = 5;\nconst hash = await bcrypt.hash(userPassword, saltOrRounds);\nreturn hash }\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(userEmail: string, userPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  NotFoundException,\n  UnprocessableEntityException,\n} from '@nestjs/common';\nimport { UserService } from '../modules/profile/user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MailerService } from '@nestjs-modules/mailer';\nimport { randomBytes } from 'crypto';\nimport { User } from '@entities/user.entity';\nimport { CreateUserDTO } from '../modules/profile/user/create-user.dto';\nimport { NewPasswordDto } from './newPassworDTO';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private userService: UserService,\n    private jwtService: JwtService,\n    private mailerService: MailerService,\n    @InjectRepository(User)\n    private UserRepository: Repository,\n  ) {\n    this.UserRepository = UserRepository;\n  }\n\n  async validateUser(userEmail: string, userPassword: string) {\n    const user = await this.userService.findByEmail(userEmail);\n    if (user && user.password === userPassword) {\n      const { id, name, email } = user;\n      //const hash = this.hashingPassword(userPassword);\n      return { id: id, name, email };\n    } else {\n      throw new UnauthorizedException({\n        error: 'Incorrect username or password or this users does not exists!',\n      });\n    }\n  }\n\n  /***\n   *  NOTE:  checkToken(token:string) ==>\n   *\n   *   Only to be used in logout context\n   *  to don't permit new using of a token\n   *  which was already deactivated by logoff\n   *\n   ***/\n  async checkToken(token: string) {\n    const userLogged = await this.UserRepository.findOne({\n      where: {\n        tokenLogout: token,\n      },\n    });\n    if (userLogged) {\n      return userLogged;\n    } else {\n      throw new NotFoundException({\n        error: `The token ${token} was not found!`,\n      });\n    }\n  }\n\n  /**\n   *  NOTE: This is to hashing a password\n   *  NOW_NOT_USED!\n   *\n   * Function for hashing string, deprecated\n   * async hashingPassword(userPassword: string){\n   * const saltOrRounds = 5;\n   * const hash = await bcrypt.hash(userPassword, saltOrRounds);\n   * return hash }\n   **/\n\n  /**\n   *\n   * NOTE:\n   *\n   **/\n  async updatePasswordLogout(token: string, userId: string) {\n    const user = new CreateUserDTO();\n    user.tokenLogout = token;\n    const update = await this.userService.passwordLogout(userId, user);\n    return console.log(update);\n  }\n\n  async login(user: any) {\n    const payload = { email: user.email, sub: user.id };\n    const token = await this.jwtService.sign(payload);\n    await this.updatePasswordLogout('Bearer ' + token, user.id);\n    return {\n      access_token: token,\n    };\n  }\n\n  /**\n   *\n   * NOTE: This method is\n   * to clean token from DB\n   *\n   **/\n  async logout(userEmail: string) {\n    const clean = this.nullPasswordLogout(userEmail);\n    return console.log(clean);\n  }\n\n  async nullPasswordLogout(userEmail: string) {\n    const user = new CreateUserDTO();\n    user.tokenLogout = process.env.LOGOUT_CONSTANT;\n    const update = await this.userService.passwordLogoutByEmail(\n      userEmail,\n      user,\n    );\n    return console.log(update);\n  }\n\n  async sendRecoverPasswordEmail(email: string): Promise {\n    const user = await this.userService.findByEmail(email);\n\n    if (!user)\n      throw new NotFoundException('Não há usuário cadastrado com esse email.');\n\n    user.recoverToken = randomBytes(32).toString('hex');\n    await this.UserRepository.save(user);\n\n    const mail = {\n      subject: 'Recuperação de senha',\n      template: 'recover-password',\n      from: process.env.SENDER_EMAIL,\n      to: user.email,\n      context: {\n        token: user.recoverToken,\n      },\n    };\n    await this.mailerService.sendMail(mail);\n  }\n\n  async changePassword(\n    id: string,\n    newPasswordDto: NewPasswordDto,\n  ): Promise {\n    const { password, passwordConfirmation } = newPasswordDto;\n\n    if (password != passwordConfirmation)\n      throw new UnprocessableEntityException('As senhas não conferem');\n    const user = new CreateUserDTO();\n    user.password = password;\n    await this.userService.changePassword(id, user);\n  }\n\n  async resetPassword(\n    recoverToken: string,\n    newPasswordDto: NewPasswordDto,\n  ): Promise {\n    const user = await this.userService.findByRecoverToken(recoverToken);\n    if (!user) throw new NotFoundException('Token inválido.');\n\n    try {\n      await this.changePassword(user.id, newPasswordDto);\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/category.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorEmail\n                            \n                            \n                                authorId\n                            \n                            \n                                comments\n                            \n                            \n                                created_at\n                            \n                            \n                                deleted_at\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                imageStorage\n                            \n                            \n                                isActive\n                            \n                            \n                                name\n                            \n                            \n                                topics\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authorEmail\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authorId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Topic[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/category.entity.ts:57\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  OneToOne,\n  JoinColumn,\n  BaseEntity,\n  DeleteDateColumn,\n} from 'typeorm';\nimport { Topic } from './topic.entity';\nimport {Comment} from './comments.entity'\n\n\n@Entity('categories')\nexport class Category extends BaseEntity{\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column({ default: \"\" })\n  authorEmail: string;\n\n  @Column({default: \"\"})\n  authorId:string;\n\n  @Column()\n  description: string;\n\n  @Column()\n  imageStorage: string;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @OneToMany(\n    () => Topic,\n    topic => topic.category,\n  )\n  topics: Topic[];\n\n  @OneToMany(\n    ()=> Comment,\n     comment=> comment.category\n    )\n   comments: Comment[]\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date;\n\n  @DeleteDateColumn()\n  deleted_at: Date;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                forum/categories\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                adminFindAll\n                            \n                            \n                                    Async\n                                adminFindOne\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addAvatar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(req, id: string, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image/:id')@UseGuards(JwtAuthGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/categories/categories.controller.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminFindAll(query: QueryPage)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin')@ApiOkResponse({description: 'The categories has been succesfful returned'})@ApiForbiddenResponse({description: 'Forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/categories/categories.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryPage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminFindOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminFindOne(categoryId: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOkResponse({description: 'The category has been successful deleted'})@ApiForbiddenResponse({description: 'Forbidden'})@Get('admin/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/categories/categories.controller.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDTO: CreateCategoryDTO, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiHeader({name: 'Bearer Token', description: 'JWT Token'})@UseGuards(JwtAuthGuard)@Post()@ApiCreatedResponse({description: 'Categoria criada com sucesso!'})@ApiForbiddenResponse({description: 'Ação não autorizada: Somente um admin pode criar uma categoria'})@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/categories/categories.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDTO\n                                    \n                                                CreateCategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: QueryPage)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'Categp'})@ApiBadRequestResponse({description: 'Bad request'})\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/categories/categories.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryPage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(categoryId: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({description: 'The category has been successful deleted'})@ApiBadRequestResponse({description: 'Bad request'})\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/categories/categories.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')@ApiOkResponse({description: 'The category has been successful deleted'})@ApiBadRequestResponse({description: 'Bad request'})\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/categories/categories.controller.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, createCategoryDTO: CreateCategoryDTO, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':id')@ApiOkResponse({description: 'The category has beenn successful updated'})@ApiForbiddenResponse({description: 'Forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/categories/categories.controller.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCategoryDTO\n                                    \n                                                CreateCategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { FindAllModel } from './api-model/find-all.model';\nimport { CreateModel } from './api-model/create-model';\nimport { QueryPage } from '@utils/page';\nimport { LocalAuthGuard } from '@auth/local-auth.guard';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Request,\n  Get,\n  Param,\n  Post,\n  Patch,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n  HttpException,\n  HttpStatus,\n  UnauthorizedException,\n  NotFoundException,\n  Query,\n  UseInterceptors,\n  UploadedFile,\n} from '@nestjs/common';\nimport { CategoryService } from './categories.service';\nimport { CreateCategoryDTO } from './dto/create-category.dto';\nimport { Category } from '../../../entities/category.entity';\nimport {\n  ApiCreatedResponse,\n  ApiBadRequestResponse,\n  ApiHeader,\n  ApiOkResponse,\n  ApiTags,\n  ApiForbiddenResponse,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../../auth/jwt-auth.guard';\nimport { UserService } from 'src/modules/profile/user/user.service';\nimport FindOneModel from './api-model/find-one-model';\nimport { DeleteModel } from './dto/delete-model.dto';\nimport UpdateModel from './api-model/update-model';\n\n@ApiTags('categories')\n@Controller('forum/categories')\nexport class CategoryController {\n  constructor(\n    private readonly categoryService: CategoryService,\n    private readonly userService: UserService,\n  ) {}\n\n  @ApiHeader({\n    name: 'Bearer Token',\n    description: 'JWT Token',\n  })\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  @ApiCreatedResponse({ description: 'Categoria criada com sucesso!' })\n  @ApiForbiddenResponse({\n    description:\n      'Ação não autorizada: Somente um admin pode criar uma categoria',\n  })\n  @UsePipes(ValidationPipe)\n  async create(\n    @Body() createCategoryDTO: CreateCategoryDTO,\n    @Request() req,\n  ): Promise {\n    const token = req.headers.authorization;\n\n    const check = await this.userService.authorizationCheck(token);\n\n    const author = await this.userService.findByToken(token);\n    createCategoryDTO.authorEmail = author.email;\n    createCategoryDTO.authorId = author.id;\n    const requestedName = createCategoryDTO.name;\n    const exists = await this.categoryService.findByName(requestedName);\n    if (author.isAdmin === true) {\n      if (!exists) {\n        const newCategory = await this.categoryService.create(\n          createCategoryDTO,\n        );\n        const { id, name, imageStorage } = newCategory;\n\n        return {\n          id,\n          name,\n          imageStorage,\n        };\n      } else {\n        throw new HttpException(\n          `Já existe uma categoria cadastrada com esse nome!`,\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n    } else {\n      throw new UnauthorizedException({\n        error: 'Somente um administrador pode criar categorias!',\n      });\n    }\n  }\n\n  @Get()\n  @ApiOkResponse({ description: 'Categp' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  async findAll(@Query() query: QueryPage): Promise {\n    const page = query.page;\n    console.log(page);\n    return this.categoryService.findAll(page);\n  }\n\n  @Get('admin')\n  @ApiOkResponse({ description: 'The categories has been succesfful returned' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  async adminFindAll(@Query() query: QueryPage): Promise {\n    const page = query.page;\n    console.log(page);\n    return this.categoryService.adminFindAll(page);\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ description: 'The category has been successful deleted' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  async findOne(\n    @Param('id') categoryId: string,\n    @Request() req,\n  ): Promise {\n    const check = await this.userService.authorizationCheck(\n      req.headers.authorization,\n    );\n\n    const {\n      id,\n      name,\n      imageStorage,\n      description,\n      authorId,\n      authorEmail,\n    } = await this.categoryService.findOne(categoryId);\n\n    return { id, name, imageStorage, description, authorEmail, authorId };\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  @ApiOkResponse({ description: 'The category has been successful deleted' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  async remove(@Param('id') id: string, @Request() req): Promise {\n    //NOTE: Verifying if this user is authorized\n    const token = req.headers.authorization;\n    const check = await this.userService.authorizationCheck(token);\n    const author = await this.userService.findByToken(token);\n    if (author.isAdmin === true) {\n      const deletedItem = this.categoryService.delete(id);\n      if (!deletedItem) {\n        throw new HttpException(\n          {\n            status: HttpStatus.BAD_REQUEST,\n            error: 'Erro ao deletar categoria',\n          },\n          HttpStatus.BAD_REQUEST,\n        );\n      } else {\n        const message = 'Categoria ' + id + ' foi  deletada';\n        return { message };\n      }\n    } else {\n      throw new UnauthorizedException(\n        'Você não está autorizado a deletar essa categoria',\n      );\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOkResponse({ description: 'The category has been successful deleted' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @Get('admin/:id')\n  async adminFindOne(\n    @Param('id') categoryId: string,\n    @Request() req,\n  ): Promise {\n    return this.categoryService.findOne(categoryId);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id')\n  @ApiOkResponse({ description: 'The category has beenn successful updated' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  async update(\n    @Param('id') id: string,\n    @Body() createCategoryDTO: CreateCategoryDTO,\n    @Request() req: any,\n  ): Promise {\n    const categoryExists = await await this.categoryService.findById(id);\n    const token = req.headers.authorization;\n    const check = await this.userService.authorizationCheck(token);\n    if (!categoryExists) {\n      throw new NotFoundException({ error: 'This category does not exists' });\n    }\n    const authorId = (await this.categoryService.findById(id)).authorId;\n    const userIsAuthorized = this.userService.findById(authorId);\n\n    if (!userIsAuthorized) {\n      throw new UnauthorizedException({\n        error: 'You are not authorized to update this category!',\n      });\n    }\n\n    return this.categoryService.update(id, createCategoryDTO);\n  }\n  @Post('image/:id')\n  @UseGuards(JwtAuthGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  async addAvatar(\n    @Request() req,\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    const token = req.headers.authorization;\n    const check = await this.userService.authorizationCheck(token);\n    const requesterUser = this.userService.findByToken(token);\n    if ((await requesterUser).isAdmin === true) {\n      return this.categoryService.addImage(id, file.buffer, file.originalname);\n    } else {\n      throw new UnauthorizedException({\n        error: 'You are not permitted to update this Topic!',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_imports\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nSharedModule->CategoryModule\n\n\n\n\n\nTopicModule\n\nTopicModule\n\nCategoryModule -->\n\nTopicModule->CategoryModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nCategoryModule -->\n\nUserModule->CategoryModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nCategoryModule -->\n\nTopicsService->CategoryModule\n\n\n\n\n\nUserService\n\nUserService\n\nCategoryModule -->\n\nUserService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/forum/categories/categories.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                        \n                            TopicsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                        \n                            TopicModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryController } from './categories.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Category } from '@entities/category.entity';\nimport { CategoryService } from './categories.service';\nimport { TopicModule } from '../topics/topics.module';\nimport { UserService } from 'src/modules/profile/user/user.service';\nimport { User } from '@entities/user.entity';\nimport { UserModule } from 'src/modules/profile/user/user.module';\nimport { TopicsService } from '../topics/topics.service';\nimport { Topic } from '@entities/topic.entity';\nimport { SharedModule } from 'src/modules/shared/shared.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Category, Topic]),SharedModule,\n    TopicModule,\n    UserModule,\n  ],\n  providers: [CategoryService, UserService, TopicsService],\n  controllers: [CategoryController],\n  exports: [],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/categories/categories.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImage\n                            \n                            \n                                    Async\n                                adminFindAll\n                            \n                            \n                                    Async\n                                adminFindOne\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByAuthorSlug\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository, topicRepository: Repository, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/forum/categories/categories.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        topicRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addImage(categoryId: string, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminFindAll(page)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminFindOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminFindOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createCategoryDTO: CreateCategoryDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDTO\n                                    \n                                                CreateCategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(argument: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    argument\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(page)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByAuthorSlug\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByAuthorSlug(id: string, authorId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    authorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(categoryId: string, data: CreateCategoryDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/categories/categories.service.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CreateCategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateCategoryDTO } from './dto/create-category.dto';\nimport { Category } from '../../../entities/category.entity';\nimport { Repository, getManager } from 'typeorm';\nimport { FindAllModel } from './api-model/find-all.model';\nimport { Topic } from '@entities/topic.entity';\nimport UpdateModel from './api-model/update-model';\nimport { FilesService } from '../../image/imageS3.service';\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectRepository(Category)\n    private categoryRepository: Repository,\n\n    @InjectRepository(Topic)\n    private topicRepository: Repository,\n\n    private filesService: FilesService,\n  ) {}\n\n  async findAll(page): Promise {\n    console.log('PAGE:\\n');\n    console.log(page);\n\n    if (!page || page  1 ? page - 1 : null,\n      nextPage: take >= skip + take ? page + 1 : null,\n      perPage: take,\n      totalRegisters: total,\n    };\n  }\n\n  async adminFindAll(page): Promise {\n    if (!page || page  {\n    return this.categoryRepository.find(argument);\n  }\n\n  async findById(id: string): Promise {\n    return this.categoryRepository.findOne({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async findByAuthorSlug(id: string, authorId: string): Promise {\n    return this.categoryRepository.findOne({\n      where: {\n        authorId,\n        id,\n      },\n    });\n  }\n\n  async findOne(id: string): Promise {\n    return this.categoryRepository.findOne({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async adminFindOne(id: string): Promise {\n    return this.categoryRepository.find({\n      where: {\n        id,\n      },\n      withDeleted: true,\n    })[0];\n  }\n\n  async findByName(name: string): Promise {\n    return this.categoryRepository.findOne({\n      where: {\n        name,\n      },\n    });\n  }\n\n  async delete(id: string): Promise {\n    const resp = await this.categoryRepository.softDelete(id);\n\n    /*affected property == 1 (deleted) */\n    console.log('has been deleted?  ', resp);\n    if (resp.affected !== 0) {\n      console.log(`deleted category ${id} `);\n    }\n  }\n\n  async create(createCategoryDTO: CreateCategoryDTO): Promise {\n    const category = new Category();\n\n    category.authorId = createCategoryDTO.authorId;\n    category.name = createCategoryDTO.name;\n    category.authorEmail = createCategoryDTO.authorEmail;\n    category.description = createCategoryDTO.description;\n    const cat = await this.categoryRepository.create(category);\n\n    return this.categoryRepository.save(cat);\n  }\n\n  async update(\n    categoryId: string,\n    data: CreateCategoryDTO,\n  ): Promise {\n    await this.categoryRepository.update(categoryId, data);\n\n    const {\n      name,\n      id,\n      updated_at,\n      description,\n      created_at,\n      imageStorage,\n      authorEmail,\n    } = await this.categoryRepository.findOne(categoryId);\n\n    return {\n      name,\n      id,\n      updated_at,\n      description,\n      created_at,\n    };\n  }\n\n  async addImage(categoryId: string, imageBuffer: Buffer, filename: string) {\n    const imageStorage = await this.filesService.uploadPublicFile(\n      imageBuffer,\n      filename,\n    );\n    const category = await this.findById(categoryId);\n    await this.topicRepository.update(categoryId, {\n      ...category,\n      imageStorage,\n    });\n    return imageStorage;\n  }\n}\n\n/** DON'T REMOVE, PLEASE\n * \n *    categories =await getRepository(Category)\n      .createQueryBuilder(\"cat\")\n      .leftJoinAndSelect(\"cat.topics\",\"topic\",\"cat.id = topic.categoryId\")\n      .select('cat.name')\n      .leftJoinAndSelect(\"cat.comments\",'com','com.categoryId = cat.id')\n      .loadRelationCountAndMap(\"cat.countTopics\",\"cat.topics\")\n      .loadRelationCountAndMap(\"cat.countComments\",\"cat.comments\")\n      .take(take)\n      .skip(skip)\n      .select([\n          'cat.id', 'cat.name', \n          \n          'cat.description', 'cat.authorId',\n\n          'topic.id','topic.name','topic.updated_at',\n          'topic.textBody','topic.imageStorage',\n      ])\n      .orderBy(\"lastTopic.updated_at\")\n      .orderBy(\"cat.id\",\"ASC\")\n\n\n      .getMany();\n      console.log(\"____END____\") \n *\n **/\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/comments.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                created_at\n                            \n                            \n                                deleted_at\n                            \n                            \n                                id\n                            \n                            \n                                textBody\n                            \n                            \n                                topic\n                            \n                            \n                                updated_at\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/comments.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/comments.entity.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/comments.entity.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/comments.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/comments.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Topic\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/comments.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/comments.entity.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/comments.entity.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Category } from './category.entity';\nimport { userInfo } from 'os';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  OneToMany,\n  CreateDateColumn,\n  ManyToMany,\n  ManyToOne,\n  DeleteDateColumn,\n} from 'typeorm';\nimport { Topic } from './topic.entity';\nimport { User } from '../entities/user.entity';\n\n@Entity('comments')\nexport class Comment {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  textBody: string;\n\n\n  @ManyToOne(\n    () => User,\n    user => user.comments,\n  )\n  user: User;\n\n  @ManyToOne(\n    () => Topic,\n    topic => topic.comments,\n  )\n  topic: Topic;\n\n\n  @ManyToOne(\n    ()=> Category,\n    category=>category.comments\n  )\n  category: Category\n\n  @UpdateDateColumn()\n  updated_at: Date;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @DeleteDateColumn()\n  deleted_at: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentController.html":{"url":"controllers/CommentController.html","title":"controller - CommentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                forum/comments\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                adminFindAll\n                            \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            adminFindAll\n                        \n                        \n                    \n                \n            \n            \n                \nadminFindAll(query: QueryPage)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin')@ApiCreatedResponse({description: 'comment succesfully created'})@ApiForbiddenResponse({description: 'Forbidden'})\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/comments/comments.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryPage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(data: CreateCommentDTO, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthGuard)@UsePipes(ValidationPipe)@ApiCreatedResponse({description: 'comment succesfully created'})@ApiBadRequestResponse({description: 'Bad request'})@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/comments/comments.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateCommentDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthGuard)@ApiOkResponse({description: 'The comment has been successful deleted'})@ApiBadRequestResponse({description: 'Bad request'})@ApiHeader({name: 'JWT', description: 'JWT token must to be passed to do this request'})\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/comments/comments.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll(query: QueryPage)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiCreatedResponse({description: 'comment succesfully created'})@ApiBadRequestResponse({description: 'Bad request'})\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/comments/comments.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryPage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(JwtAuthGuard)@ApiOkResponse({description: 'The comments has been succesfful returned'})@ApiBadRequestResponse({description: 'Bad request'})@ApiHeader({name: 'JWT', description: 'JWT token must to be passed to do this request'})\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/comments/comments.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, data: UpdateCommentDTO, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':id')@ApiOkResponse({description: 'The comment has beenn successful updated'})@ApiBadRequestResponse({description: 'Bad request'})\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/comments/comments.controller.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdateCommentDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { FindAllModel } from './api-model/find-all-model';\n\nimport { QueryPage } from '@utils/page';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Patch,\n  HttpException,\n  HttpStatus,\n  Param,\n  Post,\n  Request,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n  Query,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { CommentService } from './comments.service';\nimport { CreateCommentDTO } from './dto/create-comment.dto';\nimport { UpdateCommentDTO } from './dto/update-comment.dto'\nimport { Comment } from '@entities/comments.entity';\nimport { JwtAuthGuard } from '@auth/jwt-auth.guard';\nimport {\n  ApiCreatedResponse,\n  ApiBadRequestResponse,\n  ApiHeader,\n  ApiOkResponse,\n  ApiTags,\n  ApiForbiddenResponse,\n} from '@nestjs/swagger';\nimport { UserService } from 'src/modules/profile/user/user.service';\nimport { TopicsService } from '../topics/topics.service';\nimport { CommentModel } from './dto/paginated-comments-dtio';\n@ApiTags('comments')\n@Controller('forum/comments')\nexport class CommentController {\n  constructor(\n    private readonly commentService: CommentService,\n    private readonly userService: UserService,\n    private readonly topicsService: TopicsService,\n  ) {}\n\n  @Get()\n  @ApiCreatedResponse({ description: 'comment succesfully created' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  findAll(@Query() query: QueryPage ):Promise{\n  \n    const page = query.page;\n    return this.commentService.findAll(page);\n  }\n\n  @Get('admin')\n  @ApiCreatedResponse({ description: 'comment succesfully created' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  adminFindAll(@Query() query: QueryPage ):Promise {\n  \n    const page = query.page;\n    return this.commentService.adminFindAll(page);\n  }\n\n  @Post()\n  @UseGuards(JwtAuthGuard)\n  @UsePipes(ValidationPipe)\n  @ApiCreatedResponse({ description: 'comment succesfully created' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @UsePipes(ValidationPipe)\n  async createComment(\n    @Body() data: CreateCommentDTO,\n    @Request() req,\n  ): Promise {\n    const token =  req.headers.authorization\n    const userAlreadyExists = await this.userService.authorizationCheck(\n      token,\n    );\n    const topic_id = data.topic_id;\n    const topicAlreadyExists = await this.topicsService.findById(topic_id);\n    //We do not use the userID, but the token, is this   if (!userAlreadyExists) necessary?\n    if (!userAlreadyExists) {\n      throw new HttpException(\n        {\n          status: HttpStatus.UNAUTHORIZED,\n          error: 'Usuário não autorizado ou inexistente!',\n        },\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    else if (!topicAlreadyExists) {\n      throw new HttpException(\n        {\n          status: HttpStatus.UNPROCESSABLE_ENTITY,\n          error: 'Tópico não existe',\n        },\n        HttpStatus.FORBIDDEN,\n      );\n    } else {\n      \n      const{id,textBody,updated_at} = await this.commentService.create(data, token);\n      \n      return {\n        id,\n        textBody,\n        updated_at\n      }\n    }\n  }\n\n  @Get(':id')\n  @UseGuards(JwtAuthGuard)\n  @ApiOkResponse({ description: 'The comments has been succesfful returned' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @ApiHeader({\n    name: 'JWT',\n    description: 'JWT token must to be passed to do this request',\n  })\n  async findOne(@Param('id') id: string, @Request() req): Promise {\n    \n    const token = req.headers.authorization\n   this.userService.authorizationCheck(token);\n\n    return this.commentService.findOne(id);\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard)\n  @ApiOkResponse({ description: 'The comment has been successful deleted' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @ApiHeader({\n    name: 'JWT',\n    description: 'JWT token must to be passed to do this request',\n  })\n  async deleteComment(@Param('id') id: string, @Request() req): Promise {\n    \n    const token = req.headers.authorization\n    await this.userService.authorizationCheck(token);\n\n    const author = await this.commentService.findOne(id)\n    const user = await this.userService.findByToken(token)\n\n    if (author.user.id ===  user.id ||\n      user.isAdmin === true){\n\n        const deleted = await this.commentService.delete(id);\n\n        if (!deleted){\n          throw new HttpException(\n            {\n              status: HttpStatus.EXPECTATION_FAILED,\n              error: 'Erro ao deletar comentário!',\n            },\n            HttpStatus.EXPECTATION_FAILED,\n          );\n        }\n      }\n      else{\n        throw new UnauthorizedException({\n          error: 'Você não está autorizado a deletar esse comentário',\n        });\n      }\n    \n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id')\n  @ApiOkResponse({ description: 'The comment has beenn successful updated' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  async update(\n    @Param('id') id: string,\n    @Body() data: UpdateCommentDTO,\n    @Request() req: any,\n  ): Promise {\n\n    const token = req.headers.authorization\n    this.userService.authorizationCheck(token);\n\n    const author = await this.commentService.findOne(id)\n    const user = await this.userService.findByToken(token)\n\n    if (author.user.id ===  user.id ||\n        user.isAdmin === true){\n\n        return this.commentService.update(id, data);\n    }\n    else{\n     \n      throw new UnauthorizedException({\n        error: 'You are not permitted to update this comment!',\n      });\n\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentModel.html":{"url":"classes/CommentModel.html","title":"class - CommentModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/comments/api-model/comment-default-model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created_at\n                            \n                            \n                                deleted_at\n                            \n                            \n                                id\n                            \n                            \n                                textBody\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/comment-default-model.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/comment-default-model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/comment-default-model.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/comment-default-model.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/comment-default-model.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class CommentModel{\n    id:string;\n    textBody:string;\n    updated_at:string;\n    created_at:string;\n    deleted_at:string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentService.html":{"url":"injectables/CommentService.html","title":"injectable - CommentService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CommentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/comments/comments.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminFindAll\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository, topicService: TopicsService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/forum/comments/comments.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        topicService\n                                                  \n                                                        \n                                                                        TopicsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminFindAll(page)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/comments/comments.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(data: CreateCommentDTO, req: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/comments/comments.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                CreateCommentDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/comments/comments.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(page)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/comments/comments.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/comments/comments.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, data: CreateCommentDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/comments/comments.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                CreateCommentDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {  FindAllModel } from './api-model/find-all-model';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCommentDTO } from './dto/create-comment.dto';\nimport { Comment } from '../../../entities/comments.entity';\nimport { Topic } from '../../../entities/topic.entity';\nimport { TopicsService } from '../topics/topics.service';\nimport { UserService } from '../../profile/user/user.service';\nimport PaginatedCommentsModel from './dto/paginated-comments-dtio';\n\n\n@Injectable()\nexport class CommentService {\n  constructor(\n    @InjectRepository(Comment)\n    private commentsRepository: Repository,\n    private topicService: TopicsService,\n    private userService: UserService,\n  ) {\n    this.commentsRepository = commentsRepository;\n    this.topicService = topicService;\n    this.userService = userService;\n  }\n\n  async findOne(id: string): Promise {\n    return this.commentsRepository.findOne({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async adminFindAll(page): Promise {\n    \n    if (!page || page  {\n    \n    if (!page || page  1 ? page - 1 : null,\n        nextPage: take >= skip + take ? page + 1 : null,\n        totalRegisters:total\n     }\n  }\n\n  async delete(id: string){\n    return  (await this.commentsRepository.softDelete(id)).generatedMaps\n  }\n\n  async create(data: CreateCommentDTO, req: any): Promise {\n    \n    const comment = new Comment();\n    const topic = new Topic();\n    comment.textBody = data.textBody\n    const topic_id = data.topic_id;\n    const token = req;\n    this.topicService.findOne(topic_id);\n    const user = await this.userService.findByToken(token);\n    comment.user = await this.userService.findOne(user.id);\n    comment.topic = await this.topicService.findOne(topic_id);\n    const newComment = await this.commentsRepository.create(comment);\n    this.commentsRepository.save(newComment);\n\n    return newComment\n     \n  }\n\n  async update(id: string, data: CreateCommentDTO): Promise {\n    await this.commentsRepository.update(id, data);\n    return this.commentsRepository.findOne(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_imports\n\n\n\ncluster_CommentsModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nSharedModule->CommentsModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCommentsModule -->\n\nCategoryService->CommentsModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nCommentsModule -->\n\nCommentService->CommentsModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nCommentsModule -->\n\nTopicsService->CommentsModule\n\n\n\n\n\nUserService\n\nUserService\n\nCommentsModule -->\n\nUserService->CommentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/forum/comments/comments.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                        \n                            CommentService\n                        \n                        \n                            TopicsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CommentService } from './comments.service';\nimport { CommentController } from './comments.controller';\nimport { Comment } from '../../../entities/comments.entity';\nimport { TopicsService } from '../topics/topics.service';\nimport { Topic } from '../../../entities/topic.entity';\nimport { User } from '../../../entities/user.entity';\nimport { UserService } from '../../profile/user/user.service';\nimport { Category } from '../../../entities/category.entity';\nimport { CategoryModule } from '../categories/categories.module';\nimport { CategoryService } from '../categories/categories.service';\nimport { SharedModule } from 'src/modules/shared/shared.module';\n\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Comment, Topic, User, Category]), SharedModule],\n  providers: [CommentService, TopicsService, UserService, CategoryService],\n  controllers: [CommentController],\n  exports: [],\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDTO.html":{"url":"classes/CreateCategoryDTO.html","title":"class - CreateCategoryDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authorEmail\n                            \n                            \n                                    Public\n                                authorId\n                            \n                            \n                                    Public\n                                countComments\n                            \n                            \n                                    Public\n                                countTopics\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                imageStorage\n                            \n                            \n                                    Public\n                                isActive\n                            \n                            \n                                    Public\n                                lastComment\n                            \n                            \n                                    Public\n                                lastTopic\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                topics\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            authorEmail\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            authorId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            countComments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            countTopics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Name of your new category', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'Name of your new category', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lastComment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lastTopic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Topic\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Name of new category', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            topics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Topic[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/create-category.dto.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmpty, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Topic } from '@entities/topic.entity';\nimport { Comment } from '@entities/comments.entity';\nexport class CreateCategoryDTO {\n  @IsEmpty()\n  public id: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Name of new category',\n    default: '',\n  })\n  public name: string;\n\n  @IsEmpty()\n  public authorId: string;\n\n  @IsEmpty()\n  public authorEmail: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Name of your new category',\n    default: '',\n  })\n  public description: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Name of your new category',\n    default: '',\n  })\n  public imageStorage: string;\n\n  @IsEmpty()\n  public isActive: boolean;\n\n  @IsEmpty()\n  public topics: Topic[];\n\n  @IsEmpty()\n  public lastTopic: Topic;\n\n  @IsEmpty()\n  public countTopics: number;\n\n  @IsEmpty()\n  public countComments: number;\n\n  @IsEmpty()\n  public lastComment: Comment;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDTO-1.html":{"url":"classes/CreateCategoryDTO-1.html","title":"class - CreateCategoryDTO-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authorEmail\n                            \n                            \n                                    Public\n                                authorId\n                            \n                            \n                                    Public\n                                countComments\n                            \n                            \n                                    Public\n                                countTopics\n                            \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                imageStorage\n                            \n                            \n                                    Public\n                                isActive\n                            \n                            \n                                    Public\n                                lastComment\n                            \n                            \n                                    Public\n                                lastTopic\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                topics\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            authorEmail\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            authorId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            countComments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            countTopics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Name of your new category', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'Name of your new category', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lastComment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lastTopic\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Topic\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Name of new category', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            topics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Topic[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/update-category.dto.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmpty, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Topic } from '@entities/topic.entity';\nimport { Comment } from '@entities/comments.entity';\nexport class CreateCategoryDTO {\n  @IsEmpty()\n  public id: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Name of new category',\n    default: '',\n  })\n  public name: string;\n\n  @IsEmpty()\n  public authorId: string;\n\n  @IsEmpty()\n  public authorEmail: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Name of your new category',\n    default: '',\n  })\n  public description: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Name of your new category',\n    default: '',\n  })\n  public imageStorage: string;\n\n  @IsEmpty()\n  public isActive: boolean;\n\n  @IsEmpty()\n  public topics: Topic[];\n\n  @IsEmpty()\n  public lastTopic: Topic;\n\n  @IsEmpty()\n  public countTopics: number;\n\n  @IsEmpty()\n  public countComments: number;\n\n  @IsEmpty()\n  public lastComment: Comment;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDTO.html":{"url":"classes/CreateCommentDTO.html","title":"class - CreateCommentDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/comments/dto/create-comment.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                disable\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasParenteComment\n                            \n                            \n                                    Public\n                                    Readonly\n                                idParentComment\n                            \n                            \n                                    Public\n                                    Readonly\n                                indexOrder\n                            \n                            \n                                    Public\n                                    Readonly\n                                reaction\n                            \n                            \n                                    Public\n                                    Readonly\n                                textBody\n                            \n                            \n                                    Public\n                                topic_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            disable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/create-comment.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            hasParenteComment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/create-comment.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            idParentComment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/create-comment.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            indexOrder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/create-comment.dto.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            reaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'Reaction', default: ''})@IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/create-comment.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            textBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Body of Comment', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/create-comment.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            topic_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Id of topic', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/create-comment.dto.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmpty, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateCommentDTO {\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Body of Comment',\n    default: '',\n  })\n  public readonly textBody: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Reaction',\n    default: '',\n  })\n  @IsEmpty()\n  public readonly reaction: string;\n\n  @IsEmpty()\n  public readonly disable: boolean;\n\n  @IsEmpty()\n  public readonly hasParenteComment: boolean;\n\n  @IsEmpty()\n  public readonly idParentComment: string;\n\n  @IsEmpty()\n  public readonly indexOrder: number;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Id of topic',\n    default: '',\n  })\n  public topic_id: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentModel.html":{"url":"classes/CreateCommentModel.html","title":"class - CreateCommentModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/comments/api-model/create-model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                textBody\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/create-model.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/create-model.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Comment} from '@entities/comments.entity'\n \nexport default class CreateCommentModel{\n  id:string;\n  textBody:string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateModel.html":{"url":"classes/CreateModel.html","title":"class - CreateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/categories/api-model/create-model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                imageStorage\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/create-model.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/create-model.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/create-model.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateModel{\n  id: string;\n  name:string;\n  imageStorage:string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSessionDTO.html":{"url":"classes/CreateSessionDTO.html","title":"class - CreateSessionDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSessionDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/createSessionDTO.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                headers\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Email of user', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/createSessionDTO.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            headers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/createSessionDTO.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Name of user', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/createSessionDTO.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'User which comes from Request Object (cookie)', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/createSessionDTO.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class CreateSessionDTO {\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Name of user',\n    default: '',\n  })\n  public name: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Email of user',\n    default: '',\n  })\n  public email: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'User which comes from Request Object (cookie)',\n    default: '',\n  })\n  public user: any;\n\n  public headers: { authorization: string };\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTopicDTO.html":{"url":"classes/CreateTopicDTO.html","title":"class - CreateTopicDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTopicDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/topics/dto/create-topic.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                category_id\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageStorage\n                            \n                            \n                                    Public\n                                    Readonly\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                textBody\n                            \n                            \n                                    Public\n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            category_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'The id of category', default: ''})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/dto/create-topic.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'The image of topic', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/dto/create-topic.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'Topic name', default: ''})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/dto/create-topic.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            textBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'Body text of topic', default: ''})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/dto/create-topic.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            user_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'The id of user (author)', default: ''})@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/dto/create-topic.dto.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class CreateTopicDTO {\n  @ApiProperty({\n    type: String,\n    description: 'Topic name',\n    default: '',\n  })\n  @IsNotEmpty()\n  public readonly name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Body text of topic',\n    default: '',\n  })\n  @IsNotEmpty()\n  public readonly textBody: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'The image of topic',\n    default: '',\n  })\n  public readonly imageStorage: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'The id of category',\n    default: '',\n  })\n  @IsNotEmpty()\n  public category_id: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'The id of user (author)',\n    default: '',\n  })\n  @IsNotEmpty()\n  public user_id: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/user/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                avatar\n                            \n                            \n                                    Public\n                                bio\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                id\n                            \n                            \n                                    Public\n                                isActive\n                            \n                            \n                                    Public\n                                isAdmin\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                quarentineNum\n                            \n                            \n                                    Public\n                                recoverToken\n                            \n                            \n                                    Public\n                                role\n                            \n                            \n                                    Public\n                                tokenLogout\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'Avatar URL', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            bio\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'user bio', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Email', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Username', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Password', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            quarentineNum\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            recoverToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tokenLogout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/create-user.dto.ts:58\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmpty, IsNotEmpty } from 'class-validator';\n\nexport class CreateUserDTO {\n  @IsEmpty()\n  id: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Username',\n    default: '',\n  })\n  public name: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'user bio',\n    default: '',\n  })\n  public bio: string;\n\n  @IsEmpty()\n  public role: string;\n\n  @ApiProperty({\n    type: String,\n    description: 'Avatar URL',\n    default: '',\n  })\n  public avatar: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Email',\n    default: '',\n  })\n  public email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Password',\n    default: '',\n  })\n  public password: string;\n\n  @IsEmpty()\n  public isActive: boolean;\n\n  @IsEmpty()\n  public quarentineNum: number;\n\n  public isAdmin: boolean;\n\n  @IsEmpty()\n  public tokenLogout: string;\n\n  @IsEmpty()\n  public recoverToken: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteModel.html":{"url":"classes/DeleteModel.html","title":"class - DeleteModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/categories/dto/delete-model.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/dto/delete-model.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DeleteModel {\n    public message: string;\n  }\n  \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeletedItemCategoryDTO.html":{"url":"classes/DeletedItemCategoryDTO.html","title":"class - DeletedItemCategoryDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeletedItemCategoryDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/categories/delete-categories.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/delete-categories.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DeletedItemCategoryDTO {\n    public message: string;\n  }\n  \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeletedItemTopicDTO.html":{"url":"classes/DeletedItemTopicDTO.html","title":"class - DeletedItemTopicDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeletedItemTopicDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/topics/dto/delete-topic.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/dto/delete-topic.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DeletedItemTopicDTO {\n    public message: string;\n  }\n  \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeletedItemUserDTO.html":{"url":"classes/DeletedItemUserDTO.html","title":"class - DeletedItemUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeletedItemUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/user/delete-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/user/delete-user.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class DeletedItemUserDTO {\n  public message: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/image/imageS3.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadPublicFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/image/imageS3.service.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadPublicFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPublicFile(dataBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/image/imageS3.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { S3 } from 'aws-sdk';\nimport { v4 as uuid } from 'uuid';\n \n@Injectable()\nexport class FilesService {\n  constructor(\n\n  ) {}\n \n  async uploadPublicFile(dataBuffer: Buffer, filename: string) {\n    const AWS_S3_BUCKET_NAME = process.env.AWS_PUBLIC_BUCKET_NAME;\n    const s3 = new S3();\n    const uploadResult = await s3.upload({\n      Bucket: AWS_S3_BUCKET_NAME,\n      Body: dataBuffer,\n      Key: `${uuid()}-${filename}`\n    })\n      .promise();\n \n    return uploadResult.Location;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllModel.html":{"url":"classes/FindAllModel.html","title":"class - FindAllModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/topics/api-model/find-all-model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentPage\n                            \n                            \n                                    Public\n                                nextPage\n                            \n                            \n                                    Public\n                                perPage\n                            \n                            \n                                    Public\n                                prevPage\n                            \n                            \n                                    Public\n                                topics\n                            \n                            \n                                    Public\n                                totalRegisters\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/api-model/find-all-model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            nextPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/api-model/find-all-model.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            perPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/api-model/find-all-model.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prevPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/api-model/find-all-model.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            topics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/api-model/find-all-model.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            totalRegisters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/topics/api-model/find-all-model.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Topic } from '@entities/topic.entity';\n\nexport class FindAllModel {\n  public topics: Partial[];\n  public currentPage: number;\n  public prevPage: number;\n  public nextPage: number;\n  public perPage: number;\n  public totalRegisters:number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllModel-1.html":{"url":"classes/FindAllModel-1.html","title":"class - FindAllModel-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/categories/api-model/find-all.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                categories\n                            \n                            \n                                    Public\n                                currentPage\n                            \n                            \n                                    Public\n                                nextPage\n                            \n                            \n                                    Public\n                                perPage\n                            \n                            \n                                    Public\n                                prevPage\n                            \n                            \n                                    Public\n                                totalRegisters\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            categories\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-all.model.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-all.model.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            nextPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-all.model.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            perPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-all.model.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prevPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-all.model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            totalRegisters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-all.model.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Category } from '@entities/category.entity';\n\nexport class FindAllModel{\n  public categories: Category[];\n  public currentPage: number;\n  public prevPage: number;\n  public nextPage: number;\n  public perPage: number;\n  public totalRegisters:number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindAllModel-2.html":{"url":"classes/FindAllModel-2.html","title":"class - FindAllModel-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindAllModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/comments/api-model/find-all-model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comments\n                            \n                            \n                                currentPage\n                            \n                            \n                                nextPage\n                            \n                            \n                                perPage\n                            \n                            \n                                prevPage\n                            \n                            \n                                totalRegisters\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/find-all-model.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/find-all-model.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nextPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/find-all-model.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            perPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/find-all-model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            prevPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/find-all-model.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            totalRegisters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/find-all-model.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Comment} from '@entities/comments.entity'\n \n export  class FindAllModel{\n  comments: Comment[];\n  currentPage: string;\n  perPage: number;\n  prevPage: number;\n  nextPage: number;\n  totalRegisters:number;\n }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneModel.html":{"url":"classes/FindOneModel.html","title":"class - FindOneModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/categories/api-model/find-one-model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                authorEmail\n                            \n                            \n                                    Optional\n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                imageStorage\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            authorEmail\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-one-model.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            authorId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-one-model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-one-model.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-one-model.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-one-model.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/find-one-model.ts:3\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class FindOneModel{\n  id:string;\n  name:string;\n  imageStorage:string;\n  description:string;\n  authorId?:string;\n  authorEmail?:string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ForumModule.html":{"url":"modules/ForumModule.html","title":"module - ForumModule","body":"\n                   \n\n\n\n\n    Modules\n    ForumModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ForumModule\n\n\n\ncluster_ForumModule_exports\n\n\n\ncluster_ForumModule_imports\n\n\n\ncluster_ForumModule_providers\n\n\n\n\nCategoryModule\n\nCategoryModule\n\n\n\nForumModule\n\nForumModule\n\nForumModule -->\n\nCategoryModule->ForumModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nForumModule -->\n\nCommentsModule->ForumModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nForumModule -->\n\nSharedModule->ForumModule\n\n\n\n\n\nTopicModule\n\nTopicModule\n\nForumModule -->\n\nTopicModule->ForumModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nForumModule -->\n\nUserModule->ForumModule\n\n\n\n\n\nCategoryModule \n\nCategoryModule \n\nCategoryModule  -->\n\nForumModule->CategoryModule \n\n\n\n\n\nCommentsModule \n\nCommentsModule \n\nCommentsModule  -->\n\nForumModule->CommentsModule \n\n\n\n\n\nTopicModule \n\nTopicModule \n\nTopicModule  -->\n\nForumModule->TopicModule \n\n\n\n\n\nCategoryService\n\nCategoryService\n\nForumModule -->\n\nCategoryService->ForumModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nForumModule -->\n\nCommentService->ForumModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nForumModule -->\n\nTopicsService->ForumModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/forum/forum.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                        \n                            CommentService\n                        \n                        \n                            TopicsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                        \n                            CommentController\n                        \n                        \n                            TopicsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CategoryModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            TopicModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CategoryModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            TopicModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryController } from './categories/categories.controller';\nimport { CategoryModule } from './categories/categories.module';\nimport { CategoryService } from './categories/categories.service';\nimport { CommentController } from './comments/comments.controller';\nimport { CommentsModule } from './comments/comments.module';\nimport { CommentService } from './comments/comments.service';\nimport { TopicModule } from './topics/topics.module';\nimport { TopicsController } from './topics/topics.controller';\nimport { TopicsService } from './topics/topics.service';\nimport { Category } from '@entities/category.entity';\nimport { Comment } from '@entities/comments.entity';\nimport { Topic } from '@entities/topic.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserModule } from 'src/modules/profile/user/user.module';\nimport { SharedModule } from '../shared/shared.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Category, Comment, Topic]),\n    CategoryModule,\n    CommentsModule,\n    TopicModule,\n    UserModule,\n    SharedModule\n  ],\n  controllers: [CategoryController, CommentController, TopicsController],\n  providers: [CategoryService, CommentService, TopicsService],\n  exports: [CategoryModule, CommentsModule, TopicModule],\n})\nexport class ForumModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Image1621217598627.html":{"url":"classes/Image1621217598627.html","title":"class - Image1621217598627","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Image1621217598627\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations backup/migrationsV1/1621217598627-Image.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1621217598627-Image.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1621217598627-Image.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner, Table, getConnection} from \"typeorm\";\n\nexport class Image1621217598627 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.createTable(\n            new Table({\n              name: 'images',\n              columns: [\n                {\n                  name: 'id',\n                  type: 'varchar',\n                  isPrimary: true,\n                  generationStrategy: 'uuid',\n                  isNullable: false,\n                },\n      \n                {\n                  name: 'url',\n                  type: 'text',\n                  isNullable: false,\n                },\n                {\n                  name: 'key',\n                  type: 'text',\n                  isNullable: true,\n                },\n              ],\n            }),\n          );\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await getConnection()\n      .createQueryBuilder()\n      .delete()\n      .from(Image)\n      .execute();\n      await queryRunner.dropTable('images');\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ImageModule.html":{"url":"modules/ImageModule.html","title":"module - ImageModule","body":"\n                   \n\n\n\n\n    Modules\n    ImageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ImageModule\n\n\n\ncluster_ImageModule_exports\n\n\n\ncluster_ImageModule_providers\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nImageModule\n\nImageModule\n\nFilesService  -->\n\nImageModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nImageModule -->\n\nFilesService->ImageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/image/image.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FilesService } from 'src/modules/image/imageS3.service';\n\n\n\n\n//import {} falta o user service\n\n@Module({\n  imports: [],\n  //por causa do topic ele pede o category\n  providers: [FilesService ],\n  controllers: [],\n  exports: [FilesService],\n})\nexport class ImageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt'){\n  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: \"edac5915-8dc3-476a-95b4-d2cc9f632137\",\n    });\n  }\n  async validate(payload: any) {\n    return { id: payload.sub, email: payload.email };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ArgumentsHost,\n} from '@nestjs/common';\nimport { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n      passwordField: 'password',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException('Error: Invalid arguments');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogsSeeding.html":{"url":"classes/LogsSeeding.html","title":"class - LogsSeeding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogsSeeding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/logsSeeding.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                runnedAllMigrations\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(runnedAllMigrations: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/entities/logsSeeding.entity.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        runnedAllMigrations\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('increment')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/logsSeeding.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            runnedAllMigrations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/logsSeeding.entity.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  OneToMany,\n  CreateDateColumn,\n  ManyToMany,\n  ManyToOne,\n  DeleteDateColumn,\n  BaseEntity,\n} from 'typeorm';\nimport { Topic } from './topic.entity';\nimport { User } from '../entities/user.entity';\n\n@Entity('logsSeeding')\nexport class LogsSeeding extends BaseEntity {\n  \n  @PrimaryGeneratedColumn('increment')\n  id:number;\n\n  @Column()\n  runnedAllMigrations:boolean;\n\n  constructor(runnedAllMigrations:boolean){\n   super();\n   this.runnedAllMigrations = true\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NewPasswordDto.html":{"url":"classes/NewPasswordDto.html","title":"class - NewPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NewPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/newPassworDTO.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                passwordConfirmation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString({message: 'Informe uma senha válida'})@MinLength(6, {message: 'A senha deve ter no mínimo 6 caracteres'})@MaxLength(32, {message: 'A senha deve ter no máximo 32 caracteres.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/newPassworDTO.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            passwordConfirmation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/newPassworDTO.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MinLength, MaxLength } from 'class-validator';\n\nexport class NewPasswordDto {\n  @IsString({\n    message: 'Informe uma senha válida',\n  })\n  @MinLength(6, {\n    message: 'A senha deve ter no mínimo 6 caracteres',\n  })\n  @MaxLength(32, {\n    message: 'A senha deve ter no máximo 32 caracteres.',\n  })\n  password: string;\n\n  passwordConfirmation: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedCommentsModel.html":{"url":"classes/PaginatedCommentsModel.html","title":"class - PaginatedCommentsModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedCommentsModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/comments/dto/paginated-comments-dtio.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                comments\n                            \n                            \n                                    Public\n                                currentPage\n                            \n                            \n                                    Public\n                                nextPage\n                            \n                            \n                                    Public\n                                perPage\n                            \n                            \n                                    Public\n                                prevPage\n                            \n                            \n                                    Public\n                                totalRegisters\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            comments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/paginated-comments-dtio.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/paginated-comments-dtio.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            nextPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/paginated-comments-dtio.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            perPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/paginated-comments-dtio.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prevPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/paginated-comments-dtio.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            totalRegisters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/paginated-comments-dtio.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class PaginatedCommentsModel{\n        public comments:Comment[]\n        public currentPage: number\n        public perPage: number\n        public prevPage: number \n        public nextPage: number\n        public totalRegisters:number\n    }\n\n    export interface CommentModel{\n      id:string;\n      textBody:string;\n      updated_at?:Date;\n      created_at?:Date;\n      deleted_at?:Date;\n    }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedUsersDTO.html":{"url":"classes/PaginatedUsersDTO.html","title":"class - PaginatedUsersDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedUsersDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/paginated-users.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentPage\n                            \n                            \n                                    Public\n                                nextPage\n                            \n                            \n                                    Public\n                                perPage\n                            \n                            \n                                    Public\n                                prevPage\n                            \n                            \n                                    Public\n                                totalRegisters\n                            \n                            \n                                    Public\n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/paginated-users.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            nextPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/paginated-users.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            perPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/paginated-users.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prevPage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/paginated-users.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            totalRegisters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/paginated-users.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Partial[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/profile/paginated-users.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '@entities/user.entity';\n\nexport class PaginatedUsersDTO {\n  public users: Partial[];\n  public currentPage: number;\n  public prevPage: number;\n  public nextPage: number;\n  public perPage: number;\n  public totalRegisters: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QueryPage.html":{"url":"interfaces/QueryPage.html","title":"interface - QueryPage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  QueryPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/page.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        page\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                    \n                                \n                                \n                                    \n                                        page:         page\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         page\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type page={\n  page:number\n}\n\nexport interface QueryPage{\n  page:page\n}\n\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_imports\n\n\n\ncluster_SharedModule_providers\n\n\n\n\nImageModule\n\nImageModule\n\n\n\nSharedModule\n\nSharedModule\n\nSharedModule -->\n\nImageModule->SharedModule\n\n\n\n\n\nImageModule \n\nImageModule \n\nImageModule  -->\n\nSharedModule->ImageModule \n\n\n\n\n\nFilesService\n\nFilesService\n\nSharedModule -->\n\nFilesService->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/shared/shared.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ImageModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ImageModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FilesService } from 'src/modules/image/imageS3.service';\nimport { ImageModule } from '../image/image.module';\n\n\n\n\n//import {} falta o user service\n\n@Module({\n  imports: [ImageModule],\n  //por causa do topic ele pede o category\n  providers: [FilesService],\n  controllers: [],\n  exports: [ImageModule],\n})\nexport class SharedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Topic.html":{"url":"classes/Topic.html","title":"class - Topic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Topic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/topic.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                comments\n                            \n                            \n                                created_at\n                            \n                            \n                                deleted_at\n                            \n                            \n                                id\n                            \n                            \n                                imageStorage\n                            \n                            \n                                isActive\n                            \n                            \n                                name\n                            \n                            \n                                seedingId\n                            \n                            \n                                textBody\n                            \n                            \n                                updated_at\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            seedingId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/topic.entity.ts:41\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  OneToOne,\n  CreateDateColumn,\n  OneToMany,\n  BaseEntity,\n  DeleteDateColumn,\n  JoinColumn,\n} from 'typeorm';\nimport { Category } from './category.entity';\nimport { User } from './user.entity';\nimport { Comment } from './comments.entity';\n\n\n\n@Entity('topics')\nexport class Topic extends BaseEntity{\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  textBody: string;\n\n  @Column()\n  imageStorage: string;\n\n  @Column({ default: true })\n  isActive: boolean;\n\n  @ManyToOne(\n    () => User,\n    user => user.topics,\n  )\n  user: User;\n\n  @ManyToOne(\n    () => Category,\n    category => category.topics,\n  )\n  category: Category;\n\n  @OneToMany(\n    () => Comment,\n    comments => comments.topic,\n  )\n  comments: Comment[];\n\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date;\n\n  @DeleteDateColumn()\n  deleted_at: Date;\n\n  @Column({default: null})\n  seedingId: number;\n\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TopicModule.html":{"url":"modules/TopicModule.html","title":"module - TopicModule","body":"\n                   \n\n\n\n\n    Modules\n    TopicModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TopicModule\n\n\n\ncluster_TopicModule_providers\n\n\n\ncluster_TopicModule_imports\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nTopicModule\n\nTopicModule\n\nTopicModule -->\n\nSharedModule->TopicModule\n\n\n\n\n\nUser\n\nUser\n\nTopicModule -->\n\nUser->TopicModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nTopicModule -->\n\nCategoryService->TopicModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nTopicModule -->\n\nTopicsService->TopicModule\n\n\n\n\n\nUserService\n\nUserService\n\nTopicModule -->\n\nUserService->TopicModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/forum/topics/topics.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                        \n                            TopicsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TopicsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                        \n                            User\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Topic } from '../../../entities/topic.entity';\nimport { TopicsService } from './topics.service';\nimport { TopicsController } from './topics.controller';\nimport { CategoryModule } from '../categories/categories.module';\nimport { CategoryService } from '../categories/categories.service';\nimport { Category } from '@entities/category.entity';\nimport { UserService } from '../../profile/user/user.service';\nimport { User } from '@entities/user.entity';\nimport { SharedModule } from 'src/modules/shared/shared.module';\n@Module({\n  imports: [User, TypeOrmModule.forFeature([Topic, User, Category]),SharedModule],\n  providers: [TopicsService, CategoryService, UserService],\n  controllers: [TopicsController],\n  exports: [TypeOrmModule.forFeature([Topic])],\n})\nexport class TopicModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TopicsController.html":{"url":"controllers/TopicsController.html","title":"controller - TopicsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TopicsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/topics/topics.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                forum/topics\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImage\n                            \n                            \n                                    Async\n                                adminFindAll\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                getTopicById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addImage(req, id: string, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image/:id')@UseGuards(JwtAuthGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/topics/topics.controller.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminFindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'topic succesfully returned'})@ApiForbiddenResponse({description: 'Forbidden'})@Get('admin/list')\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/topics/topics.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createTopicDTO: CreateTopicDTO, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@UsePipes(ValidationPipe)@ApiHeader({name: 'JWT', description: 'JWT token must to be passed to do this request'})@ApiCreatedResponse({description: 'topic succesfully created'})@ApiBadRequestResponse({description: 'Bad request'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/topics/topics.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTopicDTO\n                                    \n                                                CreateTopicDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOkResponse({description: 'topic succesfully deleted'})@ApiBadRequestResponse({description: 'Bad request'})@ApiHeader({name: 'JWT', description: 'JWT token must to be passed to do this request'})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/topics/topics.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(query: QueryPage)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({description: 'topic succesfully returned'})@ApiBadRequestResponse({description: 'Bad request'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/topics/topics.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                QueryPage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTopicById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTopicById(topicId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':topicId')\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/topics/topics.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, createTopicDTO: CreateTopicDTO, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOkResponse({description: 'topic succesfully updated'})@ApiBadRequestResponse({description: 'Bad request'})@ApiHeader({name: 'JWT', description: 'JWT token must to be passed to do this request'})@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/forum/topics/topics.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createTopicDTO\n                                    \n                                                CreateTopicDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        \nimport { QueryPage } from '@utils/page';\nimport {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Param,\n  Delete,\n  Patch,\n  Request,\n  UseGuards,\n  UsePipes,\n  ValidationPipe,\n  Query,\n  UnauthorizedException,\n  HttpStatus,\n  UseInterceptors,\n  UploadedFile \n} from '@nestjs/common';\nimport { TopicsService } from './topics.service';\nimport { Topic } from '@entities/topic.entity';\nimport { CreateTopicDTO } from './dto/create-topic.dto';\nimport { DeletedItemTopicDTO } from './dto/delete-topic.dto';\nimport { JwtAuthGuard } from '@auth/jwt-auth.guard';\nimport {\n  ApiCreatedResponse,\n  ApiBadRequestResponse,\n  ApiHeader,\n  ApiOkResponse,\n  ApiTags,\n  ApiForbiddenResponse,\n} from '@nestjs/swagger';\nimport { HttpException } from '@nestjs/common/exceptions/http.exception';\nimport { UserService } from '../../profile/user/user.service';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { FindAllModel } from './api-model/find-all-model';\n\n@ApiTags('topics')\n@Controller('forum/topics')\nexport class TopicsController {\n  constructor(\n    private readonly topicsService: TopicsService,\n    private readonly userService: UserService,\n  ) {}\n\n  // @Get('byCategory/:categoryId')\n  // async getTopicsByCategory(@Param('categoryId') categoryId: string):Promise {\n  //   return this.topicsService.findByCategory(categoryId);\n  // }\n\n  /*@Get('admin/:topicId')\n  async adminGetTopicById(@Param('topicId') topicId: string) {\n    return this.topicsService.adminFindOne(topicId)\n  } */\n\n  @Get(':topicId')\n  async getTopicById(@Param('topicId') topicId: string): Promise {\n    return this.topicsService.takeTopicData(topicId);\n  }\n\n  @ApiOkResponse({ description: 'topic succesfully returned' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @Get()\n  async findAll(@Query() query: QueryPage):Promise {\n    const page = query.page;\n    return this.topicsService.findAll(page);\n  }\n\n  @ApiOkResponse({ description: 'topic succesfully returned' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @Get('admin/list')\n  async adminFindAll():Promise {\n    return this.topicsService.adminFindAll();\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOkResponse({ description: 'topic succesfully updated' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @ApiHeader({\n    name: 'JWT',\n    description: 'JWT token must to be passed to do this request',\n  })\n  @Patch(':id')\n  async update(\n    @Param('id') id: string,\n    @Body() createTopicDTO: CreateTopicDTO,\n    @Request() req,\n  ): Promise {\n    const token = req.headers.authorization;\n    const check = await this.userService.authorizationCheck(token);\n    const author = this.topicsService.findOne(id);\n    const requesterUser = this.userService.findByToken(token);\n    if (\n      (await author).user.id === (await requesterUser).id ||\n      (await requesterUser).isAdmin === true\n    ) {\n      return this.topicsService.update(id, createTopicDTO);\n    } else {\n      throw new UnauthorizedException({\n        error: 'You are not permitted to update this Topic!',\n      });\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @UsePipes(ValidationPipe)\n  @ApiHeader({\n    name: 'JWT',\n    description: 'JWT token must to be passed to do this request',\n  })\n  @ApiCreatedResponse({ description: 'topic succesfully created' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @Post()\n  async create(\n    @Body() createTopicDTO: CreateTopicDTO,\n    @Request() req,\n  ): Promise {\n    const token = req.headers.authorization;\n    const userAlreadyExists = await this.userService.authorizationCheck(token);\n    if (!userAlreadyExists) {\n      throw new HttpException(\n        {\n          status: HttpStatus.BAD_REQUEST,\n          error: 'User does not exists, please check data!',\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n    } else {\n      const response = this.topicsService.create(createTopicDTO);\n      const category = this.topicsService.findOne(createTopicDTO.category_id);\n      const user = this.topicsService.findOne(createTopicDTO.user_id);\n\n      if (!category && !user) {\n        const errors = { Error: 'User or Category not passed into' };\n        throw new HttpException({ errors }, 401);\n      }\n      return response;\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOkResponse({ description: 'topic succesfully deleted' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @ApiHeader({\n    name: 'JWT',\n    description: 'JWT token must to be passed to do this request',\n  })\n  @Delete(':id')\n  async delete(\n    @Param('id') id: string,\n    @Request() req,\n  ): Promise {\n    const token = req.headers.authorization;\n    const check = await this.userService.authorizationCheck(token);\n    const author = this.topicsService.findOne(id);\n    const requesterUser = this.userService.findByToken(token);\n    if (\n      (await author).user.id === (await requesterUser).id ||\n      (await requesterUser).isAdmin === true\n    ) {\n      const deletedIten = this.topicsService.findOne(id);\n      if (!deletedIten) {\n        throw new HttpException(\n          {\n            status: HttpStatus.BAD_REQUEST,\n            error: 'Error to delete topic, please check data!',\n          },\n          HttpStatus.BAD_REQUEST,\n        );\n      } else {\n        const message = 'Iten ' + id + ' deleted';\n        return {\n          message,\n        };\n      }\n    } else {\n      throw new UnauthorizedException({\n        error: 'You are not permitted to update this Topic!',\n      });\n    }\n  }\n\n  @Post('image/:id')\n  @UseGuards(JwtAuthGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  async addImage(@Request() req, @Param('id') id: string, @UploadedFile() file: Express.Multer.File) {\n    const token = req.headers.authorization;\n    const check = await this.userService.authorizationCheck(token);\n    const author = this.topicsService.findOne(id);\n    const requesterUser = this.userService.findByToken(token);\n    if (\n      (await author).user.id === (await requesterUser).id ||\n      (await requesterUser).isAdmin === true\n    ) {\n      return this.topicsService.addImage(id,file.buffer, file.originalname);\n    } else {\n      throw new UnauthorizedException({\n        error: 'You are not permitted to update this Topic!',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TopicsService.html":{"url":"injectables/TopicsService.html","title":"injectable - TopicsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TopicsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/topics/topics.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addImage\n                            \n                            \n                                    Async\n                                adminFindAll\n                            \n                            \n                                    Async\n                                adminFindOne\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByCategory\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findNoResponse\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findWithOrderBy\n                            \n                            \n                                    Async\n                                takeTopicData\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(topicRepository: Repository, UserRepository: Repository, CategoryRepository: Repository, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/forum/topics/topics.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        topicRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        UserRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        CategoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addImage(topicId: string, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:242\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminFindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminFindOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminFindOne(topicId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createTopicDTO: CreateTopicDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTopicDTO\n                                    \n                                                CreateTopicDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(page)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByCategory(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findNoResponse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findNoResponse(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(topicId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findWithOrderBy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findWithOrderBy()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            takeTopicData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    takeTopicData(topicId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    topicId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, data)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/forum/topics/topics.service.ts:233\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FindAllModel } from './api-model/find-all-model';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { getRepository, Repository } from 'typeorm';\nimport { Topic } from '@entities/topic.entity';\nimport { User } from '@entities/user.entity';\nimport { Category } from '@entities/category.entity';\nimport { CreateTopicDTO } from './dto';\nimport { FilesService } from '@image/imageS3.service';\n\n@Injectable()\nexport class TopicsService {\n  constructor(\n    @InjectRepository(Topic)\n    private readonly topicRepository: Repository,\n\n    @InjectRepository(User)\n    private readonly UserRepository: Repository,\n\n    @InjectRepository(Category)\n    private readonly CategoryRepository: Repository,\n\n    private filesService: FilesService,\n  ) {\n    this.CategoryRepository = CategoryRepository;\n    this.UserRepository = UserRepository;\n    this.topicRepository = topicRepository;\n  }\n\n  async create(createTopicDTO: CreateTopicDTO): Promise {\n    const topic = new Topic();\n\n    topic.name = createTopicDTO.name;\n    topic.textBody = createTopicDTO.textBody;\n    const user_id = createTopicDTO.user_id;\n    const category_id = createTopicDTO.category_id;\n\n    topic.user = await this.UserRepository.findOne(user_id);\n    topic.category = await this.CategoryRepository.findOne(category_id);\n    const newTopic = await this.topicRepository.create(topic);\n    return newTopic;\n  }\n\n  async adminFindAll(): Promise {\n    return this.topicRepository.find({ withDeleted: true });\n  }\n\n  async adminFindOne(topicId: string) {\n    const {\n      id,\n      name,\n      textBody,\n      imageStorage,\n      isActive,\n      created_at,\n      updated_at,\n      deleted_at,\n    } = await this.topicRepository.findOne(topicId, { withDeleted: true });\n\n    return {\n      id,\n      name,\n      textBody,\n      imageStorage,\n      isActive,\n      created_at,\n      updated_at,\n      deleted_at,\n    };\n  }\n\n  async findAll(page): Promise {\n    if (!page || page  1 ? page - 1 : null,\n      nextPage: take >= skip + take ? page + 1 : null,\n      totalRegisters: total,\n    };\n  }\n\n  async findOne(topicId: string): Promise {\n    return this.topicRepository.findOne({\n      where: {\n        id: topicId,\n      },\n      withDeleted: true,\n    });\n  }\n\n  async takeTopicData(topicId: string): Promise {\n    console.log('__________start_____________');\n\n    const topic = await getRepository(Topic)\n      .createQueryBuilder('t')\n      .innerJoin('t.category', 'cat', 'cat.id = t.categoryId')\n      .innerJoin('t.comments', 'com', 'com.topicId = t.id')\n      .innerJoinAndSelect('t.user', 'user', 't.userId = user.id')\n      .innerJoinAndSelect(\n        'com.user',\n        'userComment',\n        'com.userId = userComment.id',\n      )\n      .where('t.id = :id', { id: topicId })\n\n      .select([\n        'userComment.id',\n        'userComment.name',\n        'userComment.avatar',\n        'userComment.email',\n        'userComment.created_at',\n\n        'user.id',\n        'user.name',\n        'user.avatar',\n        'user.email',\n        'user.created_at',\n\n        't.id',\n        't.name',\n        't.textBody',\n        't.imageStorage',\n        't.created_at',\n        't.updated_at',\n\n        'cat.id',\n        'cat.name',\n        'cat.authorId',\n        'cat.description',\n        'cat.imageStorage',\n        'cat.created_at',\n        'cat.updated_at',\n\n        'com.id',\n        'com.userId',\n        'com.textBody',\n        'com.created_at',\n        'com.updated_at',\n      ])\n      .orderBy({\n        'com.created_at': 'ASC', // Getting the last comment\n      })\n      .getOne();\n\n    console.log('__________end_______________');\n\n    return topic;\n  }\n\n  async findWithOrderBy() {\n    const qb = this.topicRepository.createQueryBuilder('Topic');\n    qb.orderBy('Topic.created_at', 'DESC');\n    console.log(qb.getQuery());\n    return await qb.getMany();\n  }\n\n  async findNoResponse(id: string) {\n    const qb = this.topicRepository.createQueryBuilder('Topic');\n    qb.where('Topic.response = 0');\n    console.log(qb.getQuery());\n    return await qb.getMany();\n  }\n\n  async findByCategory(categoryId: string) {\n    const qb = this.topicRepository.createQueryBuilder('topic');\n    qb.where('topic.categoryId = :categoryId', { categoryId });\n\n    qb.select([\n      'topic.id',\n      'topic.name',\n      'topic.textBody',\n      'topic.imageStorage',\n      'topic.created_at',\n      'topic.updated_at',\n    ]);\n\n    console.log(qb.getQuery());\n    const topic = await qb.getMany();\n\n    return { topic };\n  }\n\n  async findById(id: string): Promise {\n    return this.topicRepository.findOne({\n      where: {\n        id: id,\n      },\n    });\n  }\n\n  async update(id: string, data): Promise {\n    await this.topicRepository.update(id, data);\n\n    return await this.topicRepository.findOne(id);\n  }\n\n  async delete(id: string): Promise {\n    await this.topicRepository.softDelete(id);\n  }\n  async addImage(topicId: string, imageBuffer: Buffer, filename: string) {\n    const imageStorage = await this.filesService.uploadPublicFile(\n      imageBuffer,\n      filename,\n    );\n    const topic = await this.findById(topicId);\n    await this.topicRepository.update(topicId, {\n      ...topic,\n      imageStorage,\n    });\n    return imageStorage;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentDTO.html":{"url":"classes/UpdateCommentDTO.html","title":"class - UpdateCommentDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/comments/dto/update-comment.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                disable\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasParenteComment\n                            \n                            \n                                    Public\n                                    Readonly\n                                idParentComment\n                            \n                            \n                                    Public\n                                    Readonly\n                                indexOrder\n                            \n                            \n                                    Public\n                                    Readonly\n                                reaction\n                            \n                            \n                                    Public\n                                    Readonly\n                                textBody\n                            \n                            \n                                    Public\n                                topic_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            disable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/update-comment.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            hasParenteComment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/update-comment.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            idParentComment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/update-comment.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            indexOrder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/update-comment.dto.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            reaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: String, description: 'Reaction', default: ''})@IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/update-comment.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            textBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Body of Comment', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/update-comment.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            topic_id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({type: String, description: 'Id of topic', default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/dto/update-comment.dto.ts:45\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmpty, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateCommentDTO {\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Body of Comment',\n    default: '',\n  })\n  public readonly textBody: string;\n\n\n  @ApiProperty({\n    type: String,\n    description: 'Reaction',\n    default: '',\n  })\n  @IsEmpty()\n  public readonly reaction: string;\n\n\n  @IsEmpty()\n  public readonly disable: boolean;\n\n  @IsEmpty()\n  public readonly hasParenteComment: boolean;\n\n\n  @IsEmpty()\n  public readonly idParentComment: string;\n  \n\n  @IsEmpty()\n  public readonly indexOrder: number;\n\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'Id of topic',\n    default: '',\n  })\n  public topic_id: string;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentModel.html":{"url":"classes/UpdateCommentModel.html","title":"class - UpdateCommentModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/comments/api-model/update-model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                textBody\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/update-model.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            textBody\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/comments/api-model/update-model.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Comment} from '@entities/comments.entity'\n \nexport default class UpdateCommentModel{\n  id:string;\n  textBody:string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateModel.html":{"url":"classes/UpdateModel.html","title":"class - UpdateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/forum/categories/api-model/update-model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                authorEmail\n                            \n                            \n                                created_at\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                imageStorage\n                            \n                            \n                                name\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            authorEmail\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/update-model.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/update-model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/update-model.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/update-model.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageStorage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/update-model.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/update-model.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/forum/categories/api-model/update-model.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export default class UpdateModel{\n  name:string;\n  id:string;\n  updated_at:Date;\n  description:string;\n  created_at:Date;\n  imageStorage?: string;\n  authorEmail?: string;\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                comments\n                            \n                            \n                                created_at\n                            \n                            \n                                deleted_at\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                isAdmin\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                quarentineNum\n                            \n                            \n                                recoverToken\n                            \n                            \n                                role\n                            \n                            \n                                seedingId\n                            \n                            \n                                tokenLogout\n                            \n                            \n                                topics\n                            \n                            \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 'https://plantasia.s3-sa-east-1.amazonaws.com/default-profile.png'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bio\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            comments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Comment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:72\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deleted_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @DeleteDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:37\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            quarentineNum\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            recoverToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 'USER'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            seedingId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tokenLogout\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 'logout'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            topics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Topic[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated_at\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entities/user.entity.ts:75\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  UpdateDateColumn,\n  PrimaryGeneratedColumn,\n  OneToMany,\n  CreateDateColumn,\n  BaseEntity,\n  DeleteDateColumn,\n  Generated,\n  JoinColumn,\n  OneToOne\n} from 'typeorm';\nimport { Topic } from './topic.entity';\nimport { Comment } from './comments.entity';\n\n@Entity('users')\nexport class User extends BaseEntity{\n\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column({ default: '' })\n  bio: string;\n\n  @Column({ default: 'USER' })\n  role: string;\n\n\n  @Column({default: \"https://plantasia.s3-sa-east-1.amazonaws.com/default-profile.png\"})\n  avatar: string;\n\n  @Column()\n  email: string;\n\n\n @Column({default: null})\n seedingId:number\n\n  @Column()\n  password: string;\n\n  @Column({ default: 0 })\n  quarentineNum: number;\n\n  @Column({ default: false })\n  isAdmin: boolean\n\n  @Column({ default: \"logout\"})\n  tokenLogout: string;\n\n  @Column({ default: \"\"})\n  recoverToken: string;\n  \n  @OneToMany(\n    () => Comment,\n    comment => comment.user,\n  )\n  comments: Comment[];\n\n  @OneToMany(\n    () => Topic,\n    topic => topic.user,\n  )\n  topics: Topic[];\n\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date;\n\n  @DeleteDateColumn()\n  deleted_at: Date;\n\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                adminFindAll\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByToken\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addAvatar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(request, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@UseGuards(JwtAuthGuard)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/user/user.controller.ts:244\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminFindAll(req, query: QueryPage)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/user/user.controller.ts:236\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                QueryPage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDTO: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UsePipes(ValidationPipe)@ApiOkResponse({description: 'The user has been succesfull created'})@ApiBadRequestResponse({description: 'Bad request'})@ApiHeader({name: 'JWT', description: 'JWT token must to be passed to do this request'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/user/user.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req, query: QueryPage)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@ApiOkResponse({description: 'The users has been succesfull returned'})@ApiBadRequestResponse({description: 'Bad request'})@ApiHeader({name: 'JWT', description: 'JWT token must to be passed to do this request'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/user/user.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    query\n                                    \n                                                QueryPage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(idUser: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(JwtAuthGuard)@ApiOkResponse({description: 'The user has been succesfull returned'})@ApiBadRequestResponse({description: 'Bad request'})@ApiHeader({name: 'JWT', description: 'JWT token must to be passed to do this request'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/user/user.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    idUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByToken(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('findme')\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/user/user.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(JwtAuthGuard)@ApiOkResponse({description: 'The user has been succesfull deleted'})@ApiBadRequestResponse({description: 'Bad request'})@ApiHeader({name: 'JWT', description: 'JWT token must to be passed to do this request'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/user/user.controller.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(idUser: string, createUserDTO: CreateUserDTO, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(JwtAuthGuard)@ApiOkResponse({description: 'The user has been succesfull deleted'})@ApiBadRequestResponse({description: 'Bad request'})@ApiHeader({name: 'JWT', description: 'JWT token must to be passed to do this request'})\n                \n            \n\n            \n                \n                    Defined in src/modules/profile/user/user.controller.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    idUser\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { QueryPage } from '@utils/page';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Patch,\n  UseGuards,\n  UsePipes,\n  Request,\n  UnauthorizedException,\n  NotFoundException,\n  ForbiddenException,\n  HttpException,\n  Query,\n  HttpStatus,\n  UseInterceptors,\n  UploadedFile,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDTO } from './create-user.dto';\nimport { DeletedItemUserDTO } from './delete-user.dto';\nimport { User } from '@entities/user.entity';\nimport { JwtAuthGuard } from '@auth/jwt-auth.guard'; //' ' auth/jwt-auth.guard';\nimport { ValidationPipe } from '@nestjs/common/pipes/validation.pipe';\nimport {\n  ApiBadRequestResponse,\n  ApiForbiddenResponse,\n  ApiHeader,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\n@ApiTags('users')\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @ApiOkResponse({ description: 'The users has been succesfull returned' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @ApiHeader({\n    name: 'JWT',\n    description: 'JWT token must to be passed to do this request',\n  })\n  @Get()\n  async findAll(@Request() req, @Query() query: QueryPage) {\n    console.log(req.headers.authorization);\n\n    const thisUser = await this.userService.findByEmail(req.user.email);\n\n    const check = await this.userService.authorizationCheck(\n      req.headers.authorization,\n    );\n\n    const page = query.page;\n    const paginatedUsers = await this.userService.findAll(page); //passamos a variavel page como parametro do metodo FindAll\n    const {\n      users,\n      currentPage,\n      prevPage,\n      nextPage,\n      perPage,\n      totalRegisters,\n    } = paginatedUsers;\n\n    return {\n      users,\n      currentPage,\n      prevPage,\n      nextPage,\n      perPage,\n      totalRegisters,\n    };\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('findme')\n  async findOneByToken(@Request() req) {\n    console.log('entroi');\n    const token = req.headers.authorization;\n    console.log('This token is:', token);\n    return this.userService.findByToken(token);\n  }\n\n  @UsePipes(ValidationPipe)\n  @ApiOkResponse({ description: 'The user has been succesfull created' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @ApiHeader({\n    name: 'JWT',\n    description: 'JWT token must to be passed to do this request',\n  })\n  @Post()\n  async create(@Body() createUserDTO: CreateUserDTO): Promise> {\n    const userAlreadyExists = await this.userService.checkIfAlreadyExists(\n      createUserDTO.email,\n    );\n    if (userAlreadyExists === undefined || !userAlreadyExists) {\n      const createdUser = await this.userService.create(createUserDTO);\n\n      const { name, email, bio, id } = createdUser;\n\n      return {\n        name,\n        email,\n        bio,\n        id,\n      };\n    } else {\n      throw new ForbiddenException({\n        error: `The email : ${createUserDTO.email}    is already used!`,\n      });\n    }\n  }\n\n  @Get(':id')\n  @UseGuards(JwtAuthGuard)\n  @ApiOkResponse({ description: 'The user has been succesfull returned' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @ApiHeader({\n    name: 'JWT',\n    description: 'JWT token must to be passed to do this request',\n  })\n  async findOne(@Param('id') idUser: string): Promise> {\n    const foundUser = await this.userService.findById(idUser);\n\n    if (!foundUser) {\n      throw new NotFoundException(`Error: user with ID: ${idUser} not exists`);\n    }\n\n    const selectedUser = await this.userService.findOne(idUser);\n    const { name, email, bio, id } = selectedUser;\n\n    return {\n      name,\n      email,\n      bio,\n      id,\n    };\n  }\n\n  @Delete(':id')\n  @UseGuards(JwtAuthGuard)\n  @ApiOkResponse({ description: 'The user has been succesfull deleted' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @ApiHeader({\n    name: 'JWT',\n    description: 'JWT token must to be passed to do this request',\n  })\n  async remove(\n    @Request() req,\n    @Param('id') id: string,\n  ): Promise {\n    const token = req.headers.authorization;\n    const check = await this.userService.authorizationCheck(token);\n    const requestedUser = await this.findOneByToken(token);\n    const userRequestedToDelete = await this.userService.findById(id);\n\n    console.log(userRequestedToDelete);\n\n    if (\n      (userRequestedToDelete.id === requestedUser.id &&\n        userRequestedToDelete.email === requestedUser.email) ||\n      requestedUser.isAdmin === true\n    ) {\n      const deletedIten = this.userService.delete(id);\n      if (!deletedIten) {\n        throw new HttpException(\n          {\n            status: HttpStatus.BAD_REQUEST,\n            error: 'Error to delete comment, please check data!',\n          },\n          HttpStatus.BAD_REQUEST,\n        );\n      } else {\n        const message = 'Iten ' + id + ' deleted';\n        return {\n          message,\n        };\n      }\n    } else {\n      throw new UnauthorizedException({\n        error: 'You are not permitted to remove this user!',\n      });\n    }\n  }\n\n  @Patch(':id')\n  @UseGuards(JwtAuthGuard)\n  @ApiOkResponse({ description: 'The user has been succesfull deleted' })\n  @ApiBadRequestResponse({ description: 'Bad request' })\n  @ApiHeader({\n    name: 'JWT',\n    description: 'JWT token must to be passed to do this request',\n  })\n  async update(\n    @Param('id') idUser: string,\n    @Body() createUserDTO: CreateUserDTO,\n    @Request() req,\n  ): Promise> {\n    const token = req.headers.authorization;\n    const check = await this.userService.authorizationCheck(token);\n    const requestedUser = await await this.userService.findByToken(token);\n    const userRequestedToUpdate = await this.userService.findById(idUser);\n\n    if (!userRequestedToUpdate || userRequestedToUpdate === undefined) {\n      throw new NotFoundException({ error: 'This user does not exists' });\n    }\n\n    if (\n      (userRequestedToUpdate.id === requestedUser.id &&\n        userRequestedToUpdate.email === requestedUser.email) ||\n      requestedUser.isAdmin === true\n    ) {\n      /**NOTE: Only these values below 'll be updated */\n      userRequestedToUpdate.name = createUserDTO.name;\n      userRequestedToUpdate.bio = createUserDTO.bio;\n      userRequestedToUpdate.password = createUserDTO.password;\n\n      const user = await this.userService.update(\n        userRequestedToUpdate.id,\n        userRequestedToUpdate,\n      );\n\n      const { name, email, bio, id } = user;\n\n      return user;\n    } //add else\n  }\n  //find original local\n\n  @Get('admin')\n  async adminFindAll(@Request() req, @Query() query: QueryPage) {\n    const page = query.page;\n    return this.userService.adminFindAll(); //passamos a variavel page como parametro do metodo FindAll\n  }\n\n  @Post('avatar')\n  @UseGuards(JwtAuthGuard)\n  @UseInterceptors(FileInterceptor('file'))\n  async addAvatar(\n    @Request() request,\n    @UploadedFile() file: Express.Multer.File,\n  ) {\n    return this.userService.addAvatar(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nSharedModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nCategoryService\n\nCategoryService\n\nUserModule -->\n\nCategoryService->UserModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nUserModule -->\n\nTopicsService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/profile/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                        \n                            TopicsService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserService } from './user.service';\nimport { TopicsService } from '../../forum/topics/topics.service';\nimport { CategoryService } from '../../forum/categories/categories.service';\nimport { User } from '@entities/user.entity';\nimport { Topic } from '@entities/topic.entity';\nimport { Category } from '@entities/category.entity';\nimport { UserController } from './user.controller';\nimport { SharedModule } from 'src/modules/shared/shared.module';\n\n\n\n\n//import {} falta o user service\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Topic, Category]), SharedModule],\n  //por causa do topic ele pede o category\n  providers: [UserService, TopicsService, CategoryService ],\n  controllers: [UserController],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/profile/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                adminFindAll\n                            \n                            \n                                    Async\n                                authorizationCheck\n                            \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                checkIfAlreadyExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByRecoverToken\n                            \n                            \n                                    Async\n                                findByToken\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                passwordLogout\n                            \n                            \n                                    Async\n                                passwordLogoutByEmail\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/profile/user/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addAvatar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(userId: String, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminFindAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminFindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            authorizationCheck\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    authorizationCheck(tokenRequest: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tokenRequest\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(id: string, password: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkIfAlreadyExists\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkIfAlreadyExists(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(page)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByRecoverToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByRecoverToken(recoverToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recoverToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            passwordLogout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    passwordLogout(id: string, passwordLogout: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    passwordLogout\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            passwordLogoutByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    passwordLogoutByEmail(userEmail: string, passwordLogout: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    passwordLogout\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, data: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/profile/user/user.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDTO } from './create-user.dto';\nimport { User } from '@entities/user.entity';\nimport { FilesService } from '../../image/imageS3.service';\nimport { PaginatedUsersDTO } from '../paginated-users.dto';\nimport { String } from 'aws-sdk/clients/appstream';\n\n\n\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private userRepository: Repository,\n    private filesService: FilesService,\n  ) {}\n\n  async findOne(id: string): Promise {\n    return this.userRepository.findOne({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async checkIfAlreadyExists(email: string): Promise {\n    return this.userRepository.findOne({\n      where: {\n        email,\n      },\n    });\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.userRepository.findOne({\n      where: {\n        email,\n      },\n    });\n  }\n\n  async findById(id: string): Promise {\n    return this.userRepository.findOne({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async findAll(page): Promise {\n    const take = 10;\n    const skip = 10 * (page - 1);\n\n    if (!page) {\n      page = 1;\n    } else page = parseInt(page);\n\n    const [result, total] = await this.userRepository.findAndCount({\n      take: take,\n      skip: skip,\n    });\n\n    const allUsers = result.map(({ id, name, bio, avatar }) => {\n      const user = new CreateUserDTO();\n      user.id = id;\n      user.name = name;\n      user.bio = bio;\n      user.avatar = avatar;\n      return user;\n    });\n\n    return {\n      users: allUsers,\n      currentPage: page,\n      prevPage: page > 1 ? page - 1 : null,\n      nextPage: total > skip + take ? page + 1 : null,\n      perPage: take,\n      totalRegisters: total,\n    };\n  }\n\n  async delete(id: string): Promise {\n    await this.userRepository.softDelete(id);\n  }\n\n  async adminFindAll() {\n    return this.userRepository.find({\n      select: [\n        'name',\n        'id',\n        'avatar',\n        'bio',\n        'isAdmin',\n        'created_at',\n        'updated_at',\n        'deleted_at',\n      ],\n    });\n  }\n\n  async remove(id: string): Promise {\n    await this.userRepository.delete(id);\n  }\n\n  async create(createUserDTO: CreateUserDTO): Promise> {\n    const user = new User();\n    user.name = createUserDTO.name;\n    user.bio = createUserDTO.bio;\n    user.role = createUserDTO.role;\n    user.email = createUserDTO.email;\n    user.password = createUserDTO.password;\n    user.isAdmin = createUserDTO.isAdmin;\n    user.quarentineNum = createUserDTO.quarentineNum;\n    user.tokenLogout = createUserDTO.tokenLogout;\n\n    const newUser = await this.userRepository.create(user);\n    console.log('User created!');\n    this.userRepository.save(newUser);\n\n    const { name, password, email, bio } = newUser;\n\n    return {\n      name,\n      password,\n      email,\n      bio,\n    };\n  }\n\n  async update(id: string, data: any): Promise {\n    await this.userRepository.update(id, data);\n\n    return this.userRepository.findOne(id);\n  }\n\n  async passwordLogout(\n    id: string,\n    passwordLogout: CreateUserDTO,\n  ): Promise {\n    await this.userRepository.update(id, passwordLogout);\n    return this.userRepository.findOne(id);\n  }\n\n  async passwordLogoutByEmail(\n    userEmail: string,\n    passwordLogout: CreateUserDTO,\n  ): Promise> {\n    const userToUpdate = (\n      await this.userRepository.findOne({\n        where: {\n          email: userEmail,\n        },\n      })\n    ).id;\n    const resp = await this.userRepository.update(userToUpdate, passwordLogout);\n    const user = await this.findByEmail(userEmail);\n\n    return user;\n  }\n\n  async findByToken(token: string): Promise {\n    const userToCheck = await this.userRepository.findOne({\n      where: {\n        tokenLogout: token,\n      },\n    });\n\n    if (!userToCheck) {\n      throw new UnauthorizedException({ error: 'Unauthorized' });\n    }\n\n    return userToCheck;\n  }\n\n  async authorizationCheck(tokenRequest: string) {\n    const userToCheck = await this.findByToken(tokenRequest);\n    if (userToCheck.tokenLogout === tokenRequest || userToCheck) {\n      return {\n        Message: 'Valid token ',\n      };\n    } else {\n      throw new UnauthorizedException({\n        error: 'Unauthorized, your credentials is invalid',\n      });\n    }\n  }\n  async changePassword(id: string, password: CreateUserDTO) {\n    const user = await this.findOne(id);\n    console.log(user);\n    const newPassword = await this.userRepository.update(id, password);\n    console.log(newPassword);\n\n    return newPassword;\n  }\n\n  async findByRecoverToken(recoverToken: string) {\n    const idUser = await this.userRepository.findOne({\n      where: {\n        recoverToken: recoverToken,\n      },\n    });\n    return idUser;\n  }\n\n  async addAvatar(userId:String, imageBuffer: Buffer, filename: string) {\n    const avatar = await this.filesService.uploadPublicFile(imageBuffer, filename);\n    const user = await this.findById(userId);\n    await this.userRepository.update(userId, {\n      ...user,\n      avatar\n    })\n    return avatar;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                27 %\n                (3/11)\n            \n        \n        \n            \n                \n                src/auth/createSessionDTO.ts\n            \n            class\n            CreateSessionDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/logout.ts\n            \n            variable\n            logoutConstant\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/newPassworDTO.ts\n            \n            class\n            NewPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1621383559463-createImage.ts\n            \n            class\n            createImage1621383559463\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1621383670928-createCategories.ts\n            \n            class\n            createCategories1621383670928\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1621383679414-createUsers.ts\n            \n            class\n            createUsers1621383679414\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1621384200326-createTopics.ts\n            \n            class\n            createTopics1621384200326\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1621384210972-createComments.ts\n            \n            class\n            createComments1621384210972\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/migrations/1621384230860-createLogSeedings.ts\n            \n            class\n            createLogSeedings1621384230860\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/seeders/admin-seed.ts\n            \n            function\n            AdminSeed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seeders/calling-seeders.ts\n            \n            function\n            CallingSeeders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seeders/category-seed.ts\n            \n            function\n            CategorySeed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seeders/comments-seed.ts\n            \n            function\n            CommentsSeed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seeders/topics-seed.ts\n            \n            function\n            TopicsSeed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seeders/user-seed.ts\n            \n            function\n            UserSeed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/entities/comments.entity.ts\n            \n            class\n            Comment\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/entities/logsSeeding.entity.ts\n            \n            class\n            LogsSeeding\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entities/topic.entity.ts\n            \n            class\n            Topic\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/mailer/mailer.config.ts\n            \n            variable\n            mailerConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/migrations backup/migrationsV1/1615383757064-createCategories.ts\n            \n            class\n            createCategories1615383757064\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/migrations backup/migrationsV1/1615386570301-createUsers.ts\n            \n            class\n            createUsers1615386570301\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/migrations backup/migrationsV1/1615387637872-createTopics.ts\n            \n            class\n            createTopics1615387637872\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/migrations backup/migrationsV1/1615387777376-createComments.ts\n            \n            class\n            createComments1615387777376\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/migrations backup/migrationsV1/1615471723537-createLogSeedings.ts\n            \n            class\n            createLogSeedings1615471723537\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/migrations backup/migrationsV1/1621217598627-Image.ts\n            \n            class\n            Image1621217598627\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/forum/categories/api-model/create-model.ts\n            \n            class\n            CreateModel\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/forum/categories/api-model/find-all.model.ts\n            \n            class\n            FindAllModel\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/forum/categories/api-model/find-one-model.ts\n            \n            class\n            FindOneModel\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/forum/categories/api-model/update-model.ts\n            \n            class\n            UpdateModel\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/forum/categories/categories.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/forum/categories/categories.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/forum/categories/delete-categories.dto.ts\n            \n            class\n            DeletedItemCategoryDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/forum/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDTO\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/forum/categories/dto/delete-model.dto.ts\n            \n            class\n            DeleteModel\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/forum/categories/dto/update-category.dto.ts\n            \n            class\n            CreateCategoryDTO\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/forum/comments/api-model/comment-default-model.ts\n            \n            class\n            CommentModel\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/forum/comments/api-model/create-model.ts\n            \n            class\n            CreateCommentModel\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/forum/comments/api-model/find-all-model.ts\n            \n            class\n            FindAllModel\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/forum/comments/api-model/update-model.ts\n            \n            class\n            UpdateCommentModel\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/forum/comments/comments.controller.ts\n            \n            controller\n            CommentController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/forum/comments/comments.service.ts\n            \n            injectable\n            CommentService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/forum/comments/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/forum/comments/dto/paginated-comments-dtio.ts\n            \n            class\n            PaginatedCommentsModel\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/forum/comments/dto/paginated-comments-dtio.ts\n            \n            interface\n            CommentModel\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/forum/comments/dto/update-comment.dto.ts\n            \n            class\n            UpdateCommentDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/forum/topics/api-model/find-all-model.ts\n            \n            class\n            FindAllModel\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/forum/topics/dto/create-topic.dto.ts\n            \n            class\n            CreateTopicDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/forum/topics/dto/delete-topic.dto.ts\n            \n            class\n            DeletedItemTopicDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/forum/topics/topics.controller.ts\n            \n            controller\n            TopicsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/forum/topics/topics.service.ts\n            \n            injectable\n            TopicsService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/modules/image/imageS3.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/profile/paginated-users.dto.ts\n            \n            class\n            PaginatedUsersDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/profile/user/create-user.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/profile/user/delete-user.dto.ts\n            \n            class\n            DeletedItemUserDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/profile/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/profile/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/utils/page.ts\n            \n            interface\n            QueryPage\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createCategories1615383757064.html":{"url":"classes/createCategories1615383757064.html","title":"class - createCategories1615383757064","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createCategories1615383757064\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations backup/migrationsV1/1615383757064-createCategories.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1615383757064-createCategories.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1615383757064-createCategories.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Category } from '../../entities/category.entity';\nimport { getConnection, MigrationInterface, QueryRunner, Table } from 'typeorm';\n\nexport class createCategories1615383757064 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {/*\n    await queryRunner.createTable(\n      new Table({\n        name: 'categories',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            isNullable: false,\n          },\n\n          {\n            name: 'name',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'authorEmail',\n            type: 'text',\n            isNullable: true,\n          },\n\n          {\n            name: 'authorId',\n            type: 'text',\n            isNullable: true,\n          },\n          {\n            name: 'description',\n            type: 'text',\n            isNullable: true,\n          },\n\n          {\n            name: 'imageStorage',\n            type: 'text',\n            isNullable: true,\n          },\n\n          {\n            name: 'isActive',\n            type: 'tinyint',\n            isNullable: false,\n            default: 1,\n          },\n          {\n            name: 'created_at',\n            type: 'datetime',\n            isNullable: false,\n            default: 'now()',\n          },\n\n          {\n            name: 'updated_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n\n          {\n            name: 'deleted_at',\n            type: 'datetime',\n            isNullable: true,\n          },\n        ],\n      }),\n    );\n\n    await queryRunner.clearSqlMemory();*/\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {/*\n    await getConnection()\n      .createQueryBuilder()\n      .delete()\n      .from(Category)\n      .execute();\n\n    await queryRunner.dropTable('categories');*/\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createCategories1621383670928.html":{"url":"classes/createCategories1621383670928.html","title":"class - createCategories1621383670928","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createCategories1621383670928\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621383670928-createCategories.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621383670928-createCategories.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621383670928-createCategories.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Category } from '../../entities/category.entity';\nimport { getConnection, MigrationInterface, QueryRunner, Table } from 'typeorm';\n\nexport class createCategories1621383670928  implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.createTable(\n      new Table({\n        name: 'categories',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            isNullable: false,\n          },\n\n          {\n            name: 'name',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'authorEmail',\n            type: 'text',\n            isNullable: true,\n          },\n\n          {\n            name: 'authorId',\n            type: 'text',\n            isNullable: true,\n          },\n          {\n            name: 'description',\n            type: 'text',\n            isNullable: true,\n          },\n\n          {\n            name: 'imageStorage',\n            type: 'text',\n            isNullable: true,\n          },\n\n          {\n            name: 'isActive',\n            type: 'tinyint',\n            isNullable: false,\n            default: 1,\n          },\n          {\n            name: 'created_at',\n            type: 'datetime',\n            isNullable: false,\n            default: 'now()',\n          },\n\n          {\n            name: 'updated_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n\n          {\n            name: 'deleted_at',\n            type: 'datetime',\n            isNullable: true,\n          },\n        ],\n      }),\n    );\n\n    await queryRunner.clearSqlMemory();\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await getConnection()\n      .createQueryBuilder()\n      .delete()\n      .from(Category)\n      .execute();\n\n    await queryRunner.dropTable('categories');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createComments1615387777376.html":{"url":"classes/createComments1615387777376.html","title":"class - createComments1615387777376","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createComments1615387777376\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations backup/migrationsV1/1615387777376-createComments.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1615387777376-createComments.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1615387777376-createComments.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Comment } from '../../entities/comments.entity';\nimport {\n  getConnection,\n  MigrationInterface,\n  QueryRunner,\n  Table,\n  TableColumn,\n  TableForeignKey,\n} from 'typeorm';\n\nexport class createComments1615387777376 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.createTable(\n      new Table({\n        name: 'comments',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            isNullable: false,\n          },\n          {\n            name: 'textBody',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'created_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n\n          {\n            name: 'updated_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n          {\n            name: 'deleted_at',\n            type: 'datetime',\n            isNullable: true,\n          },\n        ],\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'comments',\n      new TableColumn({\n        name: 'userId',\n        type: 'varchar',\n        isNullable: false,\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'comments',\n      new TableColumn({\n        name: 'categoryId',\n        type: 'varchar',\n        isNullable: true,\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'comments',\n      new TableColumn({\n        name: 'topicId',\n        type: 'varchar',\n        isNullable: false,\n      }),\n    );\n\n    const fk_user_id = new TableForeignKey({\n      columnNames: ['userId'],\n      referencedColumnNames: ['id'],\n      referencedTableName: 'users',\n      onDelete: 'CASCADE',\n    });\n\n    const fk_topic_id = new TableForeignKey({\n      columnNames: ['topicId'],\n      referencedColumnNames: ['id'],\n      referencedTableName: 'topics',\n      onDelete: 'CASCADE',\n    });\n \n    const fk_category_Id = new TableForeignKey({\n      columnNames: ['categoryId'],\n      referencedColumnNames: ['id'],\n      referencedTableName: 'categories',\n      onDelete: 'CASCADE',\n    });\n\n\n    await queryRunner.createForeignKey('comments', fk_topic_id);\n    await queryRunner.createForeignKey('comments', fk_user_id);\n    await queryRunner.createForeignKey('comments', fk_category_Id);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await getConnection()\n      .createQueryBuilder()\n      .delete()\n      .from(Comment)\n      .execute();\n\n    await queryRunner.dropTable('comments');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createComments1621384210972.html":{"url":"classes/createComments1621384210972.html","title":"class - createComments1621384210972","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createComments1621384210972\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621384210972-createComments.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621384210972-createComments.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621384210972-createComments.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Comment } from '../../entities/comments.entity';\nimport {\n  getConnection,\n  MigrationInterface,\n  QueryRunner,\n  Table,\n  TableColumn,\n  TableForeignKey,\n} from 'typeorm';\n\nexport class createComments1621384210972 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.createTable(\n      new Table({\n        name: 'comments',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            isNullable: false,\n          },\n          {\n            name: 'textBody',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'created_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n\n          {\n            name: 'updated_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n          {\n            name: 'deleted_at',\n            type: 'datetime',\n            isNullable: true,\n          },\n        ],\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'comments',\n      new TableColumn({\n        name: 'userId',\n        type: 'varchar',\n        isNullable: false,\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'comments',\n      new TableColumn({\n        name: 'categoryId',\n        type: 'varchar',\n        isNullable: true,\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'comments',\n      new TableColumn({\n        name: 'topicId',\n        type: 'varchar',\n        isNullable: false,\n      }),\n    );\n\n    const fk_user_id = new TableForeignKey({\n      columnNames: ['userId'],\n      referencedColumnNames: ['id'],\n      referencedTableName: 'users',\n      onDelete: 'CASCADE',\n    });\n\n    const fk_topic_id = new TableForeignKey({\n      columnNames: ['topicId'],\n      referencedColumnNames: ['id'],\n      referencedTableName: 'topics',\n      onDelete: 'CASCADE',\n    });\n \n    const fk_category_Id = new TableForeignKey({\n      columnNames: ['categoryId'],\n      referencedColumnNames: ['id'],\n      referencedTableName: 'categories',\n      onDelete: 'CASCADE',\n    });\n\n\n    await queryRunner.createForeignKey('comments', fk_topic_id);\n    await queryRunner.createForeignKey('comments', fk_user_id);\n    await queryRunner.createForeignKey('comments', fk_category_Id);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await getConnection()\n      .createQueryBuilder()\n      .delete()\n      .from(Comment)\n      .execute();\n\n    await queryRunner.dropTable('comments');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createImage1621383559463.html":{"url":"classes/createImage1621383559463.html","title":"class - createImage1621383559463","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createImage1621383559463\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621383559463-createImage.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621383559463-createImage.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621383559463-createImage.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {MigrationInterface, QueryRunner, Table, getConnection} from \"typeorm\";\nexport class createImage1621383559463 implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.createTable(\n            new Table({\n              name: 'images',\n              columns: [\n                {\n                  name: 'id',\n                  type: 'varchar',\n                  isPrimary: true,\n                  generationStrategy: 'uuid',\n                  isNullable: false,\n                },\n      \n                {\n                  name: 'url',\n                  type: 'text',\n                  isNullable: false,\n                },\n                {\n                  name: 'key',\n                  type: 'text',\n                  isNullable: true,\n                },\n              ],\n            }),\n          );\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await getConnection()\n      .createQueryBuilder()\n      .delete()\n      .from(Image)\n      .execute();\n      await queryRunner.dropTable('images');\n    }\n\n    \n\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createLogSeedings1615471723537.html":{"url":"classes/createLogSeedings1615471723537.html","title":"class - createLogSeedings1615471723537","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createLogSeedings1615471723537\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations backup/migrationsV1/1615471723537-createLogSeedings.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1615471723537-createLogSeedings.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1615471723537-createLogSeedings.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner, Table } from 'typeorm';\n\nexport class createLogSeedings1615471723537 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.createTable(\n      new Table({\n        name: 'logsSeeding',\n        columns: [\n          {\n            name: 'id',\n            type: 'int',\n            isPrimary: true,\n            generationStrategy: 'increment',\n            isNullable: false,\n            isGenerated: true,\n          },\n          {\n            name: 'runnedAllMigrations',\n            type: 'tinyint',\n            isNullable: true,\n            default: 0,\n          },\n        ],\n      }),\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createLogSeedings1621384230860.html":{"url":"classes/createLogSeedings1621384230860.html","title":"class - createLogSeedings1621384230860","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createLogSeedings1621384230860\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621384230860-createLogSeedings.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621384230860-createLogSeedings.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621384230860-createLogSeedings.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner, Table } from 'typeorm';\n\nexport class createLogSeedings1621384230860 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.createTable(\n      new Table({\n        name: 'logsSeeding',\n        columns: [\n          {\n            name: 'id',\n            type: 'int',\n            isPrimary: true,\n            generationStrategy: 'increment',\n            isNullable: false,\n            isGenerated: true,\n          },\n          {\n            name: 'runnedAllMigrations',\n            type: 'tinyint',\n            isNullable: true,\n            default: 0,\n          },\n        ],\n      }),\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createTopics1615387637872.html":{"url":"classes/createTopics1615387637872.html","title":"class - createTopics1615387637872","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createTopics1615387637872\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations backup/migrationsV1/1615387637872-createTopics.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1615387637872-createTopics.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1615387637872-createTopics.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Topic } from '../../entities/topic.entity';\nimport {\n  getConnection,\n  MigrationInterface,\n  QueryRunner,\n  Table,\n  TableColumn,\n  TableForeignKey,\n} from 'typeorm';\n\nexport class createTopics1615387637872 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.createTable(\n      new Table({\n        name: 'topics',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            isNullable: false,\n          },\n\n          {\n            name: 'name',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'textBody',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'imageStorage',\n            type: 'text',\n            isNullable: true,\n          },\n          {\n            name: 'isActive',\n            type: 'tinyint',\n            isNullable: false,\n            default: 1,\n          },\n          {\n            name: 'created_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n\n          {\n            name: 'updated_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n          {\n            name: 'deleted_at',\n            type: 'datetime',\n            isNullable: true,\n          },\n          {\n            name: 'seedingId',\n            type: 'int',\n            isPrimary: false,\n            isUnique: true,\n            generationStrategy: 'increment',\n            isGenerated: true,\n          },\n        ],\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'topics',\n      new TableColumn({\n        name: 'categoryId',\n        type: 'varchar',\n        isNullable: false,\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'topics',\n      new TableColumn({\n        name: 'userId',\n        type: 'varchar',\n        isNullable: false,\n      }),\n    );\n\n    await queryRunner.createForeignKey(\n      'topics',\n      new TableForeignKey({\n        columnNames: ['categoryId'],\n        referencedColumnNames: ['id'],\n        referencedTableName: 'categories',\n        onDelete: 'CASCADE',\n      }),\n    );\n\n    await queryRunner.createForeignKey(\n      'topics',\n      new TableForeignKey({\n        columnNames: ['userId'],\n        referencedColumnNames: ['id'],\n        referencedTableName: 'users',\n        onDelete: 'CASCADE',\n      }),\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await getConnection()\n      .createQueryBuilder()\n      .delete()\n      .from(Topic)\n      .execute();\n\n    await queryRunner.dropTable('topics');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createTopics1621384200326.html":{"url":"classes/createTopics1621384200326.html","title":"class - createTopics1621384200326","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createTopics1621384200326\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621384200326-createTopics.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621384200326-createTopics.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621384200326-createTopics.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Topic } from '../../entities/topic.entity';\nimport {\n  getConnection,\n  MigrationInterface,\n  QueryRunner,\n  Table,\n  TableColumn,\n  TableForeignKey,\n} from 'typeorm';\n\nexport class createTopics1621384200326 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.createTable(\n      new Table({\n        name: 'topics',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            isNullable: false,\n          },\n\n          {\n            name: 'name',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'textBody',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'isActive',\n            type: 'tinyint',\n            isNullable: false,\n            default: 1,\n          },\n          {\n            name: 'created_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n\n          {\n            name: 'updated_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n          {\n            name: 'deleted_at',\n            type: 'datetime',\n            isNullable: true,\n          },\n          {\n            name: 'seedingId',\n            type: 'int',\n            isPrimary: false,\n            isUnique: true,\n            generationStrategy: 'increment',\n            isGenerated: true,\n          },\n        ],\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'topics',\n      new TableColumn({\n        name: 'categoryId',\n        type: 'varchar',\n        isNullable: false,\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'topics',\n      new TableColumn({\n        name: 'userId',\n        type: 'varchar',\n        isNullable: false,\n      }),\n    );\n\n    await queryRunner.createForeignKey(\n      'topics',\n      new TableForeignKey({\n        columnNames: ['categoryId'],\n        referencedColumnNames: ['id'],\n        referencedTableName: 'categories',\n        onDelete: 'CASCADE',\n      }),\n    );\n\n    await queryRunner.createForeignKey(\n      'topics',\n      new TableForeignKey({\n        columnNames: ['userId'],\n        referencedColumnNames: ['id'],\n        referencedTableName: 'users',\n        onDelete: 'CASCADE',\n      }),\n    );\n\n\n    await queryRunner.addColumn(\n        'Topics',\n        new TableColumn({\n          name: 'imageId',\n          type: 'varchar',\n          isNullable: false,\n        }),\n      );\n  \n      await queryRunner.createForeignKey(\n        'Topics',\n        new TableForeignKey({\n          columnNames: ['imageId'],\n          referencedColumnNames: ['id'],\n          referencedTableName: 'images',\n          onDelete: 'CASCADE',\n        }),\n      );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await getConnection()\n      .createQueryBuilder()\n      .delete()\n      .from(Topic)\n      .execute();\n\n    await queryRunner.dropTable('topics');\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createUsers1615386570301.html":{"url":"classes/createUsers1615386570301.html","title":"class - createUsers1615386570301","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createUsers1615386570301\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/migrations backup/migrationsV1/1615386570301-createUsers.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1615386570301-createUsers.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/migrations backup/migrationsV1/1615386570301-createUsers.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../entities/user.entity';\nimport { getConnection, MigrationInterface, QueryRunner, Table, TableForeignKey, TableColumn } from 'typeorm';\n\nexport class createUsers1615386570301 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.createTable(\n      new Table({\n        name: 'users',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            isNullable: false,\n          },\n\n          {\n            name: 'name',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'bio',\n            type: 'text',\n            isNullable: true,\n          },\n          {\n            name: 'role',\n            type: 'text',\n            isNullable: true,\n          },\n\n          {\n            name: 'email',\n            type: 'text',\n            isNullable: false,\n          },\n\n          /*{\n            name: 'avatarId',\n            type: 'varchar',\n            isNullable: true,\n          },*/\n\n          {\n            name: 'password',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'recoverToken',\n            type: 'text',\n            isNullable: true,\n          },\n\n          {\n            name: 'isActive',\n            type: 'boolean',\n            isNullable: false,\n            default: true,\n          },\n\n          {\n            name: 'quarentineNum',\n            type: 'int',\n            isNullable: false,\n            default: 0,\n          },\n          {\n            name: 'isAdmin',\n            type: 'boolean',\n            isNullable: false,\n            default: 0,\n          },\n          {\n            name: 'tokenLogout',\n            type: 'text',\n            isNullable: true,\n          },\n          {\n            name: 'created_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n          {\n            name: 'updated_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n          {\n            name: 'deleted_at',\n            type: 'datetime',\n            isNullable: true,\n          },\n          {\n            name: 'seedingId',\n            generationStrategy: 'increment',\n            isGenerated: true,\n            isUnique: true,\n            type: 'int',\n            isNullable: false,\n          },\n        ],\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'users',\n      new TableColumn({\n        name: 'avatarId',\n        type: 'varchar',\n        isNullable: false,\n      }),\n    );\n\n    await queryRunner.createForeignKey(\n      'users',\n      new TableForeignKey({\n        columnNames: ['avatarId'],\n        referencedColumnNames: ['id'],\n        referencedTableName: 'images',\n        onDelete: 'CASCADE',\n      }),\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await getConnection()\n      .createQueryBuilder()\n      .delete()\n      .from(User)\n      .execute();\n\n    await queryRunner.dropTable('users');\n  }\n  \n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/createUsers1621383679414.html":{"url":"classes/createUsers1621383679414.html","title":"class - createUsers1621383679414","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  createUsers1621383679414\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1621383679414-createUsers.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            down\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621383679414-createUsers.ts:124\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            up\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/database/migrations/1621383679414-createUsers.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { User } from '../../entities/user.entity';\nimport { getConnection, MigrationInterface, QueryRunner, Table, TableForeignKey, TableColumn } from 'typeorm';\n\nexport class createUsers1621383679414 implements MigrationInterface {\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.createTable(\n      new Table({\n        name: 'users',\n        columns: [\n          {\n            name: 'id',\n            type: 'varchar',\n            isPrimary: true,\n            generationStrategy: 'uuid',\n            isNullable: false,\n          },\n\n          {\n            name: 'name',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'bio',\n            type: 'text',\n            isNullable: true,\n          },\n          {\n            name: 'role',\n            type: 'text',\n            isNullable: true,\n          },\n\n          {\n            name: 'email',\n            type: 'text',\n            isNullable: false,\n          },\n\n          {\n            name: 'password',\n            type: 'text',\n            isNullable: false,\n          },\n          {\n            name: 'recoverToken',\n            type: 'text',\n            isNullable: true,\n          },\n\n          {\n            name: 'isActive',\n            type: 'boolean',\n            isNullable: false,\n            default: true,\n          },\n\n          {\n            name: 'quarentineNum',\n            type: 'int',\n            isNullable: false,\n            default: 0,\n          },\n          {\n            name: 'isAdmin',\n            type: 'boolean',\n            isNullable: false,\n            default: 0,\n          },\n          {\n            name: 'tokenLogout',\n            type: 'text',\n            isNullable: true,\n          },\n          {\n            name: 'created_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n          {\n            name: 'updated_at',\n            type: 'datetime',\n            isNullable: true,\n            default: 'now()',\n          },\n          {\n            name: 'deleted_at',\n            type: 'datetime',\n            isNullable: true,\n          },\n          {\n            name: 'seedingId',\n            generationStrategy: 'increment',\n            isGenerated: true,\n            isUnique: true,\n            type: 'int',\n            isNullable: false,\n          },\n        ],\n      }),\n    );\n\n    await queryRunner.addColumn(\n      'users',\n      new TableColumn({\n        name: 'avatarId',\n        type: 'varchar',\n        isNullable: false,\n      }),\n    );\n\n    await queryRunner.createForeignKey(\n      'users',\n      new TableForeignKey({\n        columnNames: ['avatarId'],\n        referencedColumnNames: ['id'],\n        referencedTableName: 'images',\n        onDelete: 'CASCADE',\n      }),\n    );\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await getConnection()\n      .createQueryBuilder()\n      .delete()\n      .from(User)\n      .execute();\n\n    await queryRunner.dropTable('users');\n  }\n  \n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.5.1\n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.3\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.7.12\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            aws-sdk : ^2.900.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            express : ^4.17.1\n        \n            express-formidable : ^1.2.0\n        \n            faker : ^5.4.0\n        \n            global : ^4.4.0\n        \n            handlebars : ^4.7.7\n        \n            joi : ^17.4.0\n        \n            js-yaml : ^4.0.0\n        \n            multer : ^1.4.2\n        \n            multer-s3 : ^2.9.0\n        \n            mysql : ^2.14.1\n        \n            nodemailer : ^6.5.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.6\n        \n            ts-node-dev : ^1.0.0\n        \n            typeorm : ^0.2.31\n        \n            uuidv4 : ^6.2.5\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AdminSeed   (src/.../admin-seed.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            CallingSeeders   (src/.../calling-seeders.ts)\n                        \n                        \n                            CategorySeed   (src/.../category-seed.ts)\n                        \n                        \n                            CommentsSeed   (src/.../comments-seed.ts)\n                        \n                        \n                            TopicsSeed   (src/.../topics-seed.ts)\n                        \n                        \n                            UserSeed   (src/.../user-seed.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/seeders/admin-seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            AdminSeed\n                        \n                        \n                    \n                \n            \n            \n                \nAdminSeed(verifyRun: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    verifyRun\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/database/seeders/calling-seeders.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            CallingSeeders\n                        \n                        \n                    \n                \n            \n            \n                \nCallingSeeders()\n                \n            \n\n\n\n\n        \n    \n    src/database/seeders/category-seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            CategorySeed\n                        \n                        \n                    \n                \n            \n            \n                \nCategorySeed(verifyRun: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    verifyRun\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/database/seeders/comments-seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            CommentsSeed\n                        \n                        \n                    \n                \n            \n            \n                \nCommentsSeed(verifyRun: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    verifyRun\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/database/seeders/topics-seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            TopicsSeed\n                        \n                        \n                    \n                \n            \n            \n                \nTopicsSeed(verifyRun: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    verifyRun\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/database/seeders/user-seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            UserSeed\n                        \n                        \n                    \n                \n            \n            \n                \nUserSeed()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ForumModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ImageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TopicModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_imports\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_CommentsModule\n\n\n\ncluster_CommentsModule_providers\n\n\n\ncluster_ForumModule\n\n\n\ncluster_ForumModule_exports\n\n\n\ncluster_ImageModule\n\n\n\ncluster_ImageModule_exports\n\n\n\ncluster_ImageModule_providers\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nForumModule\n\nForumModule\n\nAppModule -->\n\nForumModule->AppModule\n\n\n\n\n\nCategoryModule \n\nCategoryModule \n\nCategoryModule  -->\n\nForumModule->CategoryModule \n\n\n\n\n\nCommentsModule \n\nCommentsModule \n\nCommentsModule  -->\n\nForumModule->CommentsModule \n\n\n\n\n\nTopicModule \n\nTopicModule \n\nTopicModule  -->\n\nForumModule->TopicModule \n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nForumModule -->\n\nUserModule->ForumModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nUserModule->CategoryModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUser\n\nUser\n\nAuthModule -->\n\nUser->AuthModule\n\n\n\n\n\nTopicModule\n\nTopicModule\n\nTopicModule -->\n\nUser->TopicModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nForumModule -->\n\nSharedModule->ForumModule\n\n\n\nUserModule -->\n\nSharedModule->UserModule\n\n\n\nTopicModule -->\n\nSharedModule->TopicModule\n\n\n\nCategoryModule -->\n\nSharedModule->CategoryModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nCommentsModule -->\n\nSharedModule->CommentsModule\n\n\n\n\n\nImageModule \n\nImageModule \n\nImageModule  -->\n\nSharedModule->ImageModule \n\n\n\nForumModule -->\n\nTopicModule->ForumModule\n\n\n\nCategoryModule -->\n\nTopicModule->CategoryModule\n\n\n\nForumModule -->\n\nCategoryModule->ForumModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nForumModule -->\n\nCategoryService->ForumModule\n\n\n\nUserModule -->\n\nCategoryService->UserModule\n\n\n\nTopicModule -->\n\nCategoryService->TopicModule\n\n\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\nCommentsModule -->\n\nCategoryService->CommentsModule\n\n\n\n\n\nTopicsService\n\nTopicsService\n\nForumModule -->\n\nTopicsService->ForumModule\n\n\n\nUserModule -->\n\nTopicsService->UserModule\n\n\n\nTopicModule -->\n\nTopicsService->TopicModule\n\n\n\nCategoryModule -->\n\nTopicsService->CategoryModule\n\n\n\nCommentsModule -->\n\nTopicsService->CommentsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\nTopicModule -->\n\nUserService->TopicModule\n\n\n\nCategoryModule -->\n\nUserService->CategoryModule\n\n\n\nCommentsModule -->\n\nUserService->CommentsModule\n\n\n\nForumModule -->\n\nCommentsModule->ForumModule\n\n\n\n\n\nCommentService\n\nCommentService\n\nForumModule -->\n\nCommentService->ForumModule\n\n\n\nCommentsModule -->\n\nCommentService->CommentsModule\n\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nImageModule\n\nImageModule\n\nSharedModule -->\n\nImageModule->SharedModule\n\n\n\nFilesService  -->\n\nImageModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nSharedModule -->\n\nFilesService->SharedModule\n\n\n\nImageModule -->\n\nFilesService->ImageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    40 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            page   (src/.../page.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/page.ts\n    \n    \n        \n            \n                \n                    \n                    page\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            logoutConstant   (src/.../logout.ts)\n                        \n                        \n                            mailerConfig   (src/.../mailer.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/logout.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            logoutConstant\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  constant: process.env.LOGOUT_CONSTANT,\n}\n                        \n                    \n\n\n            \n        \n\n    src/mailer/mailer.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mailerConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MailerOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  template: {\n    dir: path.resolve(__dirname, 'templates'),\n    adapter: new HandlebarsAdapter(),\n    options: {\n      extName: '.hbs',\n      layoutsDir: path.resolve(__dirname, 'templates'),\n    },\n  },\n  transport: {\n    host: process.env.SMTP_HOST,\n    port: process.env.SMTP_PORT,\n    secure: false, // use TLS\n    auth: {\n      user: process.env.SMTP_USER,\n      pass: process.env.SMTP_PASSWORD,\n    },\n    tls: {\n      rejectUnauthorized: false,\n    },\n  },\n  //plantasia.fatec@gmail.com\n  //Plantasia@123#\n  //`smtps://plantasia.fatec@gmail.com:Plantasia@123#@smtp.gmail.com`,\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
